// GENERATED FILE
// DO NOT MODIFY
// ignore_for_file: type=lint
import 'dart:convert';

import 'package:gql/ast.dart';
import 'package:graphql/client.dart' as graphql;
import 'schema.graphql.dart';

class Fragment$MediaDetailed implements Fragment$MediaShort {
  Fragment$MediaDetailed({
    this.averageScore,
    this.bannerImage,
    this.popularity,
    this.nextAiringEpisode,
    this.description,
    this.trailer,
    this.synonyms,
    this.episodes,
    this.duration,
    this.volumes,
    this.chapters,
    this.source,
    this.externalLinks,
    this.studios,
    this.relations,
    this.recommendations,
    this.tags,
    this.rankings,
    this.stats,
    this.modNotes,
    required this.isFavourite,
    required this.id,
    this.title,
    this.coverImage,
    this.meanScore,
    this.favourites,
    this.format,
    this.type,
    this.status,
    this.airingSchedule,
    this.genres,
    this.season,
    this.seasonYear,
    this.countryOfOrigin,
    this.startDate,
    this.endDate,
    this.mediaListEntry,
    this.$__typename = 'Media',
    this.siteUrl,
  });

  factory Fragment$MediaDetailed.fromJson(Map<String, dynamic> json) {
    final l$averageScore = json['averageScore'];
    final l$bannerImage = json['bannerImage'];
    final l$popularity = json['popularity'];
    final l$nextAiringEpisode = json['nextAiringEpisode'];
    final l$description = json['description'];
    final l$trailer = json['trailer'];
    final l$synonyms = json['synonyms'];
    final l$episodes = json['episodes'];
    final l$duration = json['duration'];
    final l$volumes = json['volumes'];
    final l$chapters = json['chapters'];
    final l$source = json['source'];
    final l$externalLinks = json['externalLinks'];
    final l$studios = json['studios'];
    final l$relations = json['relations'];
    final l$recommendations = json['recommendations'];
    final l$tags = json['tags'];
    final l$rankings = json['rankings'];
    final l$stats = json['stats'];
    final l$modNotes = json['modNotes'];
    final l$isFavourite = json['isFavourite'];
    final l$id = json['id'];
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$meanScore = json['meanScore'];
    final l$favourites = json['favourites'];
    final l$format = json['format'];
    final l$type = json['type'];
    final l$status = json['status'];
    final l$airingSchedule = json['airingSchedule'];
    final l$genres = json['genres'];
    final l$season = json['season'];
    final l$seasonYear = json['seasonYear'];
    final l$countryOfOrigin = json['countryOfOrigin'];
    final l$startDate = json['startDate'];
    final l$endDate = json['endDate'];
    final l$mediaListEntry = json['mediaListEntry'];
    final l$$__typename = json['__typename'];
    final l$siteUrl = json['siteUrl'];
    return Fragment$MediaDetailed(
      averageScore: (l$averageScore as int?),
      bannerImage: (l$bannerImage as String?),
      popularity: (l$popularity as int?),
      nextAiringEpisode: l$nextAiringEpisode == null
          ? null
          : Fragment$MediaDetailed$nextAiringEpisode.fromJson(
              (l$nextAiringEpisode as Map<String, dynamic>)),
      description: (l$description as String?),
      trailer: l$trailer == null
          ? null
          : Fragment$MediaDetailed$trailer.fromJson(
              (l$trailer as Map<String, dynamic>)),
      synonyms:
          (l$synonyms as List<dynamic>?)?.map((e) => (e as String?)).toList(),
      episodes: (l$episodes as int?),
      duration: (l$duration as int?),
      volumes: (l$volumes as int?),
      chapters: (l$chapters as int?),
      source: l$source == null
          ? null
          : fromJson$Enum$MediaSource((l$source as String)),
      externalLinks: (l$externalLinks as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$externalLinks.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      studios: l$studios == null
          ? null
          : Fragment$MediaDetailed$studios.fromJson(
              (l$studios as Map<String, dynamic>)),
      relations: l$relations == null
          ? null
          : Fragment$MediaDetailed$relations.fromJson(
              (l$relations as Map<String, dynamic>)),
      recommendations: l$recommendations == null
          ? null
          : Fragment$MediaDetailed$recommendations.fromJson(
              (l$recommendations as Map<String, dynamic>)),
      tags: (l$tags as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$tags.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      rankings: (l$rankings as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$rankings.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      stats: l$stats == null
          ? null
          : Fragment$MediaDetailed$stats.fromJson(
              (l$stats as Map<String, dynamic>)),
      modNotes: (l$modNotes as String?),
      isFavourite: (l$isFavourite as bool),
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$MediaDetailed$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$MediaDetailed$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      meanScore: (l$meanScore as int?),
      favourites: (l$favourites as int?),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaStatus((l$status as String)),
      airingSchedule: l$airingSchedule == null
          ? null
          : Fragment$MediaDetailed$airingSchedule.fromJson(
              (l$airingSchedule as Map<String, dynamic>)),
      genres: (l$genres as List<dynamic>?)?.map((e) => (e as String?)).toList(),
      season: l$season == null
          ? null
          : fromJson$Enum$MediaSeason((l$season as String)),
      seasonYear: (l$seasonYear as int?),
      countryOfOrigin: (l$countryOfOrigin as String?),
      startDate: l$startDate == null
          ? null
          : Fragment$FuzzyDate.fromJson((l$startDate as Map<String, dynamic>)),
      endDate: l$endDate == null
          ? null
          : Fragment$FuzzyDate.fromJson((l$endDate as Map<String, dynamic>)),
      mediaListEntry: l$mediaListEntry == null
          ? null
          : Fragment$MediaListEntry.fromJson(
              (l$mediaListEntry as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
      siteUrl: (l$siteUrl as String?),
    );
  }

  final int? averageScore;

  final String? bannerImage;

  final int? popularity;

  final Fragment$MediaDetailed$nextAiringEpisode? nextAiringEpisode;

  final String? description;

  final Fragment$MediaDetailed$trailer? trailer;

  final List<String?>? synonyms;

  final int? episodes;

  final int? duration;

  final int? volumes;

  final int? chapters;

  final Enum$MediaSource? source;

  final List<Fragment$MediaDetailed$externalLinks?>? externalLinks;

  final Fragment$MediaDetailed$studios? studios;

  final Fragment$MediaDetailed$relations? relations;

  final Fragment$MediaDetailed$recommendations? recommendations;

  final List<Fragment$MediaDetailed$tags?>? tags;

  final List<Fragment$MediaDetailed$rankings?>? rankings;

  final Fragment$MediaDetailed$stats? stats;

  final String? modNotes;

  final bool isFavourite;

  final int id;

  final Fragment$MediaDetailed$title? title;

  final Fragment$MediaDetailed$coverImage? coverImage;

  final int? meanScore;

  final int? favourites;

  final Enum$MediaFormat? format;

  final Enum$MediaType? type;

  final Enum$MediaStatus? status;

  final Fragment$MediaDetailed$airingSchedule? airingSchedule;

  final List<String?>? genres;

  final Enum$MediaSeason? season;

  final int? seasonYear;

  final String? countryOfOrigin;

  final Fragment$FuzzyDate? startDate;

  final Fragment$FuzzyDate? endDate;

  final Fragment$MediaListEntry? mediaListEntry;

  final String $__typename;

  final String? siteUrl;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$averageScore = averageScore;
    _resultData['averageScore'] = l$averageScore;
    final l$bannerImage = bannerImage;
    _resultData['bannerImage'] = l$bannerImage;
    final l$popularity = popularity;
    _resultData['popularity'] = l$popularity;
    final l$nextAiringEpisode = nextAiringEpisode;
    _resultData['nextAiringEpisode'] = l$nextAiringEpisode?.toJson();
    final l$description = description;
    _resultData['description'] = l$description;
    final l$trailer = trailer;
    _resultData['trailer'] = l$trailer?.toJson();
    final l$synonyms = synonyms;
    _resultData['synonyms'] = l$synonyms?.map((e) => e).toList();
    final l$episodes = episodes;
    _resultData['episodes'] = l$episodes;
    final l$duration = duration;
    _resultData['duration'] = l$duration;
    final l$volumes = volumes;
    _resultData['volumes'] = l$volumes;
    final l$chapters = chapters;
    _resultData['chapters'] = l$chapters;
    final l$source = source;
    _resultData['source'] =
        l$source == null ? null : toJson$Enum$MediaSource(l$source);
    final l$externalLinks = externalLinks;
    _resultData['externalLinks'] =
        l$externalLinks?.map((e) => e?.toJson()).toList();
    final l$studios = studios;
    _resultData['studios'] = l$studios?.toJson();
    final l$relations = relations;
    _resultData['relations'] = l$relations?.toJson();
    final l$recommendations = recommendations;
    _resultData['recommendations'] = l$recommendations?.toJson();
    final l$tags = tags;
    _resultData['tags'] = l$tags?.map((e) => e?.toJson()).toList();
    final l$rankings = rankings;
    _resultData['rankings'] = l$rankings?.map((e) => e?.toJson()).toList();
    final l$stats = stats;
    _resultData['stats'] = l$stats?.toJson();
    final l$modNotes = modNotes;
    _resultData['modNotes'] = l$modNotes;
    final l$isFavourite = isFavourite;
    _resultData['isFavourite'] = l$isFavourite;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$meanScore = meanScore;
    _resultData['meanScore'] = l$meanScore;
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaStatus(l$status);
    final l$airingSchedule = airingSchedule;
    _resultData['airingSchedule'] = l$airingSchedule?.toJson();
    final l$genres = genres;
    _resultData['genres'] = l$genres?.map((e) => e).toList();
    final l$season = season;
    _resultData['season'] =
        l$season == null ? null : toJson$Enum$MediaSeason(l$season);
    final l$seasonYear = seasonYear;
    _resultData['seasonYear'] = l$seasonYear;
    final l$countryOfOrigin = countryOfOrigin;
    _resultData['countryOfOrigin'] = l$countryOfOrigin;
    final l$startDate = startDate;
    _resultData['startDate'] = l$startDate?.toJson();
    final l$endDate = endDate;
    _resultData['endDate'] = l$endDate?.toJson();
    final l$mediaListEntry = mediaListEntry;
    _resultData['mediaListEntry'] = l$mediaListEntry?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    final l$siteUrl = siteUrl;
    _resultData['siteUrl'] = l$siteUrl;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$averageScore = averageScore;
    final l$bannerImage = bannerImage;
    final l$popularity = popularity;
    final l$nextAiringEpisode = nextAiringEpisode;
    final l$description = description;
    final l$trailer = trailer;
    final l$synonyms = synonyms;
    final l$episodes = episodes;
    final l$duration = duration;
    final l$volumes = volumes;
    final l$chapters = chapters;
    final l$source = source;
    final l$externalLinks = externalLinks;
    final l$studios = studios;
    final l$relations = relations;
    final l$recommendations = recommendations;
    final l$tags = tags;
    final l$rankings = rankings;
    final l$stats = stats;
    final l$modNotes = modNotes;
    final l$isFavourite = isFavourite;
    final l$id = id;
    final l$title = title;
    final l$coverImage = coverImage;
    final l$meanScore = meanScore;
    final l$favourites = favourites;
    final l$format = format;
    final l$type = type;
    final l$status = status;
    final l$airingSchedule = airingSchedule;
    final l$genres = genres;
    final l$season = season;
    final l$seasonYear = seasonYear;
    final l$countryOfOrigin = countryOfOrigin;
    final l$startDate = startDate;
    final l$endDate = endDate;
    final l$mediaListEntry = mediaListEntry;
    final l$$__typename = $__typename;
    final l$siteUrl = siteUrl;
    return Object.hashAll([
      l$averageScore,
      l$bannerImage,
      l$popularity,
      l$nextAiringEpisode,
      l$description,
      l$trailer,
      l$synonyms == null ? null : Object.hashAll(l$synonyms.map((v) => v)),
      l$episodes,
      l$duration,
      l$volumes,
      l$chapters,
      l$source,
      l$externalLinks == null
          ? null
          : Object.hashAll(l$externalLinks.map((v) => v)),
      l$studios,
      l$relations,
      l$recommendations,
      l$tags == null ? null : Object.hashAll(l$tags.map((v) => v)),
      l$rankings == null ? null : Object.hashAll(l$rankings.map((v) => v)),
      l$stats,
      l$modNotes,
      l$isFavourite,
      l$id,
      l$title,
      l$coverImage,
      l$meanScore,
      l$favourites,
      l$format,
      l$type,
      l$status,
      l$airingSchedule,
      l$genres == null ? null : Object.hashAll(l$genres.map((v) => v)),
      l$season,
      l$seasonYear,
      l$countryOfOrigin,
      l$startDate,
      l$endDate,
      l$mediaListEntry,
      l$$__typename,
      l$siteUrl,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed || runtimeType != other.runtimeType) {
      return false;
    }
    final l$averageScore = averageScore;
    final lOther$averageScore = other.averageScore;
    if (l$averageScore != lOther$averageScore) {
      return false;
    }
    final l$bannerImage = bannerImage;
    final lOther$bannerImage = other.bannerImage;
    if (l$bannerImage != lOther$bannerImage) {
      return false;
    }
    final l$popularity = popularity;
    final lOther$popularity = other.popularity;
    if (l$popularity != lOther$popularity) {
      return false;
    }
    final l$nextAiringEpisode = nextAiringEpisode;
    final lOther$nextAiringEpisode = other.nextAiringEpisode;
    if (l$nextAiringEpisode != lOther$nextAiringEpisode) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$trailer = trailer;
    final lOther$trailer = other.trailer;
    if (l$trailer != lOther$trailer) {
      return false;
    }
    final l$synonyms = synonyms;
    final lOther$synonyms = other.synonyms;
    if (l$synonyms != null && lOther$synonyms != null) {
      if (l$synonyms.length != lOther$synonyms.length) {
        return false;
      }
      for (int i = 0; i < l$synonyms.length; i++) {
        final l$synonyms$entry = l$synonyms[i];
        final lOther$synonyms$entry = lOther$synonyms[i];
        if (l$synonyms$entry != lOther$synonyms$entry) {
          return false;
        }
      }
    } else if (l$synonyms != lOther$synonyms) {
      return false;
    }
    final l$episodes = episodes;
    final lOther$episodes = other.episodes;
    if (l$episodes != lOther$episodes) {
      return false;
    }
    final l$duration = duration;
    final lOther$duration = other.duration;
    if (l$duration != lOther$duration) {
      return false;
    }
    final l$volumes = volumes;
    final lOther$volumes = other.volumes;
    if (l$volumes != lOther$volumes) {
      return false;
    }
    final l$chapters = chapters;
    final lOther$chapters = other.chapters;
    if (l$chapters != lOther$chapters) {
      return false;
    }
    final l$source = source;
    final lOther$source = other.source;
    if (l$source != lOther$source) {
      return false;
    }
    final l$externalLinks = externalLinks;
    final lOther$externalLinks = other.externalLinks;
    if (l$externalLinks != null && lOther$externalLinks != null) {
      if (l$externalLinks.length != lOther$externalLinks.length) {
        return false;
      }
      for (int i = 0; i < l$externalLinks.length; i++) {
        final l$externalLinks$entry = l$externalLinks[i];
        final lOther$externalLinks$entry = lOther$externalLinks[i];
        if (l$externalLinks$entry != lOther$externalLinks$entry) {
          return false;
        }
      }
    } else if (l$externalLinks != lOther$externalLinks) {
      return false;
    }
    final l$studios = studios;
    final lOther$studios = other.studios;
    if (l$studios != lOther$studios) {
      return false;
    }
    final l$relations = relations;
    final lOther$relations = other.relations;
    if (l$relations != lOther$relations) {
      return false;
    }
    final l$recommendations = recommendations;
    final lOther$recommendations = other.recommendations;
    if (l$recommendations != lOther$recommendations) {
      return false;
    }
    final l$tags = tags;
    final lOther$tags = other.tags;
    if (l$tags != null && lOther$tags != null) {
      if (l$tags.length != lOther$tags.length) {
        return false;
      }
      for (int i = 0; i < l$tags.length; i++) {
        final l$tags$entry = l$tags[i];
        final lOther$tags$entry = lOther$tags[i];
        if (l$tags$entry != lOther$tags$entry) {
          return false;
        }
      }
    } else if (l$tags != lOther$tags) {
      return false;
    }
    final l$rankings = rankings;
    final lOther$rankings = other.rankings;
    if (l$rankings != null && lOther$rankings != null) {
      if (l$rankings.length != lOther$rankings.length) {
        return false;
      }
      for (int i = 0; i < l$rankings.length; i++) {
        final l$rankings$entry = l$rankings[i];
        final lOther$rankings$entry = lOther$rankings[i];
        if (l$rankings$entry != lOther$rankings$entry) {
          return false;
        }
      }
    } else if (l$rankings != lOther$rankings) {
      return false;
    }
    final l$stats = stats;
    final lOther$stats = other.stats;
    if (l$stats != lOther$stats) {
      return false;
    }
    final l$modNotes = modNotes;
    final lOther$modNotes = other.modNotes;
    if (l$modNotes != lOther$modNotes) {
      return false;
    }
    final l$isFavourite = isFavourite;
    final lOther$isFavourite = other.isFavourite;
    if (l$isFavourite != lOther$isFavourite) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$meanScore = meanScore;
    final lOther$meanScore = other.meanScore;
    if (l$meanScore != lOther$meanScore) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$airingSchedule = airingSchedule;
    final lOther$airingSchedule = other.airingSchedule;
    if (l$airingSchedule != lOther$airingSchedule) {
      return false;
    }
    final l$genres = genres;
    final lOther$genres = other.genres;
    if (l$genres != null && lOther$genres != null) {
      if (l$genres.length != lOther$genres.length) {
        return false;
      }
      for (int i = 0; i < l$genres.length; i++) {
        final l$genres$entry = l$genres[i];
        final lOther$genres$entry = lOther$genres[i];
        if (l$genres$entry != lOther$genres$entry) {
          return false;
        }
      }
    } else if (l$genres != lOther$genres) {
      return false;
    }
    final l$season = season;
    final lOther$season = other.season;
    if (l$season != lOther$season) {
      return false;
    }
    final l$seasonYear = seasonYear;
    final lOther$seasonYear = other.seasonYear;
    if (l$seasonYear != lOther$seasonYear) {
      return false;
    }
    final l$countryOfOrigin = countryOfOrigin;
    final lOther$countryOfOrigin = other.countryOfOrigin;
    if (l$countryOfOrigin != lOther$countryOfOrigin) {
      return false;
    }
    final l$startDate = startDate;
    final lOther$startDate = other.startDate;
    if (l$startDate != lOther$startDate) {
      return false;
    }
    final l$endDate = endDate;
    final lOther$endDate = other.endDate;
    if (l$endDate != lOther$endDate) {
      return false;
    }
    final l$mediaListEntry = mediaListEntry;
    final lOther$mediaListEntry = other.mediaListEntry;
    if (l$mediaListEntry != lOther$mediaListEntry) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    final l$siteUrl = siteUrl;
    final lOther$siteUrl = other.siteUrl;
    if (l$siteUrl != lOther$siteUrl) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed on Fragment$MediaDetailed {
  CopyWith$Fragment$MediaDetailed<Fragment$MediaDetailed> get copyWith =>
      CopyWith$Fragment$MediaDetailed(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaDetailed<TRes> {
  factory CopyWith$Fragment$MediaDetailed(
    Fragment$MediaDetailed instance,
    TRes Function(Fragment$MediaDetailed) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed;

  factory CopyWith$Fragment$MediaDetailed.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed;

  TRes call({
    int? averageScore,
    String? bannerImage,
    int? popularity,
    Fragment$MediaDetailed$nextAiringEpisode? nextAiringEpisode,
    String? description,
    Fragment$MediaDetailed$trailer? trailer,
    List<String?>? synonyms,
    int? episodes,
    int? duration,
    int? volumes,
    int? chapters,
    Enum$MediaSource? source,
    List<Fragment$MediaDetailed$externalLinks?>? externalLinks,
    Fragment$MediaDetailed$studios? studios,
    Fragment$MediaDetailed$relations? relations,
    Fragment$MediaDetailed$recommendations? recommendations,
    List<Fragment$MediaDetailed$tags?>? tags,
    List<Fragment$MediaDetailed$rankings?>? rankings,
    Fragment$MediaDetailed$stats? stats,
    String? modNotes,
    bool? isFavourite,
    int? id,
    Fragment$MediaDetailed$title? title,
    Fragment$MediaDetailed$coverImage? coverImage,
    int? meanScore,
    int? favourites,
    Enum$MediaFormat? format,
    Enum$MediaType? type,
    Enum$MediaStatus? status,
    Fragment$MediaDetailed$airingSchedule? airingSchedule,
    List<String?>? genres,
    Enum$MediaSeason? season,
    int? seasonYear,
    String? countryOfOrigin,
    Fragment$FuzzyDate? startDate,
    Fragment$FuzzyDate? endDate,
    Fragment$MediaListEntry? mediaListEntry,
    String? $__typename,
    String? siteUrl,
  });
  CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes> get nextAiringEpisode;
  CopyWith$Fragment$MediaDetailed$trailer<TRes> get trailer;
  TRes externalLinks(
      Iterable<Fragment$MediaDetailed$externalLinks?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$externalLinks<
                      Fragment$MediaDetailed$externalLinks>?>?)
          _fn);
  CopyWith$Fragment$MediaDetailed$studios<TRes> get studios;
  CopyWith$Fragment$MediaDetailed$relations<TRes> get relations;
  CopyWith$Fragment$MediaDetailed$recommendations<TRes> get recommendations;
  TRes tags(
      Iterable<Fragment$MediaDetailed$tags?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$tags<
                      Fragment$MediaDetailed$tags>?>?)
          _fn);
  TRes rankings(
      Iterable<Fragment$MediaDetailed$rankings?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$rankings<
                      Fragment$MediaDetailed$rankings>?>?)
          _fn);
  CopyWith$Fragment$MediaDetailed$stats<TRes> get stats;
  CopyWith$Fragment$MediaDetailed$title<TRes> get title;
  CopyWith$Fragment$MediaDetailed$coverImage<TRes> get coverImage;
  CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> get airingSchedule;
  CopyWith$Fragment$FuzzyDate<TRes> get startDate;
  CopyWith$Fragment$FuzzyDate<TRes> get endDate;
  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry;
}

class _CopyWithImpl$Fragment$MediaDetailed<TRes>
    implements CopyWith$Fragment$MediaDetailed<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed _instance;

  final TRes Function(Fragment$MediaDetailed) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? averageScore = _undefined,
    Object? bannerImage = _undefined,
    Object? popularity = _undefined,
    Object? nextAiringEpisode = _undefined,
    Object? description = _undefined,
    Object? trailer = _undefined,
    Object? synonyms = _undefined,
    Object? episodes = _undefined,
    Object? duration = _undefined,
    Object? volumes = _undefined,
    Object? chapters = _undefined,
    Object? source = _undefined,
    Object? externalLinks = _undefined,
    Object? studios = _undefined,
    Object? relations = _undefined,
    Object? recommendations = _undefined,
    Object? tags = _undefined,
    Object? rankings = _undefined,
    Object? stats = _undefined,
    Object? modNotes = _undefined,
    Object? isFavourite = _undefined,
    Object? id = _undefined,
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? meanScore = _undefined,
    Object? favourites = _undefined,
    Object? format = _undefined,
    Object? type = _undefined,
    Object? status = _undefined,
    Object? airingSchedule = _undefined,
    Object? genres = _undefined,
    Object? season = _undefined,
    Object? seasonYear = _undefined,
    Object? countryOfOrigin = _undefined,
    Object? startDate = _undefined,
    Object? endDate = _undefined,
    Object? mediaListEntry = _undefined,
    Object? $__typename = _undefined,
    Object? siteUrl = _undefined,
  }) =>
      _then(Fragment$MediaDetailed(
        averageScore: averageScore == _undefined
            ? _instance.averageScore
            : (averageScore as int?),
        bannerImage: bannerImage == _undefined
            ? _instance.bannerImage
            : (bannerImage as String?),
        popularity: popularity == _undefined
            ? _instance.popularity
            : (popularity as int?),
        nextAiringEpisode: nextAiringEpisode == _undefined
            ? _instance.nextAiringEpisode
            : (nextAiringEpisode as Fragment$MediaDetailed$nextAiringEpisode?),
        description: description == _undefined
            ? _instance.description
            : (description as String?),
        trailer: trailer == _undefined
            ? _instance.trailer
            : (trailer as Fragment$MediaDetailed$trailer?),
        synonyms: synonyms == _undefined
            ? _instance.synonyms
            : (synonyms as List<String?>?),
        episodes:
            episodes == _undefined ? _instance.episodes : (episodes as int?),
        duration:
            duration == _undefined ? _instance.duration : (duration as int?),
        volumes: volumes == _undefined ? _instance.volumes : (volumes as int?),
        chapters:
            chapters == _undefined ? _instance.chapters : (chapters as int?),
        source: source == _undefined
            ? _instance.source
            : (source as Enum$MediaSource?),
        externalLinks: externalLinks == _undefined
            ? _instance.externalLinks
            : (externalLinks as List<Fragment$MediaDetailed$externalLinks?>?),
        studios: studios == _undefined
            ? _instance.studios
            : (studios as Fragment$MediaDetailed$studios?),
        relations: relations == _undefined
            ? _instance.relations
            : (relations as Fragment$MediaDetailed$relations?),
        recommendations: recommendations == _undefined
            ? _instance.recommendations
            : (recommendations as Fragment$MediaDetailed$recommendations?),
        tags: tags == _undefined
            ? _instance.tags
            : (tags as List<Fragment$MediaDetailed$tags?>?),
        rankings: rankings == _undefined
            ? _instance.rankings
            : (rankings as List<Fragment$MediaDetailed$rankings?>?),
        stats: stats == _undefined
            ? _instance.stats
            : (stats as Fragment$MediaDetailed$stats?),
        modNotes:
            modNotes == _undefined ? _instance.modNotes : (modNotes as String?),
        isFavourite: isFavourite == _undefined || isFavourite == null
            ? _instance.isFavourite
            : (isFavourite as bool),
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$MediaDetailed$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$MediaDetailed$coverImage?),
        meanScore:
            meanScore == _undefined ? _instance.meanScore : (meanScore as int?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaStatus?),
        airingSchedule: airingSchedule == _undefined
            ? _instance.airingSchedule
            : (airingSchedule as Fragment$MediaDetailed$airingSchedule?),
        genres: genres == _undefined
            ? _instance.genres
            : (genres as List<String?>?),
        season: season == _undefined
            ? _instance.season
            : (season as Enum$MediaSeason?),
        seasonYear: seasonYear == _undefined
            ? _instance.seasonYear
            : (seasonYear as int?),
        countryOfOrigin: countryOfOrigin == _undefined
            ? _instance.countryOfOrigin
            : (countryOfOrigin as String?),
        startDate: startDate == _undefined
            ? _instance.startDate
            : (startDate as Fragment$FuzzyDate?),
        endDate: endDate == _undefined
            ? _instance.endDate
            : (endDate as Fragment$FuzzyDate?),
        mediaListEntry: mediaListEntry == _undefined
            ? _instance.mediaListEntry
            : (mediaListEntry as Fragment$MediaListEntry?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
        siteUrl:
            siteUrl == _undefined ? _instance.siteUrl : (siteUrl as String?),
      ));

  CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes>
      get nextAiringEpisode {
    final local$nextAiringEpisode = _instance.nextAiringEpisode;
    return local$nextAiringEpisode == null
        ? CopyWith$Fragment$MediaDetailed$nextAiringEpisode.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDetailed$nextAiringEpisode(
            local$nextAiringEpisode, (e) => call(nextAiringEpisode: e));
  }

  CopyWith$Fragment$MediaDetailed$trailer<TRes> get trailer {
    final local$trailer = _instance.trailer;
    return local$trailer == null
        ? CopyWith$Fragment$MediaDetailed$trailer.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$trailer(
            local$trailer, (e) => call(trailer: e));
  }

  TRes externalLinks(
          Iterable<Fragment$MediaDetailed$externalLinks?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$externalLinks<
                          Fragment$MediaDetailed$externalLinks>?>?)
              _fn) =>
      call(
          externalLinks: _fn(_instance.externalLinks?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$externalLinks(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Fragment$MediaDetailed$studios<TRes> get studios {
    final local$studios = _instance.studios;
    return local$studios == null
        ? CopyWith$Fragment$MediaDetailed$studios.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$studios(
            local$studios, (e) => call(studios: e));
  }

  CopyWith$Fragment$MediaDetailed$relations<TRes> get relations {
    final local$relations = _instance.relations;
    return local$relations == null
        ? CopyWith$Fragment$MediaDetailed$relations.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$relations(
            local$relations, (e) => call(relations: e));
  }

  CopyWith$Fragment$MediaDetailed$recommendations<TRes> get recommendations {
    final local$recommendations = _instance.recommendations;
    return local$recommendations == null
        ? CopyWith$Fragment$MediaDetailed$recommendations.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$recommendations(
            local$recommendations, (e) => call(recommendations: e));
  }

  TRes tags(
          Iterable<Fragment$MediaDetailed$tags?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$tags<
                          Fragment$MediaDetailed$tags>?>?)
              _fn) =>
      call(
          tags: _fn(_instance.tags?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$tags(
                  e,
                  (i) => i,
                )))?.toList());

  TRes rankings(
          Iterable<Fragment$MediaDetailed$rankings?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$rankings<
                          Fragment$MediaDetailed$rankings>?>?)
              _fn) =>
      call(
          rankings: _fn(_instance.rankings?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$rankings(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Fragment$MediaDetailed$stats<TRes> get stats {
    final local$stats = _instance.stats;
    return local$stats == null
        ? CopyWith$Fragment$MediaDetailed$stats.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$stats(
            local$stats, (e) => call(stats: e));
  }

  CopyWith$Fragment$MediaDetailed$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$MediaDetailed$title.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$MediaDetailed$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$MediaDetailed$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> get airingSchedule {
    final local$airingSchedule = _instance.airingSchedule;
    return local$airingSchedule == null
        ? CopyWith$Fragment$MediaDetailed$airingSchedule.stub(_then(_instance))
        : CopyWith$Fragment$MediaDetailed$airingSchedule(
            local$airingSchedule, (e) => call(airingSchedule: e));
  }

  CopyWith$Fragment$FuzzyDate<TRes> get startDate {
    final local$startDate = _instance.startDate;
    return local$startDate == null
        ? CopyWith$Fragment$FuzzyDate.stub(_then(_instance))
        : CopyWith$Fragment$FuzzyDate(
            local$startDate, (e) => call(startDate: e));
  }

  CopyWith$Fragment$FuzzyDate<TRes> get endDate {
    final local$endDate = _instance.endDate;
    return local$endDate == null
        ? CopyWith$Fragment$FuzzyDate.stub(_then(_instance))
        : CopyWith$Fragment$FuzzyDate(local$endDate, (e) => call(endDate: e));
  }

  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry {
    final local$mediaListEntry = _instance.mediaListEntry;
    return local$mediaListEntry == null
        ? CopyWith$Fragment$MediaListEntry.stub(_then(_instance))
        : CopyWith$Fragment$MediaListEntry(
            local$mediaListEntry, (e) => call(mediaListEntry: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDetailed<TRes>
    implements CopyWith$Fragment$MediaDetailed<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed(this._res);

  TRes _res;

  call({
    int? averageScore,
    String? bannerImage,
    int? popularity,
    Fragment$MediaDetailed$nextAiringEpisode? nextAiringEpisode,
    String? description,
    Fragment$MediaDetailed$trailer? trailer,
    List<String?>? synonyms,
    int? episodes,
    int? duration,
    int? volumes,
    int? chapters,
    Enum$MediaSource? source,
    List<Fragment$MediaDetailed$externalLinks?>? externalLinks,
    Fragment$MediaDetailed$studios? studios,
    Fragment$MediaDetailed$relations? relations,
    Fragment$MediaDetailed$recommendations? recommendations,
    List<Fragment$MediaDetailed$tags?>? tags,
    List<Fragment$MediaDetailed$rankings?>? rankings,
    Fragment$MediaDetailed$stats? stats,
    String? modNotes,
    bool? isFavourite,
    int? id,
    Fragment$MediaDetailed$title? title,
    Fragment$MediaDetailed$coverImage? coverImage,
    int? meanScore,
    int? favourites,
    Enum$MediaFormat? format,
    Enum$MediaType? type,
    Enum$MediaStatus? status,
    Fragment$MediaDetailed$airingSchedule? airingSchedule,
    List<String?>? genres,
    Enum$MediaSeason? season,
    int? seasonYear,
    String? countryOfOrigin,
    Fragment$FuzzyDate? startDate,
    Fragment$FuzzyDate? endDate,
    Fragment$MediaListEntry? mediaListEntry,
    String? $__typename,
    String? siteUrl,
  }) =>
      _res;

  CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes>
      get nextAiringEpisode =>
          CopyWith$Fragment$MediaDetailed$nextAiringEpisode.stub(_res);

  CopyWith$Fragment$MediaDetailed$trailer<TRes> get trailer =>
      CopyWith$Fragment$MediaDetailed$trailer.stub(_res);

  externalLinks(_fn) => _res;

  CopyWith$Fragment$MediaDetailed$studios<TRes> get studios =>
      CopyWith$Fragment$MediaDetailed$studios.stub(_res);

  CopyWith$Fragment$MediaDetailed$relations<TRes> get relations =>
      CopyWith$Fragment$MediaDetailed$relations.stub(_res);

  CopyWith$Fragment$MediaDetailed$recommendations<TRes> get recommendations =>
      CopyWith$Fragment$MediaDetailed$recommendations.stub(_res);

  tags(_fn) => _res;

  rankings(_fn) => _res;

  CopyWith$Fragment$MediaDetailed$stats<TRes> get stats =>
      CopyWith$Fragment$MediaDetailed$stats.stub(_res);

  CopyWith$Fragment$MediaDetailed$title<TRes> get title =>
      CopyWith$Fragment$MediaDetailed$title.stub(_res);

  CopyWith$Fragment$MediaDetailed$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$MediaDetailed$coverImage.stub(_res);

  CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> get airingSchedule =>
      CopyWith$Fragment$MediaDetailed$airingSchedule.stub(_res);

  CopyWith$Fragment$FuzzyDate<TRes> get startDate =>
      CopyWith$Fragment$FuzzyDate.stub(_res);

  CopyWith$Fragment$FuzzyDate<TRes> get endDate =>
      CopyWith$Fragment$FuzzyDate.stub(_res);

  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry =>
      CopyWith$Fragment$MediaListEntry.stub(_res);
}

const fragmentDefinitionMediaDetailed = FragmentDefinitionNode(
  name: NameNode(value: 'MediaDetailed'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Media'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'averageScore'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'bannerImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'popularity'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'nextAiringEpisode'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'episode'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'description'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'trailer'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'site'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'thumbnail'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'synonyms'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'episodes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'duration'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'volumes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'chapters'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'source'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'externalLinks'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'color'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'icon'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isDisabled'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'url'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'site'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'studios'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'edges'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'node'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: 'name'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: 'isAnimationStudio'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
              ]),
            ),
            FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'isMain'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'relations'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'edges'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'node'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                  name: NameNode(value: 'id'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: 'title'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                      name: NameNode(value: 'userPreferred'),
                      alias: null,
                      arguments: [],
                      directives: [],
                      selectionSet: null,
                    ),
                    FieldNode(
                      name: NameNode(value: '__typename'),
                      alias: null,
                      arguments: [],
                      directives: [],
                      selectionSet: null,
                    ),
                  ]),
                ),
                FieldNode(
                  name: NameNode(value: 'type'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: 'format'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: 'coverImage'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: SelectionSetNode(selections: [
                    FieldNode(
                      name: NameNode(value: 'extraLarge'),
                      alias: null,
                      arguments: [],
                      directives: [],
                      selectionSet: null,
                    ),
                    FieldNode(
                      name: NameNode(value: 'large'),
                      alias: null,
                      arguments: [],
                      directives: [],
                      selectionSet: null,
                    ),
                    FieldNode(
                      name: NameNode(value: '__typename'),
                      alias: null,
                      arguments: [],
                      directives: [],
                      selectionSet: null,
                    ),
                  ]),
                ),
                FieldNode(
                  name: NameNode(value: 'status'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
              ]),
            ),
            FieldNode(
              name: NameNode(value: 'relationType'),
              alias: null,
              arguments: [
                ArgumentNode(
                  name: NameNode(value: 'version'),
                  value: IntValueNode(value: '2'),
                )
              ],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'recommendations'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'nodes'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'id'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'tags'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'category'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isMediaSpoiler'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'description'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'rank'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'rankings'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'allTime'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'type'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'context'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'rank'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'stats'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'scoreDistribution'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'amount'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'score'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'statusDistribution'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'amount'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'modNotes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isFavourite'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FragmentSpreadNode(
      name: NameNode(value: 'MediaShort'),
      directives: [],
    ),
    FieldNode(
      name: NameNode(value: 'mediaListEntry'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'MediaListEntry'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'siteUrl'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaDetailed = DocumentNode(definitions: [
  fragmentDefinitionMediaDetailed,
  fragmentDefinitionMediaShort,
  fragmentDefinitionFuzzyDate,
  fragmentDefinitionMediaListEntry,
  fragmentDefinitionListEntryMedia,
]);

extension ClientExtension$Fragment$MediaDetailed on graphql.GraphQLClient {
  void writeFragment$MediaDetailed({
    required Fragment$MediaDetailed data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaDetailed',
            document: documentNodeFragmentMediaDetailed,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaDetailed? readFragment$MediaDetailed({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaDetailed',
          document: documentNodeFragmentMediaDetailed,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MediaDetailed.fromJson(result);
  }
}

class Fragment$MediaDetailed$nextAiringEpisode {
  Fragment$MediaDetailed$nextAiringEpisode({
    required this.episode,
    this.$__typename = 'AiringSchedule',
  });

  factory Fragment$MediaDetailed$nextAiringEpisode.fromJson(
      Map<String, dynamic> json) {
    final l$episode = json['episode'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$nextAiringEpisode(
      episode: (l$episode as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int episode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$episode = episode;
    _resultData['episode'] = l$episode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$episode = episode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$episode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$nextAiringEpisode ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$episode = episode;
    final lOther$episode = other.episode;
    if (l$episode != lOther$episode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$nextAiringEpisode
    on Fragment$MediaDetailed$nextAiringEpisode {
  CopyWith$Fragment$MediaDetailed$nextAiringEpisode<
          Fragment$MediaDetailed$nextAiringEpisode>
      get copyWith => CopyWith$Fragment$MediaDetailed$nextAiringEpisode(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes> {
  factory CopyWith$Fragment$MediaDetailed$nextAiringEpisode(
    Fragment$MediaDetailed$nextAiringEpisode instance,
    TRes Function(Fragment$MediaDetailed$nextAiringEpisode) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$nextAiringEpisode;

  factory CopyWith$Fragment$MediaDetailed$nextAiringEpisode.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$nextAiringEpisode;

  TRes call({
    int? episode,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$nextAiringEpisode<TRes>
    implements CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$nextAiringEpisode(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$nextAiringEpisode _instance;

  final TRes Function(Fragment$MediaDetailed$nextAiringEpisode) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? episode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$nextAiringEpisode(
        episode: episode == _undefined || episode == null
            ? _instance.episode
            : (episode as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$nextAiringEpisode<TRes>
    implements CopyWith$Fragment$MediaDetailed$nextAiringEpisode<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$nextAiringEpisode(this._res);

  TRes _res;

  call({
    int? episode,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$trailer {
  Fragment$MediaDetailed$trailer({
    this.id,
    this.site,
    this.thumbnail,
    this.$__typename = 'MediaTrailer',
  });

  factory Fragment$MediaDetailed$trailer.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$site = json['site'];
    final l$thumbnail = json['thumbnail'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$trailer(
      id: (l$id as String?),
      site: (l$site as String?),
      thumbnail: (l$thumbnail as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? id;

  final String? site;

  final String? thumbnail;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$site = site;
    _resultData['site'] = l$site;
    final l$thumbnail = thumbnail;
    _resultData['thumbnail'] = l$thumbnail;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$site = site;
    final l$thumbnail = thumbnail;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$site,
      l$thumbnail,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$trailer ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$site = site;
    final lOther$site = other.site;
    if (l$site != lOther$site) {
      return false;
    }
    final l$thumbnail = thumbnail;
    final lOther$thumbnail = other.thumbnail;
    if (l$thumbnail != lOther$thumbnail) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$trailer
    on Fragment$MediaDetailed$trailer {
  CopyWith$Fragment$MediaDetailed$trailer<Fragment$MediaDetailed$trailer>
      get copyWith => CopyWith$Fragment$MediaDetailed$trailer(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$trailer<TRes> {
  factory CopyWith$Fragment$MediaDetailed$trailer(
    Fragment$MediaDetailed$trailer instance,
    TRes Function(Fragment$MediaDetailed$trailer) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$trailer;

  factory CopyWith$Fragment$MediaDetailed$trailer.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$trailer;

  TRes call({
    String? id,
    String? site,
    String? thumbnail,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$trailer<TRes>
    implements CopyWith$Fragment$MediaDetailed$trailer<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$trailer(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$trailer _instance;

  final TRes Function(Fragment$MediaDetailed$trailer) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? site = _undefined,
    Object? thumbnail = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$trailer(
        id: id == _undefined ? _instance.id : (id as String?),
        site: site == _undefined ? _instance.site : (site as String?),
        thumbnail: thumbnail == _undefined
            ? _instance.thumbnail
            : (thumbnail as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$trailer<TRes>
    implements CopyWith$Fragment$MediaDetailed$trailer<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$trailer(this._res);

  TRes _res;

  call({
    String? id,
    String? site,
    String? thumbnail,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$externalLinks {
  Fragment$MediaDetailed$externalLinks({
    required this.id,
    this.color,
    this.icon,
    this.isDisabled,
    this.url,
    required this.site,
    this.$__typename = 'MediaExternalLink',
  });

  factory Fragment$MediaDetailed$externalLinks.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$color = json['color'];
    final l$icon = json['icon'];
    final l$isDisabled = json['isDisabled'];
    final l$url = json['url'];
    final l$site = json['site'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$externalLinks(
      id: (l$id as int),
      color: (l$color as String?),
      icon: (l$icon as String?),
      isDisabled: (l$isDisabled as bool?),
      url: (l$url as String?),
      site: (l$site as String),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String? color;

  final String? icon;

  final bool? isDisabled;

  final String? url;

  final String site;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$color = color;
    _resultData['color'] = l$color;
    final l$icon = icon;
    _resultData['icon'] = l$icon;
    final l$isDisabled = isDisabled;
    _resultData['isDisabled'] = l$isDisabled;
    final l$url = url;
    _resultData['url'] = l$url;
    final l$site = site;
    _resultData['site'] = l$site;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$color = color;
    final l$icon = icon;
    final l$isDisabled = isDisabled;
    final l$url = url;
    final l$site = site;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$color,
      l$icon,
      l$isDisabled,
      l$url,
      l$site,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$externalLinks ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color != lOther$color) {
      return false;
    }
    final l$icon = icon;
    final lOther$icon = other.icon;
    if (l$icon != lOther$icon) {
      return false;
    }
    final l$isDisabled = isDisabled;
    final lOther$isDisabled = other.isDisabled;
    if (l$isDisabled != lOther$isDisabled) {
      return false;
    }
    final l$url = url;
    final lOther$url = other.url;
    if (l$url != lOther$url) {
      return false;
    }
    final l$site = site;
    final lOther$site = other.site;
    if (l$site != lOther$site) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$externalLinks
    on Fragment$MediaDetailed$externalLinks {
  CopyWith$Fragment$MediaDetailed$externalLinks<
          Fragment$MediaDetailed$externalLinks>
      get copyWith => CopyWith$Fragment$MediaDetailed$externalLinks(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$externalLinks<TRes> {
  factory CopyWith$Fragment$MediaDetailed$externalLinks(
    Fragment$MediaDetailed$externalLinks instance,
    TRes Function(Fragment$MediaDetailed$externalLinks) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$externalLinks;

  factory CopyWith$Fragment$MediaDetailed$externalLinks.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$externalLinks;

  TRes call({
    int? id,
    String? color,
    String? icon,
    bool? isDisabled,
    String? url,
    String? site,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$externalLinks<TRes>
    implements CopyWith$Fragment$MediaDetailed$externalLinks<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$externalLinks(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$externalLinks _instance;

  final TRes Function(Fragment$MediaDetailed$externalLinks) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? color = _undefined,
    Object? icon = _undefined,
    Object? isDisabled = _undefined,
    Object? url = _undefined,
    Object? site = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$externalLinks(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        color: color == _undefined ? _instance.color : (color as String?),
        icon: icon == _undefined ? _instance.icon : (icon as String?),
        isDisabled: isDisabled == _undefined
            ? _instance.isDisabled
            : (isDisabled as bool?),
        url: url == _undefined ? _instance.url : (url as String?),
        site: site == _undefined || site == null
            ? _instance.site
            : (site as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$externalLinks<TRes>
    implements CopyWith$Fragment$MediaDetailed$externalLinks<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$externalLinks(this._res);

  TRes _res;

  call({
    int? id,
    String? color,
    String? icon,
    bool? isDisabled,
    String? url,
    String? site,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$studios {
  Fragment$MediaDetailed$studios({
    this.edges,
    this.$__typename = 'StudioConnection',
  });

  factory Fragment$MediaDetailed$studios.fromJson(Map<String, dynamic> json) {
    final l$edges = json['edges'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$studios(
      edges: (l$edges as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$studios$edges.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaDetailed$studios$edges?>? edges;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$edges = edges;
    _resultData['edges'] = l$edges?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$edges = edges;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$edges == null ? null : Object.hashAll(l$edges.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$studios ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$edges = edges;
    final lOther$edges = other.edges;
    if (l$edges != null && lOther$edges != null) {
      if (l$edges.length != lOther$edges.length) {
        return false;
      }
      for (int i = 0; i < l$edges.length; i++) {
        final l$edges$entry = l$edges[i];
        final lOther$edges$entry = lOther$edges[i];
        if (l$edges$entry != lOther$edges$entry) {
          return false;
        }
      }
    } else if (l$edges != lOther$edges) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$studios
    on Fragment$MediaDetailed$studios {
  CopyWith$Fragment$MediaDetailed$studios<Fragment$MediaDetailed$studios>
      get copyWith => CopyWith$Fragment$MediaDetailed$studios(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$studios<TRes> {
  factory CopyWith$Fragment$MediaDetailed$studios(
    Fragment$MediaDetailed$studios instance,
    TRes Function(Fragment$MediaDetailed$studios) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$studios;

  factory CopyWith$Fragment$MediaDetailed$studios.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$studios;

  TRes call({
    List<Fragment$MediaDetailed$studios$edges?>? edges,
    String? $__typename,
  });
  TRes edges(
      Iterable<Fragment$MediaDetailed$studios$edges?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$studios$edges<
                      Fragment$MediaDetailed$studios$edges>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaDetailed$studios<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$studios(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$studios _instance;

  final TRes Function(Fragment$MediaDetailed$studios) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? edges = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$studios(
        edges: edges == _undefined
            ? _instance.edges
            : (edges as List<Fragment$MediaDetailed$studios$edges?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes edges(
          Iterable<Fragment$MediaDetailed$studios$edges?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$studios$edges<
                          Fragment$MediaDetailed$studios$edges>?>?)
              _fn) =>
      call(
          edges: _fn(_instance.edges?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$studios$edges(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaDetailed$studios<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$studios(this._res);

  TRes _res;

  call({
    List<Fragment$MediaDetailed$studios$edges?>? edges,
    String? $__typename,
  }) =>
      _res;

  edges(_fn) => _res;
}

class Fragment$MediaDetailed$studios$edges {
  Fragment$MediaDetailed$studios$edges({
    this.node,
    this.id,
    required this.isMain,
    this.$__typename = 'StudioEdge',
  });

  factory Fragment$MediaDetailed$studios$edges.fromJson(
      Map<String, dynamic> json) {
    final l$node = json['node'];
    final l$id = json['id'];
    final l$isMain = json['isMain'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$studios$edges(
      node: l$node == null
          ? null
          : Fragment$MediaDetailed$studios$edges$node.fromJson(
              (l$node as Map<String, dynamic>)),
      id: (l$id as int?),
      isMain: (l$isMain as bool),
      $__typename: (l$$__typename as String),
    );
  }

  final Fragment$MediaDetailed$studios$edges$node? node;

  final int? id;

  final bool isMain;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$node = node;
    _resultData['node'] = l$node?.toJson();
    final l$id = id;
    _resultData['id'] = l$id;
    final l$isMain = isMain;
    _resultData['isMain'] = l$isMain;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$node = node;
    final l$id = id;
    final l$isMain = isMain;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$node,
      l$id,
      l$isMain,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$studios$edges ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$node = node;
    final lOther$node = other.node;
    if (l$node != lOther$node) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$isMain = isMain;
    final lOther$isMain = other.isMain;
    if (l$isMain != lOther$isMain) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$studios$edges
    on Fragment$MediaDetailed$studios$edges {
  CopyWith$Fragment$MediaDetailed$studios$edges<
          Fragment$MediaDetailed$studios$edges>
      get copyWith => CopyWith$Fragment$MediaDetailed$studios$edges(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$studios$edges<TRes> {
  factory CopyWith$Fragment$MediaDetailed$studios$edges(
    Fragment$MediaDetailed$studios$edges instance,
    TRes Function(Fragment$MediaDetailed$studios$edges) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$studios$edges;

  factory CopyWith$Fragment$MediaDetailed$studios$edges.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges;

  TRes call({
    Fragment$MediaDetailed$studios$edges$node? node,
    int? id,
    bool? isMain,
    String? $__typename,
  });
  CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> get node;
}

class _CopyWithImpl$Fragment$MediaDetailed$studios$edges<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios$edges<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$studios$edges(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$studios$edges _instance;

  final TRes Function(Fragment$MediaDetailed$studios$edges) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? node = _undefined,
    Object? id = _undefined,
    Object? isMain = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$studios$edges(
        node: node == _undefined
            ? _instance.node
            : (node as Fragment$MediaDetailed$studios$edges$node?),
        id: id == _undefined ? _instance.id : (id as int?),
        isMain: isMain == _undefined || isMain == null
            ? _instance.isMain
            : (isMain as bool),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> get node {
    final local$node = _instance.node;
    return local$node == null
        ? CopyWith$Fragment$MediaDetailed$studios$edges$node.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDetailed$studios$edges$node(
            local$node, (e) => call(node: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios$edges<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges(this._res);

  TRes _res;

  call({
    Fragment$MediaDetailed$studios$edges$node? node,
    int? id,
    bool? isMain,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> get node =>
      CopyWith$Fragment$MediaDetailed$studios$edges$node.stub(_res);
}

class Fragment$MediaDetailed$studios$edges$node {
  Fragment$MediaDetailed$studios$edges$node({
    required this.id,
    required this.name,
    required this.isAnimationStudio,
    this.$__typename = 'Studio',
  });

  factory Fragment$MediaDetailed$studios$edges$node.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$isAnimationStudio = json['isAnimationStudio'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$studios$edges$node(
      id: (l$id as int),
      name: (l$name as String),
      isAnimationStudio: (l$isAnimationStudio as bool),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final bool isAnimationStudio;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$isAnimationStudio = isAnimationStudio;
    _resultData['isAnimationStudio'] = l$isAnimationStudio;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$isAnimationStudio = isAnimationStudio;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$isAnimationStudio,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$studios$edges$node ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$isAnimationStudio = isAnimationStudio;
    final lOther$isAnimationStudio = other.isAnimationStudio;
    if (l$isAnimationStudio != lOther$isAnimationStudio) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$studios$edges$node
    on Fragment$MediaDetailed$studios$edges$node {
  CopyWith$Fragment$MediaDetailed$studios$edges$node<
          Fragment$MediaDetailed$studios$edges$node>
      get copyWith => CopyWith$Fragment$MediaDetailed$studios$edges$node(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> {
  factory CopyWith$Fragment$MediaDetailed$studios$edges$node(
    Fragment$MediaDetailed$studios$edges$node instance,
    TRes Function(Fragment$MediaDetailed$studios$edges$node) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$studios$edges$node;

  factory CopyWith$Fragment$MediaDetailed$studios$edges$node.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges$node;

  TRes call({
    int? id,
    String? name,
    bool? isAnimationStudio,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$studios$edges$node<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$studios$edges$node(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$studios$edges$node _instance;

  final TRes Function(Fragment$MediaDetailed$studios$edges$node) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? isAnimationStudio = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$studios$edges$node(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        isAnimationStudio:
            isAnimationStudio == _undefined || isAnimationStudio == null
                ? _instance.isAnimationStudio
                : (isAnimationStudio as bool),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges$node<TRes>
    implements CopyWith$Fragment$MediaDetailed$studios$edges$node<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$studios$edges$node(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    bool? isAnimationStudio,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$relations {
  Fragment$MediaDetailed$relations({
    this.edges,
    this.$__typename = 'MediaConnection',
  });

  factory Fragment$MediaDetailed$relations.fromJson(Map<String, dynamic> json) {
    final l$edges = json['edges'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$relations(
      edges: (l$edges as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$relations$edges.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaDetailed$relations$edges?>? edges;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$edges = edges;
    _resultData['edges'] = l$edges?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$edges = edges;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$edges == null ? null : Object.hashAll(l$edges.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$relations ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$edges = edges;
    final lOther$edges = other.edges;
    if (l$edges != null && lOther$edges != null) {
      if (l$edges.length != lOther$edges.length) {
        return false;
      }
      for (int i = 0; i < l$edges.length; i++) {
        final l$edges$entry = l$edges[i];
        final lOther$edges$entry = lOther$edges[i];
        if (l$edges$entry != lOther$edges$entry) {
          return false;
        }
      }
    } else if (l$edges != lOther$edges) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$relations
    on Fragment$MediaDetailed$relations {
  CopyWith$Fragment$MediaDetailed$relations<Fragment$MediaDetailed$relations>
      get copyWith => CopyWith$Fragment$MediaDetailed$relations(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$relations<TRes> {
  factory CopyWith$Fragment$MediaDetailed$relations(
    Fragment$MediaDetailed$relations instance,
    TRes Function(Fragment$MediaDetailed$relations) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$relations;

  factory CopyWith$Fragment$MediaDetailed$relations.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$relations;

  TRes call({
    List<Fragment$MediaDetailed$relations$edges?>? edges,
    String? $__typename,
  });
  TRes edges(
      Iterable<Fragment$MediaDetailed$relations$edges?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$relations$edges<
                      Fragment$MediaDetailed$relations$edges>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaDetailed$relations<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$relations(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$relations _instance;

  final TRes Function(Fragment$MediaDetailed$relations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? edges = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$relations(
        edges: edges == _undefined
            ? _instance.edges
            : (edges as List<Fragment$MediaDetailed$relations$edges?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes edges(
          Iterable<Fragment$MediaDetailed$relations$edges?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$relations$edges<
                          Fragment$MediaDetailed$relations$edges>?>?)
              _fn) =>
      call(
          edges: _fn(_instance.edges?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$relations$edges(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaDetailed$relations<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$relations(this._res);

  TRes _res;

  call({
    List<Fragment$MediaDetailed$relations$edges?>? edges,
    String? $__typename,
  }) =>
      _res;

  edges(_fn) => _res;
}

class Fragment$MediaDetailed$relations$edges {
  Fragment$MediaDetailed$relations$edges({
    this.node,
    this.relationType,
    this.$__typename = 'MediaEdge',
  });

  factory Fragment$MediaDetailed$relations$edges.fromJson(
      Map<String, dynamic> json) {
    final l$node = json['node'];
    final l$relationType = json['relationType'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$relations$edges(
      node: l$node == null
          ? null
          : Fragment$MediaDetailed$relations$edges$node.fromJson(
              (l$node as Map<String, dynamic>)),
      relationType: l$relationType == null
          ? null
          : fromJson$Enum$MediaRelation((l$relationType as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final Fragment$MediaDetailed$relations$edges$node? node;

  final Enum$MediaRelation? relationType;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$node = node;
    _resultData['node'] = l$node?.toJson();
    final l$relationType = relationType;
    _resultData['relationType'] = l$relationType == null
        ? null
        : toJson$Enum$MediaRelation(l$relationType);
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$node = node;
    final l$relationType = relationType;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$node,
      l$relationType,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$relations$edges ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$node = node;
    final lOther$node = other.node;
    if (l$node != lOther$node) {
      return false;
    }
    final l$relationType = relationType;
    final lOther$relationType = other.relationType;
    if (l$relationType != lOther$relationType) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$relations$edges
    on Fragment$MediaDetailed$relations$edges {
  CopyWith$Fragment$MediaDetailed$relations$edges<
          Fragment$MediaDetailed$relations$edges>
      get copyWith => CopyWith$Fragment$MediaDetailed$relations$edges(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$relations$edges<TRes> {
  factory CopyWith$Fragment$MediaDetailed$relations$edges(
    Fragment$MediaDetailed$relations$edges instance,
    TRes Function(Fragment$MediaDetailed$relations$edges) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$relations$edges;

  factory CopyWith$Fragment$MediaDetailed$relations$edges.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges;

  TRes call({
    Fragment$MediaDetailed$relations$edges$node? node,
    Enum$MediaRelation? relationType,
    String? $__typename,
  });
  CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> get node;
}

class _CopyWithImpl$Fragment$MediaDetailed$relations$edges<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations$edges<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$relations$edges(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$relations$edges _instance;

  final TRes Function(Fragment$MediaDetailed$relations$edges) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? node = _undefined,
    Object? relationType = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$relations$edges(
        node: node == _undefined
            ? _instance.node
            : (node as Fragment$MediaDetailed$relations$edges$node?),
        relationType: relationType == _undefined
            ? _instance.relationType
            : (relationType as Enum$MediaRelation?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> get node {
    final local$node = _instance.node;
    return local$node == null
        ? CopyWith$Fragment$MediaDetailed$relations$edges$node.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDetailed$relations$edges$node(
            local$node, (e) => call(node: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations$edges<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges(this._res);

  TRes _res;

  call({
    Fragment$MediaDetailed$relations$edges$node? node,
    Enum$MediaRelation? relationType,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> get node =>
      CopyWith$Fragment$MediaDetailed$relations$edges$node.stub(_res);
}

class Fragment$MediaDetailed$relations$edges$node {
  Fragment$MediaDetailed$relations$edges$node({
    required this.id,
    this.title,
    this.type,
    this.format,
    this.coverImage,
    this.status,
    this.$__typename = 'Media',
  });

  factory Fragment$MediaDetailed$relations$edges$node.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$type = json['type'];
    final l$format = json['format'];
    final l$coverImage = json['coverImage'];
    final l$status = json['status'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$relations$edges$node(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$MediaDetailed$relations$edges$node$title.fromJson(
              (l$title as Map<String, dynamic>)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$MediaDetailed$relations$edges$node$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaStatus((l$status as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaDetailed$relations$edges$node$title? title;

  final Enum$MediaType? type;

  final Enum$MediaFormat? format;

  final Fragment$MediaDetailed$relations$edges$node$coverImage? coverImage;

  final Enum$MediaStatus? status;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaStatus(l$status);
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$type = type;
    final l$format = format;
    final l$coverImage = coverImage;
    final l$status = status;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$type,
      l$format,
      l$coverImage,
      l$status,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$relations$edges$node ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$relations$edges$node
    on Fragment$MediaDetailed$relations$edges$node {
  CopyWith$Fragment$MediaDetailed$relations$edges$node<
          Fragment$MediaDetailed$relations$edges$node>
      get copyWith => CopyWith$Fragment$MediaDetailed$relations$edges$node(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> {
  factory CopyWith$Fragment$MediaDetailed$relations$edges$node(
    Fragment$MediaDetailed$relations$edges$node instance,
    TRes Function(Fragment$MediaDetailed$relations$edges$node) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node;

  factory CopyWith$Fragment$MediaDetailed$relations$edges$node.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node;

  TRes call({
    int? id,
    Fragment$MediaDetailed$relations$edges$node$title? title,
    Enum$MediaType? type,
    Enum$MediaFormat? format,
    Fragment$MediaDetailed$relations$edges$node$coverImage? coverImage,
    Enum$MediaStatus? status,
    String? $__typename,
  });
  CopyWith$Fragment$MediaDetailed$relations$edges$node$title<TRes> get title;
  CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes>
      get coverImage;
}

class _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$relations$edges$node _instance;

  final TRes Function(Fragment$MediaDetailed$relations$edges$node) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? type = _undefined,
    Object? format = _undefined,
    Object? coverImage = _undefined,
    Object? status = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$relations$edges$node(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$MediaDetailed$relations$edges$node$title?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage
                as Fragment$MediaDetailed$relations$edges$node$coverImage?),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaStatus?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaDetailed$relations$edges$node$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$MediaDetailed$relations$edges$node$title.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDetailed$relations$edges$node$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes>
      get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node<TRes>
    implements CopyWith$Fragment$MediaDetailed$relations$edges$node<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaDetailed$relations$edges$node$title? title,
    Enum$MediaType? type,
    Enum$MediaFormat? format,
    Fragment$MediaDetailed$relations$edges$node$coverImage? coverImage,
    Enum$MediaStatus? status,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaDetailed$relations$edges$node$title<TRes> get title =>
      CopyWith$Fragment$MediaDetailed$relations$edges$node$title.stub(_res);

  CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes>
      get coverImage =>
          CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage.stub(
              _res);
}

class Fragment$MediaDetailed$relations$edges$node$title {
  Fragment$MediaDetailed$relations$edges$node$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$MediaDetailed$relations$edges$node$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$relations$edges$node$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$relations$edges$node$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$relations$edges$node$title
    on Fragment$MediaDetailed$relations$edges$node$title {
  CopyWith$Fragment$MediaDetailed$relations$edges$node$title<
          Fragment$MediaDetailed$relations$edges$node$title>
      get copyWith =>
          CopyWith$Fragment$MediaDetailed$relations$edges$node$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$relations$edges$node$title<
    TRes> {
  factory CopyWith$Fragment$MediaDetailed$relations$edges$node$title(
    Fragment$MediaDetailed$relations$edges$node$title instance,
    TRes Function(Fragment$MediaDetailed$relations$edges$node$title) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$title;

  factory CopyWith$Fragment$MediaDetailed$relations$edges$node$title.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$title<TRes>
    implements
        CopyWith$Fragment$MediaDetailed$relations$edges$node$title<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$title(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$relations$edges$node$title _instance;

  final TRes Function(Fragment$MediaDetailed$relations$edges$node$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$relations$edges$node$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$title<TRes>
    implements
        CopyWith$Fragment$MediaDetailed$relations$edges$node$title<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$title(
      this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$relations$edges$node$coverImage {
  Fragment$MediaDetailed$relations$edges$node$coverImage({
    this.extraLarge,
    this.large,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$MediaDetailed$relations$edges$node$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$extraLarge = json['extraLarge'];
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$relations$edges$node$coverImage(
      extraLarge: (l$extraLarge as String?),
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? extraLarge;

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$extraLarge = extraLarge;
    _resultData['extraLarge'] = l$extraLarge;
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$extraLarge = extraLarge;
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$extraLarge,
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$relations$edges$node$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$extraLarge = extraLarge;
    final lOther$extraLarge = other.extraLarge;
    if (l$extraLarge != lOther$extraLarge) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$relations$edges$node$coverImage
    on Fragment$MediaDetailed$relations$edges$node$coverImage {
  CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<
          Fragment$MediaDetailed$relations$edges$node$coverImage>
      get copyWith =>
          CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<
    TRes> {
  factory CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage(
    Fragment$MediaDetailed$relations$edges$node$coverImage instance,
    TRes Function(Fragment$MediaDetailed$relations$edges$node$coverImage) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$coverImage;

  factory CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$coverImage;

  TRes call({
    String? extraLarge,
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes>
    implements
        CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$relations$edges$node$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$relations$edges$node$coverImage _instance;

  final TRes Function(Fragment$MediaDetailed$relations$edges$node$coverImage)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? extraLarge = _undefined,
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$relations$edges$node$coverImage(
        extraLarge: extraLarge == _undefined
            ? _instance.extraLarge
            : (extraLarge as String?),
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$coverImage<
        TRes>
    implements
        CopyWith$Fragment$MediaDetailed$relations$edges$node$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$relations$edges$node$coverImage(
      this._res);

  TRes _res;

  call({
    String? extraLarge,
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$recommendations {
  Fragment$MediaDetailed$recommendations({
    this.nodes,
    this.$__typename = 'RecommendationConnection',
  });

  factory Fragment$MediaDetailed$recommendations.fromJson(
      Map<String, dynamic> json) {
    final l$nodes = json['nodes'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$recommendations(
      nodes: (l$nodes as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$recommendations$nodes.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaDetailed$recommendations$nodes?>? nodes;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$nodes = nodes;
    _resultData['nodes'] = l$nodes?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$nodes = nodes;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$nodes == null ? null : Object.hashAll(l$nodes.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$recommendations ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$nodes = nodes;
    final lOther$nodes = other.nodes;
    if (l$nodes != null && lOther$nodes != null) {
      if (l$nodes.length != lOther$nodes.length) {
        return false;
      }
      for (int i = 0; i < l$nodes.length; i++) {
        final l$nodes$entry = l$nodes[i];
        final lOther$nodes$entry = lOther$nodes[i];
        if (l$nodes$entry != lOther$nodes$entry) {
          return false;
        }
      }
    } else if (l$nodes != lOther$nodes) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$recommendations
    on Fragment$MediaDetailed$recommendations {
  CopyWith$Fragment$MediaDetailed$recommendations<
          Fragment$MediaDetailed$recommendations>
      get copyWith => CopyWith$Fragment$MediaDetailed$recommendations(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$recommendations<TRes> {
  factory CopyWith$Fragment$MediaDetailed$recommendations(
    Fragment$MediaDetailed$recommendations instance,
    TRes Function(Fragment$MediaDetailed$recommendations) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$recommendations;

  factory CopyWith$Fragment$MediaDetailed$recommendations.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$recommendations;

  TRes call({
    List<Fragment$MediaDetailed$recommendations$nodes?>? nodes,
    String? $__typename,
  });
  TRes nodes(
      Iterable<Fragment$MediaDetailed$recommendations$nodes?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$recommendations$nodes<
                      Fragment$MediaDetailed$recommendations$nodes>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaDetailed$recommendations<TRes>
    implements CopyWith$Fragment$MediaDetailed$recommendations<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$recommendations(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$recommendations _instance;

  final TRes Function(Fragment$MediaDetailed$recommendations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? nodes = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$recommendations(
        nodes: nodes == _undefined
            ? _instance.nodes
            : (nodes as List<Fragment$MediaDetailed$recommendations$nodes?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes nodes(
          Iterable<Fragment$MediaDetailed$recommendations$nodes?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$recommendations$nodes<
                          Fragment$MediaDetailed$recommendations$nodes>?>?)
              _fn) =>
      call(
          nodes: _fn(_instance.nodes?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$recommendations$nodes(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaDetailed$recommendations<TRes>
    implements CopyWith$Fragment$MediaDetailed$recommendations<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$recommendations(this._res);

  TRes _res;

  call({
    List<Fragment$MediaDetailed$recommendations$nodes?>? nodes,
    String? $__typename,
  }) =>
      _res;

  nodes(_fn) => _res;
}

class Fragment$MediaDetailed$recommendations$nodes {
  Fragment$MediaDetailed$recommendations$nodes({
    required this.id,
    this.$__typename = 'Recommendation',
  });

  factory Fragment$MediaDetailed$recommendations$nodes.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$recommendations$nodes(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$recommendations$nodes ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$recommendations$nodes
    on Fragment$MediaDetailed$recommendations$nodes {
  CopyWith$Fragment$MediaDetailed$recommendations$nodes<
          Fragment$MediaDetailed$recommendations$nodes>
      get copyWith => CopyWith$Fragment$MediaDetailed$recommendations$nodes(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$recommendations$nodes<TRes> {
  factory CopyWith$Fragment$MediaDetailed$recommendations$nodes(
    Fragment$MediaDetailed$recommendations$nodes instance,
    TRes Function(Fragment$MediaDetailed$recommendations$nodes) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$recommendations$nodes;

  factory CopyWith$Fragment$MediaDetailed$recommendations$nodes.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$recommendations$nodes;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$recommendations$nodes<TRes>
    implements CopyWith$Fragment$MediaDetailed$recommendations$nodes<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$recommendations$nodes(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$recommendations$nodes _instance;

  final TRes Function(Fragment$MediaDetailed$recommendations$nodes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$recommendations$nodes(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$recommendations$nodes<TRes>
    implements CopyWith$Fragment$MediaDetailed$recommendations$nodes<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$recommendations$nodes(this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$tags {
  Fragment$MediaDetailed$tags({
    required this.id,
    required this.name,
    this.category,
    this.isMediaSpoiler,
    this.description,
    this.rank,
    this.$__typename = 'MediaTag',
  });

  factory Fragment$MediaDetailed$tags.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$category = json['category'];
    final l$isMediaSpoiler = json['isMediaSpoiler'];
    final l$description = json['description'];
    final l$rank = json['rank'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$tags(
      id: (l$id as int),
      name: (l$name as String),
      category: (l$category as String?),
      isMediaSpoiler: (l$isMediaSpoiler as bool?),
      description: (l$description as String?),
      rank: (l$rank as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final String? category;

  final bool? isMediaSpoiler;

  final String? description;

  final int? rank;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$category = category;
    _resultData['category'] = l$category;
    final l$isMediaSpoiler = isMediaSpoiler;
    _resultData['isMediaSpoiler'] = l$isMediaSpoiler;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$rank = rank;
    _resultData['rank'] = l$rank;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$category = category;
    final l$isMediaSpoiler = isMediaSpoiler;
    final l$description = description;
    final l$rank = rank;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$category,
      l$isMediaSpoiler,
      l$description,
      l$rank,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$tags ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$isMediaSpoiler = isMediaSpoiler;
    final lOther$isMediaSpoiler = other.isMediaSpoiler;
    if (l$isMediaSpoiler != lOther$isMediaSpoiler) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$rank = rank;
    final lOther$rank = other.rank;
    if (l$rank != lOther$rank) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$tags
    on Fragment$MediaDetailed$tags {
  CopyWith$Fragment$MediaDetailed$tags<Fragment$MediaDetailed$tags>
      get copyWith => CopyWith$Fragment$MediaDetailed$tags(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$tags<TRes> {
  factory CopyWith$Fragment$MediaDetailed$tags(
    Fragment$MediaDetailed$tags instance,
    TRes Function(Fragment$MediaDetailed$tags) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$tags;

  factory CopyWith$Fragment$MediaDetailed$tags.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$tags;

  TRes call({
    int? id,
    String? name,
    String? category,
    bool? isMediaSpoiler,
    String? description,
    int? rank,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$tags<TRes>
    implements CopyWith$Fragment$MediaDetailed$tags<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$tags(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$tags _instance;

  final TRes Function(Fragment$MediaDetailed$tags) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? category = _undefined,
    Object? isMediaSpoiler = _undefined,
    Object? description = _undefined,
    Object? rank = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$tags(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        category:
            category == _undefined ? _instance.category : (category as String?),
        isMediaSpoiler: isMediaSpoiler == _undefined
            ? _instance.isMediaSpoiler
            : (isMediaSpoiler as bool?),
        description: description == _undefined
            ? _instance.description
            : (description as String?),
        rank: rank == _undefined ? _instance.rank : (rank as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$tags<TRes>
    implements CopyWith$Fragment$MediaDetailed$tags<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$tags(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? category,
    bool? isMediaSpoiler,
    String? description,
    int? rank,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$rankings {
  Fragment$MediaDetailed$rankings({
    required this.id,
    this.allTime,
    required this.type,
    required this.context,
    required this.rank,
    this.year,
    this.$__typename = 'MediaRank',
  });

  factory Fragment$MediaDetailed$rankings.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$allTime = json['allTime'];
    final l$type = json['type'];
    final l$context = json['context'];
    final l$rank = json['rank'];
    final l$year = json['year'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$rankings(
      id: (l$id as int),
      allTime: (l$allTime as bool?),
      type: fromJson$Enum$MediaRankType((l$type as String)),
      context: (l$context as String),
      rank: (l$rank as int),
      year: (l$year as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final bool? allTime;

  final Enum$MediaRankType type;

  final String context;

  final int rank;

  final int? year;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$allTime = allTime;
    _resultData['allTime'] = l$allTime;
    final l$type = type;
    _resultData['type'] = toJson$Enum$MediaRankType(l$type);
    final l$context = context;
    _resultData['context'] = l$context;
    final l$rank = rank;
    _resultData['rank'] = l$rank;
    final l$year = year;
    _resultData['year'] = l$year;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$allTime = allTime;
    final l$type = type;
    final l$context = context;
    final l$rank = rank;
    final l$year = year;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$allTime,
      l$type,
      l$context,
      l$rank,
      l$year,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$rankings ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$allTime = allTime;
    final lOther$allTime = other.allTime;
    if (l$allTime != lOther$allTime) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$rank = rank;
    final lOther$rank = other.rank;
    if (l$rank != lOther$rank) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$rankings
    on Fragment$MediaDetailed$rankings {
  CopyWith$Fragment$MediaDetailed$rankings<Fragment$MediaDetailed$rankings>
      get copyWith => CopyWith$Fragment$MediaDetailed$rankings(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$rankings<TRes> {
  factory CopyWith$Fragment$MediaDetailed$rankings(
    Fragment$MediaDetailed$rankings instance,
    TRes Function(Fragment$MediaDetailed$rankings) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$rankings;

  factory CopyWith$Fragment$MediaDetailed$rankings.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$rankings;

  TRes call({
    int? id,
    bool? allTime,
    Enum$MediaRankType? type,
    String? context,
    int? rank,
    int? year,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$rankings<TRes>
    implements CopyWith$Fragment$MediaDetailed$rankings<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$rankings(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$rankings _instance;

  final TRes Function(Fragment$MediaDetailed$rankings) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? allTime = _undefined,
    Object? type = _undefined,
    Object? context = _undefined,
    Object? rank = _undefined,
    Object? year = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$rankings(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        allTime: allTime == _undefined ? _instance.allTime : (allTime as bool?),
        type: type == _undefined || type == null
            ? _instance.type
            : (type as Enum$MediaRankType),
        context: context == _undefined || context == null
            ? _instance.context
            : (context as String),
        rank:
            rank == _undefined || rank == null ? _instance.rank : (rank as int),
        year: year == _undefined ? _instance.year : (year as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$rankings<TRes>
    implements CopyWith$Fragment$MediaDetailed$rankings<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$rankings(this._res);

  TRes _res;

  call({
    int? id,
    bool? allTime,
    Enum$MediaRankType? type,
    String? context,
    int? rank,
    int? year,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$stats {
  Fragment$MediaDetailed$stats({
    this.scoreDistribution,
    this.statusDistribution,
    this.$__typename = 'MediaStats',
  });

  factory Fragment$MediaDetailed$stats.fromJson(Map<String, dynamic> json) {
    final l$scoreDistribution = json['scoreDistribution'];
    final l$statusDistribution = json['statusDistribution'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$stats(
      scoreDistribution: (l$scoreDistribution as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$stats$scoreDistribution.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      statusDistribution: (l$statusDistribution as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$stats$statusDistribution.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaDetailed$stats$scoreDistribution?>?
      scoreDistribution;

  final List<Fragment$MediaDetailed$stats$statusDistribution?>?
      statusDistribution;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$scoreDistribution = scoreDistribution;
    _resultData['scoreDistribution'] =
        l$scoreDistribution?.map((e) => e?.toJson()).toList();
    final l$statusDistribution = statusDistribution;
    _resultData['statusDistribution'] =
        l$statusDistribution?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$scoreDistribution = scoreDistribution;
    final l$statusDistribution = statusDistribution;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$scoreDistribution == null
          ? null
          : Object.hashAll(l$scoreDistribution.map((v) => v)),
      l$statusDistribution == null
          ? null
          : Object.hashAll(l$statusDistribution.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$stats ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$scoreDistribution = scoreDistribution;
    final lOther$scoreDistribution = other.scoreDistribution;
    if (l$scoreDistribution != null && lOther$scoreDistribution != null) {
      if (l$scoreDistribution.length != lOther$scoreDistribution.length) {
        return false;
      }
      for (int i = 0; i < l$scoreDistribution.length; i++) {
        final l$scoreDistribution$entry = l$scoreDistribution[i];
        final lOther$scoreDistribution$entry = lOther$scoreDistribution[i];
        if (l$scoreDistribution$entry != lOther$scoreDistribution$entry) {
          return false;
        }
      }
    } else if (l$scoreDistribution != lOther$scoreDistribution) {
      return false;
    }
    final l$statusDistribution = statusDistribution;
    final lOther$statusDistribution = other.statusDistribution;
    if (l$statusDistribution != null && lOther$statusDistribution != null) {
      if (l$statusDistribution.length != lOther$statusDistribution.length) {
        return false;
      }
      for (int i = 0; i < l$statusDistribution.length; i++) {
        final l$statusDistribution$entry = l$statusDistribution[i];
        final lOther$statusDistribution$entry = lOther$statusDistribution[i];
        if (l$statusDistribution$entry != lOther$statusDistribution$entry) {
          return false;
        }
      }
    } else if (l$statusDistribution != lOther$statusDistribution) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$stats
    on Fragment$MediaDetailed$stats {
  CopyWith$Fragment$MediaDetailed$stats<Fragment$MediaDetailed$stats>
      get copyWith => CopyWith$Fragment$MediaDetailed$stats(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$stats<TRes> {
  factory CopyWith$Fragment$MediaDetailed$stats(
    Fragment$MediaDetailed$stats instance,
    TRes Function(Fragment$MediaDetailed$stats) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$stats;

  factory CopyWith$Fragment$MediaDetailed$stats.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$stats;

  TRes call({
    List<Fragment$MediaDetailed$stats$scoreDistribution?>? scoreDistribution,
    List<Fragment$MediaDetailed$stats$statusDistribution?>? statusDistribution,
    String? $__typename,
  });
  TRes scoreDistribution(
      Iterable<Fragment$MediaDetailed$stats$scoreDistribution?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<
                      Fragment$MediaDetailed$stats$scoreDistribution>?>?)
          _fn);
  TRes statusDistribution(
      Iterable<Fragment$MediaDetailed$stats$statusDistribution?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$stats$statusDistribution<
                      Fragment$MediaDetailed$stats$statusDistribution>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaDetailed$stats<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$stats(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$stats _instance;

  final TRes Function(Fragment$MediaDetailed$stats) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? scoreDistribution = _undefined,
    Object? statusDistribution = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$stats(
        scoreDistribution: scoreDistribution == _undefined
            ? _instance.scoreDistribution
            : (scoreDistribution
                as List<Fragment$MediaDetailed$stats$scoreDistribution?>?),
        statusDistribution: statusDistribution == _undefined
            ? _instance.statusDistribution
            : (statusDistribution
                as List<Fragment$MediaDetailed$stats$statusDistribution?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes scoreDistribution(
          Iterable<Fragment$MediaDetailed$stats$scoreDistribution?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<
                          Fragment$MediaDetailed$stats$scoreDistribution>?>?)
              _fn) =>
      call(
          scoreDistribution:
              _fn(_instance.scoreDistribution?.map((e) => e == null
                  ? null
                  : CopyWith$Fragment$MediaDetailed$stats$scoreDistribution(
                      e,
                      (i) => i,
                    )))?.toList());

  TRes statusDistribution(
          Iterable<Fragment$MediaDetailed$stats$statusDistribution?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$stats$statusDistribution<
                          Fragment$MediaDetailed$stats$statusDistribution>?>?)
              _fn) =>
      call(
          statusDistribution:
              _fn(_instance.statusDistribution?.map((e) => e == null
                  ? null
                  : CopyWith$Fragment$MediaDetailed$stats$statusDistribution(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaDetailed$stats<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$stats(this._res);

  TRes _res;

  call({
    List<Fragment$MediaDetailed$stats$scoreDistribution?>? scoreDistribution,
    List<Fragment$MediaDetailed$stats$statusDistribution?>? statusDistribution,
    String? $__typename,
  }) =>
      _res;

  scoreDistribution(_fn) => _res;

  statusDistribution(_fn) => _res;
}

class Fragment$MediaDetailed$stats$scoreDistribution {
  Fragment$MediaDetailed$stats$scoreDistribution({
    this.amount,
    this.score,
    this.$__typename = 'ScoreDistribution',
  });

  factory Fragment$MediaDetailed$stats$scoreDistribution.fromJson(
      Map<String, dynamic> json) {
    final l$amount = json['amount'];
    final l$score = json['score'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$stats$scoreDistribution(
      amount: (l$amount as int?),
      score: (l$score as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? amount;

  final int? score;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$amount = amount;
    _resultData['amount'] = l$amount;
    final l$score = score;
    _resultData['score'] = l$score;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$amount = amount;
    final l$score = score;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$amount,
      l$score,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$stats$scoreDistribution ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$amount = amount;
    final lOther$amount = other.amount;
    if (l$amount != lOther$amount) {
      return false;
    }
    final l$score = score;
    final lOther$score = other.score;
    if (l$score != lOther$score) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$stats$scoreDistribution
    on Fragment$MediaDetailed$stats$scoreDistribution {
  CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<
          Fragment$MediaDetailed$stats$scoreDistribution>
      get copyWith => CopyWith$Fragment$MediaDetailed$stats$scoreDistribution(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<TRes> {
  factory CopyWith$Fragment$MediaDetailed$stats$scoreDistribution(
    Fragment$MediaDetailed$stats$scoreDistribution instance,
    TRes Function(Fragment$MediaDetailed$stats$scoreDistribution) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$stats$scoreDistribution;

  factory CopyWith$Fragment$MediaDetailed$stats$scoreDistribution.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$stats$scoreDistribution;

  TRes call({
    int? amount,
    int? score,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$stats$scoreDistribution<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$stats$scoreDistribution(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$stats$scoreDistribution _instance;

  final TRes Function(Fragment$MediaDetailed$stats$scoreDistribution) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? amount = _undefined,
    Object? score = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$stats$scoreDistribution(
        amount: amount == _undefined ? _instance.amount : (amount as int?),
        score: score == _undefined ? _instance.score : (score as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$stats$scoreDistribution<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats$scoreDistribution<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$stats$scoreDistribution(this._res);

  TRes _res;

  call({
    int? amount,
    int? score,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$stats$statusDistribution {
  Fragment$MediaDetailed$stats$statusDistribution({
    this.amount,
    this.status,
    this.$__typename = 'StatusDistribution',
  });

  factory Fragment$MediaDetailed$stats$statusDistribution.fromJson(
      Map<String, dynamic> json) {
    final l$amount = json['amount'];
    final l$status = json['status'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$stats$statusDistribution(
      amount: (l$amount as int?),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaListStatus((l$status as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final int? amount;

  final Enum$MediaListStatus? status;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$amount = amount;
    _resultData['amount'] = l$amount;
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaListStatus(l$status);
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$amount = amount;
    final l$status = status;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$amount,
      l$status,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$stats$statusDistribution ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$amount = amount;
    final lOther$amount = other.amount;
    if (l$amount != lOther$amount) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$stats$statusDistribution
    on Fragment$MediaDetailed$stats$statusDistribution {
  CopyWith$Fragment$MediaDetailed$stats$statusDistribution<
          Fragment$MediaDetailed$stats$statusDistribution>
      get copyWith => CopyWith$Fragment$MediaDetailed$stats$statusDistribution(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$stats$statusDistribution<TRes> {
  factory CopyWith$Fragment$MediaDetailed$stats$statusDistribution(
    Fragment$MediaDetailed$stats$statusDistribution instance,
    TRes Function(Fragment$MediaDetailed$stats$statusDistribution) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$stats$statusDistribution;

  factory CopyWith$Fragment$MediaDetailed$stats$statusDistribution.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$stats$statusDistribution;

  TRes call({
    int? amount,
    Enum$MediaListStatus? status,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$stats$statusDistribution<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats$statusDistribution<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$stats$statusDistribution(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$stats$statusDistribution _instance;

  final TRes Function(Fragment$MediaDetailed$stats$statusDistribution) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? amount = _undefined,
    Object? status = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$stats$statusDistribution(
        amount: amount == _undefined ? _instance.amount : (amount as int?),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaListStatus?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$stats$statusDistribution<TRes>
    implements CopyWith$Fragment$MediaDetailed$stats$statusDistribution<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$stats$statusDistribution(this._res);

  TRes _res;

  call({
    int? amount,
    Enum$MediaListStatus? status,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$title implements Fragment$MediaShort$title {
  Fragment$MediaDetailed$title({
    this.userPreferred,
    this.english,
    this.romaji,
    this.native,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$MediaDetailed$title.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$english = json['english'];
    final l$romaji = json['romaji'];
    final l$native = json['native'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$title(
      userPreferred: (l$userPreferred as String?),
      english: (l$english as String?),
      romaji: (l$romaji as String?),
      native: (l$native as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String? english;

  final String? romaji;

  final String? native;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$english = english;
    _resultData['english'] = l$english;
    final l$romaji = romaji;
    _resultData['romaji'] = l$romaji;
    final l$native = native;
    _resultData['native'] = l$native;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$english = english;
    final l$romaji = romaji;
    final l$native = native;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$english,
      l$romaji,
      l$native,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$english = english;
    final lOther$english = other.english;
    if (l$english != lOther$english) {
      return false;
    }
    final l$romaji = romaji;
    final lOther$romaji = other.romaji;
    if (l$romaji != lOther$romaji) {
      return false;
    }
    final l$native = native;
    final lOther$native = other.native;
    if (l$native != lOther$native) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$title
    on Fragment$MediaDetailed$title {
  CopyWith$Fragment$MediaDetailed$title<Fragment$MediaDetailed$title>
      get copyWith => CopyWith$Fragment$MediaDetailed$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$title<TRes> {
  factory CopyWith$Fragment$MediaDetailed$title(
    Fragment$MediaDetailed$title instance,
    TRes Function(Fragment$MediaDetailed$title) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$title;

  factory CopyWith$Fragment$MediaDetailed$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$title;

  TRes call({
    String? userPreferred,
    String? english,
    String? romaji,
    String? native,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$title<TRes>
    implements CopyWith$Fragment$MediaDetailed$title<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$title(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$title _instance;

  final TRes Function(Fragment$MediaDetailed$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? english = _undefined,
    Object? romaji = _undefined,
    Object? native = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        english:
            english == _undefined ? _instance.english : (english as String?),
        romaji: romaji == _undefined ? _instance.romaji : (romaji as String?),
        native: native == _undefined ? _instance.native : (native as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$title<TRes>
    implements CopyWith$Fragment$MediaDetailed$title<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? english,
    String? romaji,
    String? native,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$coverImage
    implements Fragment$MediaShort$coverImage {
  Fragment$MediaDetailed$coverImage({
    this.medium,
    this.large,
    this.extraLarge,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$MediaDetailed$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$large = json['large'];
    final l$extraLarge = json['extraLarge'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$coverImage(
      medium: (l$medium as String?),
      large: (l$large as String?),
      extraLarge: (l$extraLarge as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String? large;

  final String? extraLarge;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$large = large;
    _resultData['large'] = l$large;
    final l$extraLarge = extraLarge;
    _resultData['extraLarge'] = l$extraLarge;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$large = large;
    final l$extraLarge = extraLarge;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$large,
      l$extraLarge,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$extraLarge = extraLarge;
    final lOther$extraLarge = other.extraLarge;
    if (l$extraLarge != lOther$extraLarge) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$coverImage
    on Fragment$MediaDetailed$coverImage {
  CopyWith$Fragment$MediaDetailed$coverImage<Fragment$MediaDetailed$coverImage>
      get copyWith => CopyWith$Fragment$MediaDetailed$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$coverImage<TRes> {
  factory CopyWith$Fragment$MediaDetailed$coverImage(
    Fragment$MediaDetailed$coverImage instance,
    TRes Function(Fragment$MediaDetailed$coverImage) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$coverImage;

  factory CopyWith$Fragment$MediaDetailed$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$coverImage;

  TRes call({
    String? medium,
    String? large,
    String? extraLarge,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$coverImage<TRes>
    implements CopyWith$Fragment$MediaDetailed$coverImage<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$coverImage _instance;

  final TRes Function(Fragment$MediaDetailed$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? large = _undefined,
    Object? extraLarge = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        large: large == _undefined ? _instance.large : (large as String?),
        extraLarge: extraLarge == _undefined
            ? _instance.extraLarge
            : (extraLarge as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$coverImage<TRes>
    implements CopyWith$Fragment$MediaDetailed$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$coverImage(this._res);

  TRes _res;

  call({
    String? medium,
    String? large,
    String? extraLarge,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDetailed$airingSchedule
    implements Fragment$MediaShort$airingSchedule {
  Fragment$MediaDetailed$airingSchedule({
    this.nodes,
    this.$__typename = 'AiringScheduleConnection',
  });

  factory Fragment$MediaDetailed$airingSchedule.fromJson(
      Map<String, dynamic> json) {
    final l$nodes = json['nodes'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$airingSchedule(
      nodes: (l$nodes as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaDetailed$airingSchedule$nodes.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaDetailed$airingSchedule$nodes?>? nodes;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$nodes = nodes;
    _resultData['nodes'] = l$nodes?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$nodes = nodes;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$nodes == null ? null : Object.hashAll(l$nodes.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$airingSchedule ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$nodes = nodes;
    final lOther$nodes = other.nodes;
    if (l$nodes != null && lOther$nodes != null) {
      if (l$nodes.length != lOther$nodes.length) {
        return false;
      }
      for (int i = 0; i < l$nodes.length; i++) {
        final l$nodes$entry = l$nodes[i];
        final lOther$nodes$entry = lOther$nodes[i];
        if (l$nodes$entry != lOther$nodes$entry) {
          return false;
        }
      }
    } else if (l$nodes != lOther$nodes) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$airingSchedule
    on Fragment$MediaDetailed$airingSchedule {
  CopyWith$Fragment$MediaDetailed$airingSchedule<
          Fragment$MediaDetailed$airingSchedule>
      get copyWith => CopyWith$Fragment$MediaDetailed$airingSchedule(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> {
  factory CopyWith$Fragment$MediaDetailed$airingSchedule(
    Fragment$MediaDetailed$airingSchedule instance,
    TRes Function(Fragment$MediaDetailed$airingSchedule) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$airingSchedule;

  factory CopyWith$Fragment$MediaDetailed$airingSchedule.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule;

  TRes call({
    List<Fragment$MediaDetailed$airingSchedule$nodes?>? nodes,
    String? $__typename,
  });
  TRes nodes(
      Iterable<Fragment$MediaDetailed$airingSchedule$nodes?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<
                      Fragment$MediaDetailed$airingSchedule$nodes>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaDetailed$airingSchedule<TRes>
    implements CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$airingSchedule(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$airingSchedule _instance;

  final TRes Function(Fragment$MediaDetailed$airingSchedule) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? nodes = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$airingSchedule(
        nodes: nodes == _undefined
            ? _instance.nodes
            : (nodes as List<Fragment$MediaDetailed$airingSchedule$nodes?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes nodes(
          Iterable<Fragment$MediaDetailed$airingSchedule$nodes?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<
                          Fragment$MediaDetailed$airingSchedule$nodes>?>?)
              _fn) =>
      call(
          nodes: _fn(_instance.nodes?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaDetailed$airingSchedule$nodes(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule<TRes>
    implements CopyWith$Fragment$MediaDetailed$airingSchedule<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule(this._res);

  TRes _res;

  call({
    List<Fragment$MediaDetailed$airingSchedule$nodes?>? nodes,
    String? $__typename,
  }) =>
      _res;

  nodes(_fn) => _res;
}

class Fragment$MediaDetailed$airingSchedule$nodes
    implements Fragment$MediaShort$airingSchedule$nodes {
  Fragment$MediaDetailed$airingSchedule$nodes({
    required this.timeUntilAiring,
    required this.episode,
    this.$__typename = 'AiringSchedule',
  });

  factory Fragment$MediaDetailed$airingSchedule$nodes.fromJson(
      Map<String, dynamic> json) {
    final l$timeUntilAiring = json['timeUntilAiring'];
    final l$episode = json['episode'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDetailed$airingSchedule$nodes(
      timeUntilAiring: (l$timeUntilAiring as int),
      episode: (l$episode as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int timeUntilAiring;

  final int episode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$timeUntilAiring = timeUntilAiring;
    _resultData['timeUntilAiring'] = l$timeUntilAiring;
    final l$episode = episode;
    _resultData['episode'] = l$episode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$timeUntilAiring = timeUntilAiring;
    final l$episode = episode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$timeUntilAiring,
      l$episode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDetailed$airingSchedule$nodes ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$timeUntilAiring = timeUntilAiring;
    final lOther$timeUntilAiring = other.timeUntilAiring;
    if (l$timeUntilAiring != lOther$timeUntilAiring) {
      return false;
    }
    final l$episode = episode;
    final lOther$episode = other.episode;
    if (l$episode != lOther$episode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDetailed$airingSchedule$nodes
    on Fragment$MediaDetailed$airingSchedule$nodes {
  CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<
          Fragment$MediaDetailed$airingSchedule$nodes>
      get copyWith => CopyWith$Fragment$MediaDetailed$airingSchedule$nodes(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<TRes> {
  factory CopyWith$Fragment$MediaDetailed$airingSchedule$nodes(
    Fragment$MediaDetailed$airingSchedule$nodes instance,
    TRes Function(Fragment$MediaDetailed$airingSchedule$nodes) then,
  ) = _CopyWithImpl$Fragment$MediaDetailed$airingSchedule$nodes;

  factory CopyWith$Fragment$MediaDetailed$airingSchedule$nodes.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule$nodes;

  TRes call({
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDetailed$airingSchedule$nodes<TRes>
    implements CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<TRes> {
  _CopyWithImpl$Fragment$MediaDetailed$airingSchedule$nodes(
    this._instance,
    this._then,
  );

  final Fragment$MediaDetailed$airingSchedule$nodes _instance;

  final TRes Function(Fragment$MediaDetailed$airingSchedule$nodes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? timeUntilAiring = _undefined,
    Object? episode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDetailed$airingSchedule$nodes(
        timeUntilAiring:
            timeUntilAiring == _undefined || timeUntilAiring == null
                ? _instance.timeUntilAiring
                : (timeUntilAiring as int),
        episode: episode == _undefined || episode == null
            ? _instance.episode
            : (episode as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule$nodes<TRes>
    implements CopyWith$Fragment$MediaDetailed$airingSchedule$nodes<TRes> {
  _CopyWithStubImpl$Fragment$MediaDetailed$airingSchedule$nodes(this._res);

  TRes _res;

  call({
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaShort {
  Fragment$MediaShort({
    required this.id,
    this.title,
    this.coverImage,
    this.meanScore,
    this.favourites,
    this.format,
    this.type,
    this.episodes,
    this.chapters,
    this.volumes,
    this.status,
    this.airingSchedule,
    this.genres,
    this.season,
    this.seasonYear,
    this.countryOfOrigin,
    this.averageScore,
    this.popularity,
    this.startDate,
    this.endDate,
    this.mediaListEntry,
    this.$__typename = 'Media',
  });

  factory Fragment$MediaShort.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$meanScore = json['meanScore'];
    final l$favourites = json['favourites'];
    final l$format = json['format'];
    final l$type = json['type'];
    final l$episodes = json['episodes'];
    final l$chapters = json['chapters'];
    final l$volumes = json['volumes'];
    final l$status = json['status'];
    final l$airingSchedule = json['airingSchedule'];
    final l$genres = json['genres'];
    final l$season = json['season'];
    final l$seasonYear = json['seasonYear'];
    final l$countryOfOrigin = json['countryOfOrigin'];
    final l$averageScore = json['averageScore'];
    final l$popularity = json['popularity'];
    final l$startDate = json['startDate'];
    final l$endDate = json['endDate'];
    final l$mediaListEntry = json['mediaListEntry'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaShort(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$MediaShort$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$MediaShort$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      meanScore: (l$meanScore as int?),
      favourites: (l$favourites as int?),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      episodes: (l$episodes as int?),
      chapters: (l$chapters as int?),
      volumes: (l$volumes as int?),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaStatus((l$status as String)),
      airingSchedule: l$airingSchedule == null
          ? null
          : Fragment$MediaShort$airingSchedule.fromJson(
              (l$airingSchedule as Map<String, dynamic>)),
      genres: (l$genres as List<dynamic>?)?.map((e) => (e as String?)).toList(),
      season: l$season == null
          ? null
          : fromJson$Enum$MediaSeason((l$season as String)),
      seasonYear: (l$seasonYear as int?),
      countryOfOrigin: (l$countryOfOrigin as String?),
      averageScore: (l$averageScore as int?),
      popularity: (l$popularity as int?),
      startDate: l$startDate == null
          ? null
          : Fragment$FuzzyDate.fromJson((l$startDate as Map<String, dynamic>)),
      endDate: l$endDate == null
          ? null
          : Fragment$FuzzyDate.fromJson((l$endDate as Map<String, dynamic>)),
      mediaListEntry: l$mediaListEntry == null
          ? null
          : Fragment$MediaListEntry.fromJson(
              (l$mediaListEntry as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaShort$title? title;

  final Fragment$MediaShort$coverImage? coverImage;

  final int? meanScore;

  final int? favourites;

  final Enum$MediaFormat? format;

  final Enum$MediaType? type;

  final int? episodes;

  final int? chapters;

  final int? volumes;

  final Enum$MediaStatus? status;

  final Fragment$MediaShort$airingSchedule? airingSchedule;

  final List<String?>? genres;

  final Enum$MediaSeason? season;

  final int? seasonYear;

  final String? countryOfOrigin;

  final int? averageScore;

  final int? popularity;

  final Fragment$FuzzyDate? startDate;

  final Fragment$FuzzyDate? endDate;

  final Fragment$MediaListEntry? mediaListEntry;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$meanScore = meanScore;
    _resultData['meanScore'] = l$meanScore;
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$episodes = episodes;
    _resultData['episodes'] = l$episodes;
    final l$chapters = chapters;
    _resultData['chapters'] = l$chapters;
    final l$volumes = volumes;
    _resultData['volumes'] = l$volumes;
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaStatus(l$status);
    final l$airingSchedule = airingSchedule;
    _resultData['airingSchedule'] = l$airingSchedule?.toJson();
    final l$genres = genres;
    _resultData['genres'] = l$genres?.map((e) => e).toList();
    final l$season = season;
    _resultData['season'] =
        l$season == null ? null : toJson$Enum$MediaSeason(l$season);
    final l$seasonYear = seasonYear;
    _resultData['seasonYear'] = l$seasonYear;
    final l$countryOfOrigin = countryOfOrigin;
    _resultData['countryOfOrigin'] = l$countryOfOrigin;
    final l$averageScore = averageScore;
    _resultData['averageScore'] = l$averageScore;
    final l$popularity = popularity;
    _resultData['popularity'] = l$popularity;
    final l$startDate = startDate;
    _resultData['startDate'] = l$startDate?.toJson();
    final l$endDate = endDate;
    _resultData['endDate'] = l$endDate?.toJson();
    final l$mediaListEntry = mediaListEntry;
    _resultData['mediaListEntry'] = l$mediaListEntry?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$coverImage = coverImage;
    final l$meanScore = meanScore;
    final l$favourites = favourites;
    final l$format = format;
    final l$type = type;
    final l$episodes = episodes;
    final l$chapters = chapters;
    final l$volumes = volumes;
    final l$status = status;
    final l$airingSchedule = airingSchedule;
    final l$genres = genres;
    final l$season = season;
    final l$seasonYear = seasonYear;
    final l$countryOfOrigin = countryOfOrigin;
    final l$averageScore = averageScore;
    final l$popularity = popularity;
    final l$startDate = startDate;
    final l$endDate = endDate;
    final l$mediaListEntry = mediaListEntry;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$coverImage,
      l$meanScore,
      l$favourites,
      l$format,
      l$type,
      l$episodes,
      l$chapters,
      l$volumes,
      l$status,
      l$airingSchedule,
      l$genres == null ? null : Object.hashAll(l$genres.map((v) => v)),
      l$season,
      l$seasonYear,
      l$countryOfOrigin,
      l$averageScore,
      l$popularity,
      l$startDate,
      l$endDate,
      l$mediaListEntry,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaShort || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$meanScore = meanScore;
    final lOther$meanScore = other.meanScore;
    if (l$meanScore != lOther$meanScore) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$episodes = episodes;
    final lOther$episodes = other.episodes;
    if (l$episodes != lOther$episodes) {
      return false;
    }
    final l$chapters = chapters;
    final lOther$chapters = other.chapters;
    if (l$chapters != lOther$chapters) {
      return false;
    }
    final l$volumes = volumes;
    final lOther$volumes = other.volumes;
    if (l$volumes != lOther$volumes) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$airingSchedule = airingSchedule;
    final lOther$airingSchedule = other.airingSchedule;
    if (l$airingSchedule != lOther$airingSchedule) {
      return false;
    }
    final l$genres = genres;
    final lOther$genres = other.genres;
    if (l$genres != null && lOther$genres != null) {
      if (l$genres.length != lOther$genres.length) {
        return false;
      }
      for (int i = 0; i < l$genres.length; i++) {
        final l$genres$entry = l$genres[i];
        final lOther$genres$entry = lOther$genres[i];
        if (l$genres$entry != lOther$genres$entry) {
          return false;
        }
      }
    } else if (l$genres != lOther$genres) {
      return false;
    }
    final l$season = season;
    final lOther$season = other.season;
    if (l$season != lOther$season) {
      return false;
    }
    final l$seasonYear = seasonYear;
    final lOther$seasonYear = other.seasonYear;
    if (l$seasonYear != lOther$seasonYear) {
      return false;
    }
    final l$countryOfOrigin = countryOfOrigin;
    final lOther$countryOfOrigin = other.countryOfOrigin;
    if (l$countryOfOrigin != lOther$countryOfOrigin) {
      return false;
    }
    final l$averageScore = averageScore;
    final lOther$averageScore = other.averageScore;
    if (l$averageScore != lOther$averageScore) {
      return false;
    }
    final l$popularity = popularity;
    final lOther$popularity = other.popularity;
    if (l$popularity != lOther$popularity) {
      return false;
    }
    final l$startDate = startDate;
    final lOther$startDate = other.startDate;
    if (l$startDate != lOther$startDate) {
      return false;
    }
    final l$endDate = endDate;
    final lOther$endDate = other.endDate;
    if (l$endDate != lOther$endDate) {
      return false;
    }
    final l$mediaListEntry = mediaListEntry;
    final lOther$mediaListEntry = other.mediaListEntry;
    if (l$mediaListEntry != lOther$mediaListEntry) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaShort on Fragment$MediaShort {
  CopyWith$Fragment$MediaShort<Fragment$MediaShort> get copyWith =>
      CopyWith$Fragment$MediaShort(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaShort<TRes> {
  factory CopyWith$Fragment$MediaShort(
    Fragment$MediaShort instance,
    TRes Function(Fragment$MediaShort) then,
  ) = _CopyWithImpl$Fragment$MediaShort;

  factory CopyWith$Fragment$MediaShort.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaShort;

  TRes call({
    int? id,
    Fragment$MediaShort$title? title,
    Fragment$MediaShort$coverImage? coverImage,
    int? meanScore,
    int? favourites,
    Enum$MediaFormat? format,
    Enum$MediaType? type,
    int? episodes,
    int? chapters,
    int? volumes,
    Enum$MediaStatus? status,
    Fragment$MediaShort$airingSchedule? airingSchedule,
    List<String?>? genres,
    Enum$MediaSeason? season,
    int? seasonYear,
    String? countryOfOrigin,
    int? averageScore,
    int? popularity,
    Fragment$FuzzyDate? startDate,
    Fragment$FuzzyDate? endDate,
    Fragment$MediaListEntry? mediaListEntry,
    String? $__typename,
  });
  CopyWith$Fragment$MediaShort$title<TRes> get title;
  CopyWith$Fragment$MediaShort$coverImage<TRes> get coverImage;
  CopyWith$Fragment$MediaShort$airingSchedule<TRes> get airingSchedule;
  CopyWith$Fragment$FuzzyDate<TRes> get startDate;
  CopyWith$Fragment$FuzzyDate<TRes> get endDate;
  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry;
}

class _CopyWithImpl$Fragment$MediaShort<TRes>
    implements CopyWith$Fragment$MediaShort<TRes> {
  _CopyWithImpl$Fragment$MediaShort(
    this._instance,
    this._then,
  );

  final Fragment$MediaShort _instance;

  final TRes Function(Fragment$MediaShort) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? meanScore = _undefined,
    Object? favourites = _undefined,
    Object? format = _undefined,
    Object? type = _undefined,
    Object? episodes = _undefined,
    Object? chapters = _undefined,
    Object? volumes = _undefined,
    Object? status = _undefined,
    Object? airingSchedule = _undefined,
    Object? genres = _undefined,
    Object? season = _undefined,
    Object? seasonYear = _undefined,
    Object? countryOfOrigin = _undefined,
    Object? averageScore = _undefined,
    Object? popularity = _undefined,
    Object? startDate = _undefined,
    Object? endDate = _undefined,
    Object? mediaListEntry = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaShort(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$MediaShort$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$MediaShort$coverImage?),
        meanScore:
            meanScore == _undefined ? _instance.meanScore : (meanScore as int?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        episodes:
            episodes == _undefined ? _instance.episodes : (episodes as int?),
        chapters:
            chapters == _undefined ? _instance.chapters : (chapters as int?),
        volumes: volumes == _undefined ? _instance.volumes : (volumes as int?),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaStatus?),
        airingSchedule: airingSchedule == _undefined
            ? _instance.airingSchedule
            : (airingSchedule as Fragment$MediaShort$airingSchedule?),
        genres: genres == _undefined
            ? _instance.genres
            : (genres as List<String?>?),
        season: season == _undefined
            ? _instance.season
            : (season as Enum$MediaSeason?),
        seasonYear: seasonYear == _undefined
            ? _instance.seasonYear
            : (seasonYear as int?),
        countryOfOrigin: countryOfOrigin == _undefined
            ? _instance.countryOfOrigin
            : (countryOfOrigin as String?),
        averageScore: averageScore == _undefined
            ? _instance.averageScore
            : (averageScore as int?),
        popularity: popularity == _undefined
            ? _instance.popularity
            : (popularity as int?),
        startDate: startDate == _undefined
            ? _instance.startDate
            : (startDate as Fragment$FuzzyDate?),
        endDate: endDate == _undefined
            ? _instance.endDate
            : (endDate as Fragment$FuzzyDate?),
        mediaListEntry: mediaListEntry == _undefined
            ? _instance.mediaListEntry
            : (mediaListEntry as Fragment$MediaListEntry?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaShort$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$MediaShort$title.stub(_then(_instance))
        : CopyWith$Fragment$MediaShort$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$MediaShort$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$MediaShort$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$MediaShort$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$MediaShort$airingSchedule<TRes> get airingSchedule {
    final local$airingSchedule = _instance.airingSchedule;
    return local$airingSchedule == null
        ? CopyWith$Fragment$MediaShort$airingSchedule.stub(_then(_instance))
        : CopyWith$Fragment$MediaShort$airingSchedule(
            local$airingSchedule, (e) => call(airingSchedule: e));
  }

  CopyWith$Fragment$FuzzyDate<TRes> get startDate {
    final local$startDate = _instance.startDate;
    return local$startDate == null
        ? CopyWith$Fragment$FuzzyDate.stub(_then(_instance))
        : CopyWith$Fragment$FuzzyDate(
            local$startDate, (e) => call(startDate: e));
  }

  CopyWith$Fragment$FuzzyDate<TRes> get endDate {
    final local$endDate = _instance.endDate;
    return local$endDate == null
        ? CopyWith$Fragment$FuzzyDate.stub(_then(_instance))
        : CopyWith$Fragment$FuzzyDate(local$endDate, (e) => call(endDate: e));
  }

  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry {
    final local$mediaListEntry = _instance.mediaListEntry;
    return local$mediaListEntry == null
        ? CopyWith$Fragment$MediaListEntry.stub(_then(_instance))
        : CopyWith$Fragment$MediaListEntry(
            local$mediaListEntry, (e) => call(mediaListEntry: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaShort<TRes>
    implements CopyWith$Fragment$MediaShort<TRes> {
  _CopyWithStubImpl$Fragment$MediaShort(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaShort$title? title,
    Fragment$MediaShort$coverImage? coverImage,
    int? meanScore,
    int? favourites,
    Enum$MediaFormat? format,
    Enum$MediaType? type,
    int? episodes,
    int? chapters,
    int? volumes,
    Enum$MediaStatus? status,
    Fragment$MediaShort$airingSchedule? airingSchedule,
    List<String?>? genres,
    Enum$MediaSeason? season,
    int? seasonYear,
    String? countryOfOrigin,
    int? averageScore,
    int? popularity,
    Fragment$FuzzyDate? startDate,
    Fragment$FuzzyDate? endDate,
    Fragment$MediaListEntry? mediaListEntry,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaShort$title<TRes> get title =>
      CopyWith$Fragment$MediaShort$title.stub(_res);

  CopyWith$Fragment$MediaShort$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$MediaShort$coverImage.stub(_res);

  CopyWith$Fragment$MediaShort$airingSchedule<TRes> get airingSchedule =>
      CopyWith$Fragment$MediaShort$airingSchedule.stub(_res);

  CopyWith$Fragment$FuzzyDate<TRes> get startDate =>
      CopyWith$Fragment$FuzzyDate.stub(_res);

  CopyWith$Fragment$FuzzyDate<TRes> get endDate =>
      CopyWith$Fragment$FuzzyDate.stub(_res);

  CopyWith$Fragment$MediaListEntry<TRes> get mediaListEntry =>
      CopyWith$Fragment$MediaListEntry.stub(_res);
}

const fragmentDefinitionMediaShort = FragmentDefinitionNode(
  name: NameNode(value: 'MediaShort'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Media'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'title'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'english'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'romaji'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'native'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'coverImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'medium'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'extraLarge'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'meanScore'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'format'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'type'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'episodes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'chapters'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'volumes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'status'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'airingSchedule'),
      alias: null,
      arguments: [
        ArgumentNode(
          name: NameNode(value: 'notYetAired'),
          value: BooleanValueNode(value: true),
        ),
        ArgumentNode(
          name: NameNode(value: 'perPage'),
          value: IntValueNode(value: '1'),
        ),
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'nodes'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'timeUntilAiring'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'episode'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'genres'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'season'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'seasonYear'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'countryOfOrigin'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'averageScore'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'popularity'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'startDate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'FuzzyDate'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'endDate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'FuzzyDate'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'mediaListEntry'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'MediaListEntry'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaShort = DocumentNode(definitions: [
  fragmentDefinitionMediaShort,
  fragmentDefinitionFuzzyDate,
  fragmentDefinitionMediaListEntry,
  fragmentDefinitionListEntryMedia,
]);

extension ClientExtension$Fragment$MediaShort on graphql.GraphQLClient {
  void writeFragment$MediaShort({
    required Fragment$MediaShort data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaShort',
            document: documentNodeFragmentMediaShort,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaShort? readFragment$MediaShort({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaShort',
          document: documentNodeFragmentMediaShort,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MediaShort.fromJson(result);
  }
}

class Fragment$MediaShort$title {
  Fragment$MediaShort$title({
    this.userPreferred,
    this.english,
    this.romaji,
    this.native,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$MediaShort$title.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$english = json['english'];
    final l$romaji = json['romaji'];
    final l$native = json['native'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaShort$title(
      userPreferred: (l$userPreferred as String?),
      english: (l$english as String?),
      romaji: (l$romaji as String?),
      native: (l$native as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String? english;

  final String? romaji;

  final String? native;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$english = english;
    _resultData['english'] = l$english;
    final l$romaji = romaji;
    _resultData['romaji'] = l$romaji;
    final l$native = native;
    _resultData['native'] = l$native;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$english = english;
    final l$romaji = romaji;
    final l$native = native;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$english,
      l$romaji,
      l$native,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaShort$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$english = english;
    final lOther$english = other.english;
    if (l$english != lOther$english) {
      return false;
    }
    final l$romaji = romaji;
    final lOther$romaji = other.romaji;
    if (l$romaji != lOther$romaji) {
      return false;
    }
    final l$native = native;
    final lOther$native = other.native;
    if (l$native != lOther$native) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaShort$title
    on Fragment$MediaShort$title {
  CopyWith$Fragment$MediaShort$title<Fragment$MediaShort$title> get copyWith =>
      CopyWith$Fragment$MediaShort$title(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaShort$title<TRes> {
  factory CopyWith$Fragment$MediaShort$title(
    Fragment$MediaShort$title instance,
    TRes Function(Fragment$MediaShort$title) then,
  ) = _CopyWithImpl$Fragment$MediaShort$title;

  factory CopyWith$Fragment$MediaShort$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaShort$title;

  TRes call({
    String? userPreferred,
    String? english,
    String? romaji,
    String? native,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaShort$title<TRes>
    implements CopyWith$Fragment$MediaShort$title<TRes> {
  _CopyWithImpl$Fragment$MediaShort$title(
    this._instance,
    this._then,
  );

  final Fragment$MediaShort$title _instance;

  final TRes Function(Fragment$MediaShort$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? english = _undefined,
    Object? romaji = _undefined,
    Object? native = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaShort$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        english:
            english == _undefined ? _instance.english : (english as String?),
        romaji: romaji == _undefined ? _instance.romaji : (romaji as String?),
        native: native == _undefined ? _instance.native : (native as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaShort$title<TRes>
    implements CopyWith$Fragment$MediaShort$title<TRes> {
  _CopyWithStubImpl$Fragment$MediaShort$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? english,
    String? romaji,
    String? native,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaShort$coverImage {
  Fragment$MediaShort$coverImage({
    this.medium,
    this.large,
    this.extraLarge,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$MediaShort$coverImage.fromJson(Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$large = json['large'];
    final l$extraLarge = json['extraLarge'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaShort$coverImage(
      medium: (l$medium as String?),
      large: (l$large as String?),
      extraLarge: (l$extraLarge as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String? large;

  final String? extraLarge;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$large = large;
    _resultData['large'] = l$large;
    final l$extraLarge = extraLarge;
    _resultData['extraLarge'] = l$extraLarge;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$large = large;
    final l$extraLarge = extraLarge;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$large,
      l$extraLarge,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaShort$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$extraLarge = extraLarge;
    final lOther$extraLarge = other.extraLarge;
    if (l$extraLarge != lOther$extraLarge) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaShort$coverImage
    on Fragment$MediaShort$coverImage {
  CopyWith$Fragment$MediaShort$coverImage<Fragment$MediaShort$coverImage>
      get copyWith => CopyWith$Fragment$MediaShort$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaShort$coverImage<TRes> {
  factory CopyWith$Fragment$MediaShort$coverImage(
    Fragment$MediaShort$coverImage instance,
    TRes Function(Fragment$MediaShort$coverImage) then,
  ) = _CopyWithImpl$Fragment$MediaShort$coverImage;

  factory CopyWith$Fragment$MediaShort$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaShort$coverImage;

  TRes call({
    String? medium,
    String? large,
    String? extraLarge,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaShort$coverImage<TRes>
    implements CopyWith$Fragment$MediaShort$coverImage<TRes> {
  _CopyWithImpl$Fragment$MediaShort$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$MediaShort$coverImage _instance;

  final TRes Function(Fragment$MediaShort$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? large = _undefined,
    Object? extraLarge = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaShort$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        large: large == _undefined ? _instance.large : (large as String?),
        extraLarge: extraLarge == _undefined
            ? _instance.extraLarge
            : (extraLarge as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaShort$coverImage<TRes>
    implements CopyWith$Fragment$MediaShort$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$MediaShort$coverImage(this._res);

  TRes _res;

  call({
    String? medium,
    String? large,
    String? extraLarge,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaShort$airingSchedule {
  Fragment$MediaShort$airingSchedule({
    this.nodes,
    this.$__typename = 'AiringScheduleConnection',
  });

  factory Fragment$MediaShort$airingSchedule.fromJson(
      Map<String, dynamic> json) {
    final l$nodes = json['nodes'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaShort$airingSchedule(
      nodes: (l$nodes as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$MediaShort$airingSchedule$nodes.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$MediaShort$airingSchedule$nodes?>? nodes;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$nodes = nodes;
    _resultData['nodes'] = l$nodes?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$nodes = nodes;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$nodes == null ? null : Object.hashAll(l$nodes.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaShort$airingSchedule ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$nodes = nodes;
    final lOther$nodes = other.nodes;
    if (l$nodes != null && lOther$nodes != null) {
      if (l$nodes.length != lOther$nodes.length) {
        return false;
      }
      for (int i = 0; i < l$nodes.length; i++) {
        final l$nodes$entry = l$nodes[i];
        final lOther$nodes$entry = lOther$nodes[i];
        if (l$nodes$entry != lOther$nodes$entry) {
          return false;
        }
      }
    } else if (l$nodes != lOther$nodes) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaShort$airingSchedule
    on Fragment$MediaShort$airingSchedule {
  CopyWith$Fragment$MediaShort$airingSchedule<
          Fragment$MediaShort$airingSchedule>
      get copyWith => CopyWith$Fragment$MediaShort$airingSchedule(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaShort$airingSchedule<TRes> {
  factory CopyWith$Fragment$MediaShort$airingSchedule(
    Fragment$MediaShort$airingSchedule instance,
    TRes Function(Fragment$MediaShort$airingSchedule) then,
  ) = _CopyWithImpl$Fragment$MediaShort$airingSchedule;

  factory CopyWith$Fragment$MediaShort$airingSchedule.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaShort$airingSchedule;

  TRes call({
    List<Fragment$MediaShort$airingSchedule$nodes?>? nodes,
    String? $__typename,
  });
  TRes nodes(
      Iterable<Fragment$MediaShort$airingSchedule$nodes?>? Function(
              Iterable<
                  CopyWith$Fragment$MediaShort$airingSchedule$nodes<
                      Fragment$MediaShort$airingSchedule$nodes>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$MediaShort$airingSchedule<TRes>
    implements CopyWith$Fragment$MediaShort$airingSchedule<TRes> {
  _CopyWithImpl$Fragment$MediaShort$airingSchedule(
    this._instance,
    this._then,
  );

  final Fragment$MediaShort$airingSchedule _instance;

  final TRes Function(Fragment$MediaShort$airingSchedule) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? nodes = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaShort$airingSchedule(
        nodes: nodes == _undefined
            ? _instance.nodes
            : (nodes as List<Fragment$MediaShort$airingSchedule$nodes?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes nodes(
          Iterable<Fragment$MediaShort$airingSchedule$nodes?>? Function(
                  Iterable<
                      CopyWith$Fragment$MediaShort$airingSchedule$nodes<
                          Fragment$MediaShort$airingSchedule$nodes>?>?)
              _fn) =>
      call(
          nodes: _fn(_instance.nodes?.map((e) => e == null
              ? null
              : CopyWith$Fragment$MediaShort$airingSchedule$nodes(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$MediaShort$airingSchedule<TRes>
    implements CopyWith$Fragment$MediaShort$airingSchedule<TRes> {
  _CopyWithStubImpl$Fragment$MediaShort$airingSchedule(this._res);

  TRes _res;

  call({
    List<Fragment$MediaShort$airingSchedule$nodes?>? nodes,
    String? $__typename,
  }) =>
      _res;

  nodes(_fn) => _res;
}

class Fragment$MediaShort$airingSchedule$nodes {
  Fragment$MediaShort$airingSchedule$nodes({
    required this.timeUntilAiring,
    required this.episode,
    this.$__typename = 'AiringSchedule',
  });

  factory Fragment$MediaShort$airingSchedule$nodes.fromJson(
      Map<String, dynamic> json) {
    final l$timeUntilAiring = json['timeUntilAiring'];
    final l$episode = json['episode'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaShort$airingSchedule$nodes(
      timeUntilAiring: (l$timeUntilAiring as int),
      episode: (l$episode as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int timeUntilAiring;

  final int episode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$timeUntilAiring = timeUntilAiring;
    _resultData['timeUntilAiring'] = l$timeUntilAiring;
    final l$episode = episode;
    _resultData['episode'] = l$episode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$timeUntilAiring = timeUntilAiring;
    final l$episode = episode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$timeUntilAiring,
      l$episode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaShort$airingSchedule$nodes ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$timeUntilAiring = timeUntilAiring;
    final lOther$timeUntilAiring = other.timeUntilAiring;
    if (l$timeUntilAiring != lOther$timeUntilAiring) {
      return false;
    }
    final l$episode = episode;
    final lOther$episode = other.episode;
    if (l$episode != lOther$episode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaShort$airingSchedule$nodes
    on Fragment$MediaShort$airingSchedule$nodes {
  CopyWith$Fragment$MediaShort$airingSchedule$nodes<
          Fragment$MediaShort$airingSchedule$nodes>
      get copyWith => CopyWith$Fragment$MediaShort$airingSchedule$nodes(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaShort$airingSchedule$nodes<TRes> {
  factory CopyWith$Fragment$MediaShort$airingSchedule$nodes(
    Fragment$MediaShort$airingSchedule$nodes instance,
    TRes Function(Fragment$MediaShort$airingSchedule$nodes) then,
  ) = _CopyWithImpl$Fragment$MediaShort$airingSchedule$nodes;

  factory CopyWith$Fragment$MediaShort$airingSchedule$nodes.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaShort$airingSchedule$nodes;

  TRes call({
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaShort$airingSchedule$nodes<TRes>
    implements CopyWith$Fragment$MediaShort$airingSchedule$nodes<TRes> {
  _CopyWithImpl$Fragment$MediaShort$airingSchedule$nodes(
    this._instance,
    this._then,
  );

  final Fragment$MediaShort$airingSchedule$nodes _instance;

  final TRes Function(Fragment$MediaShort$airingSchedule$nodes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? timeUntilAiring = _undefined,
    Object? episode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaShort$airingSchedule$nodes(
        timeUntilAiring:
            timeUntilAiring == _undefined || timeUntilAiring == null
                ? _instance.timeUntilAiring
                : (timeUntilAiring as int),
        episode: episode == _undefined || episode == null
            ? _instance.episode
            : (episode as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaShort$airingSchedule$nodes<TRes>
    implements CopyWith$Fragment$MediaShort$airingSchedule$nodes<TRes> {
  _CopyWithStubImpl$Fragment$MediaShort$airingSchedule$nodes(this._res);

  TRes _res;

  call({
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultMedia {
  Fragment$SearchResultMedia({
    required this.id,
    this.coverImage,
    this.title,
    this.type,
    this.startDate,
    this.format,
    this.meanScore,
    this.$__typename = 'Media',
  });

  factory Fragment$SearchResultMedia.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$coverImage = json['coverImage'];
    final l$title = json['title'];
    final l$type = json['type'];
    final l$startDate = json['startDate'];
    final l$format = json['format'];
    final l$meanScore = json['meanScore'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultMedia(
      id: (l$id as int),
      coverImage: l$coverImage == null
          ? null
          : Fragment$SearchResultMedia$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      title: l$title == null
          ? null
          : Fragment$SearchResultMedia$title.fromJson(
              (l$title as Map<String, dynamic>)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      startDate: l$startDate == null
          ? null
          : Fragment$SearchResultMedia$startDate.fromJson(
              (l$startDate as Map<String, dynamic>)),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      meanScore: (l$meanScore as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$SearchResultMedia$coverImage? coverImage;

  final Fragment$SearchResultMedia$title? title;

  final Enum$MediaType? type;

  final Fragment$SearchResultMedia$startDate? startDate;

  final Enum$MediaFormat? format;

  final int? meanScore;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$startDate = startDate;
    _resultData['startDate'] = l$startDate?.toJson();
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$meanScore = meanScore;
    _resultData['meanScore'] = l$meanScore;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$coverImage = coverImage;
    final l$title = title;
    final l$type = type;
    final l$startDate = startDate;
    final l$format = format;
    final l$meanScore = meanScore;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$coverImage,
      l$title,
      l$type,
      l$startDate,
      l$format,
      l$meanScore,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultMedia ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$startDate = startDate;
    final lOther$startDate = other.startDate;
    if (l$startDate != lOther$startDate) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$meanScore = meanScore;
    final lOther$meanScore = other.meanScore;
    if (l$meanScore != lOther$meanScore) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultMedia
    on Fragment$SearchResultMedia {
  CopyWith$Fragment$SearchResultMedia<Fragment$SearchResultMedia>
      get copyWith => CopyWith$Fragment$SearchResultMedia(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultMedia<TRes> {
  factory CopyWith$Fragment$SearchResultMedia(
    Fragment$SearchResultMedia instance,
    TRes Function(Fragment$SearchResultMedia) then,
  ) = _CopyWithImpl$Fragment$SearchResultMedia;

  factory CopyWith$Fragment$SearchResultMedia.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultMedia;

  TRes call({
    int? id,
    Fragment$SearchResultMedia$coverImage? coverImage,
    Fragment$SearchResultMedia$title? title,
    Enum$MediaType? type,
    Fragment$SearchResultMedia$startDate? startDate,
    Enum$MediaFormat? format,
    int? meanScore,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultMedia$coverImage<TRes> get coverImage;
  CopyWith$Fragment$SearchResultMedia$title<TRes> get title;
  CopyWith$Fragment$SearchResultMedia$startDate<TRes> get startDate;
}

class _CopyWithImpl$Fragment$SearchResultMedia<TRes>
    implements CopyWith$Fragment$SearchResultMedia<TRes> {
  _CopyWithImpl$Fragment$SearchResultMedia(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultMedia _instance;

  final TRes Function(Fragment$SearchResultMedia) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? coverImage = _undefined,
    Object? title = _undefined,
    Object? type = _undefined,
    Object? startDate = _undefined,
    Object? format = _undefined,
    Object? meanScore = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultMedia(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$SearchResultMedia$coverImage?),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$SearchResultMedia$title?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        startDate: startDate == _undefined
            ? _instance.startDate
            : (startDate as Fragment$SearchResultMedia$startDate?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        meanScore:
            meanScore == _undefined ? _instance.meanScore : (meanScore as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultMedia$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$SearchResultMedia$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultMedia$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$SearchResultMedia$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$SearchResultMedia$title.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultMedia$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$SearchResultMedia$startDate<TRes> get startDate {
    final local$startDate = _instance.startDate;
    return local$startDate == null
        ? CopyWith$Fragment$SearchResultMedia$startDate.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultMedia$startDate(
            local$startDate, (e) => call(startDate: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultMedia<TRes>
    implements CopyWith$Fragment$SearchResultMedia<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultMedia(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$SearchResultMedia$coverImage? coverImage,
    Fragment$SearchResultMedia$title? title,
    Enum$MediaType? type,
    Fragment$SearchResultMedia$startDate? startDate,
    Enum$MediaFormat? format,
    int? meanScore,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultMedia$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$SearchResultMedia$coverImage.stub(_res);

  CopyWith$Fragment$SearchResultMedia$title<TRes> get title =>
      CopyWith$Fragment$SearchResultMedia$title.stub(_res);

  CopyWith$Fragment$SearchResultMedia$startDate<TRes> get startDate =>
      CopyWith$Fragment$SearchResultMedia$startDate.stub(_res);
}

const fragmentDefinitionSearchResultMedia = FragmentDefinitionNode(
  name: NameNode(value: 'SearchResultMedia'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Media'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'coverImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'title'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'type'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'startDate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'format'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'meanScore'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSearchResultMedia = DocumentNode(definitions: [
  fragmentDefinitionSearchResultMedia,
]);

extension ClientExtension$Fragment$SearchResultMedia on graphql.GraphQLClient {
  void writeFragment$SearchResultMedia({
    required Fragment$SearchResultMedia data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'SearchResultMedia',
            document: documentNodeFragmentSearchResultMedia,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$SearchResultMedia? readFragment$SearchResultMedia({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'SearchResultMedia',
          document: documentNodeFragmentSearchResultMedia,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$SearchResultMedia.fromJson(result);
  }
}

class Fragment$SearchResultMedia$coverImage {
  Fragment$SearchResultMedia$coverImage({
    this.large,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$SearchResultMedia$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultMedia$coverImage(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultMedia$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultMedia$coverImage
    on Fragment$SearchResultMedia$coverImage {
  CopyWith$Fragment$SearchResultMedia$coverImage<
          Fragment$SearchResultMedia$coverImage>
      get copyWith => CopyWith$Fragment$SearchResultMedia$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultMedia$coverImage<TRes> {
  factory CopyWith$Fragment$SearchResultMedia$coverImage(
    Fragment$SearchResultMedia$coverImage instance,
    TRes Function(Fragment$SearchResultMedia$coverImage) then,
  ) = _CopyWithImpl$Fragment$SearchResultMedia$coverImage;

  factory CopyWith$Fragment$SearchResultMedia$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultMedia$coverImage;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultMedia$coverImage<TRes>
    implements CopyWith$Fragment$SearchResultMedia$coverImage<TRes> {
  _CopyWithImpl$Fragment$SearchResultMedia$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultMedia$coverImage _instance;

  final TRes Function(Fragment$SearchResultMedia$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultMedia$coverImage(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultMedia$coverImage<TRes>
    implements CopyWith$Fragment$SearchResultMedia$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultMedia$coverImage(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultMedia$title {
  Fragment$SearchResultMedia$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$SearchResultMedia$title.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultMedia$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultMedia$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultMedia$title
    on Fragment$SearchResultMedia$title {
  CopyWith$Fragment$SearchResultMedia$title<Fragment$SearchResultMedia$title>
      get copyWith => CopyWith$Fragment$SearchResultMedia$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultMedia$title<TRes> {
  factory CopyWith$Fragment$SearchResultMedia$title(
    Fragment$SearchResultMedia$title instance,
    TRes Function(Fragment$SearchResultMedia$title) then,
  ) = _CopyWithImpl$Fragment$SearchResultMedia$title;

  factory CopyWith$Fragment$SearchResultMedia$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultMedia$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultMedia$title<TRes>
    implements CopyWith$Fragment$SearchResultMedia$title<TRes> {
  _CopyWithImpl$Fragment$SearchResultMedia$title(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultMedia$title _instance;

  final TRes Function(Fragment$SearchResultMedia$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultMedia$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultMedia$title<TRes>
    implements CopyWith$Fragment$SearchResultMedia$title<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultMedia$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultMedia$startDate {
  Fragment$SearchResultMedia$startDate({
    this.year,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$SearchResultMedia$startDate.fromJson(
      Map<String, dynamic> json) {
    final l$year = json['year'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultMedia$startDate(
      year: (l$year as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? year;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$year = year;
    _resultData['year'] = l$year;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$year = year;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$year,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultMedia$startDate ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultMedia$startDate
    on Fragment$SearchResultMedia$startDate {
  CopyWith$Fragment$SearchResultMedia$startDate<
          Fragment$SearchResultMedia$startDate>
      get copyWith => CopyWith$Fragment$SearchResultMedia$startDate(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultMedia$startDate<TRes> {
  factory CopyWith$Fragment$SearchResultMedia$startDate(
    Fragment$SearchResultMedia$startDate instance,
    TRes Function(Fragment$SearchResultMedia$startDate) then,
  ) = _CopyWithImpl$Fragment$SearchResultMedia$startDate;

  factory CopyWith$Fragment$SearchResultMedia$startDate.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultMedia$startDate;

  TRes call({
    int? year,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultMedia$startDate<TRes>
    implements CopyWith$Fragment$SearchResultMedia$startDate<TRes> {
  _CopyWithImpl$Fragment$SearchResultMedia$startDate(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultMedia$startDate _instance;

  final TRes Function(Fragment$SearchResultMedia$startDate) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? year = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultMedia$startDate(
        year: year == _undefined ? _instance.year : (year as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultMedia$startDate<TRes>
    implements CopyWith$Fragment$SearchResultMedia$startDate<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultMedia$startDate(this._res);

  TRes _res;

  call({
    int? year,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$Review {
  Fragment$Review({
    required this.id,
    this.summary,
    this.userRating,
    this.rating,
    this.ratingAmount,
    this.score,
    required this.createdAt,
    required this.updatedAt,
    this.body,
    this.user,
    this.media,
    this.$__typename = 'Review',
  });

  factory Fragment$Review.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$summary = json['summary'];
    final l$userRating = json['userRating'];
    final l$rating = json['rating'];
    final l$ratingAmount = json['ratingAmount'];
    final l$score = json['score'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$body = json['body'];
    final l$user = json['user'];
    final l$media = json['media'];
    final l$$__typename = json['__typename'];
    return Fragment$Review(
      id: (l$id as int),
      summary: (l$summary as String?),
      userRating: l$userRating == null
          ? null
          : fromJson$Enum$ReviewRating((l$userRating as String)),
      rating: (l$rating as int?),
      ratingAmount: (l$ratingAmount as int?),
      score: (l$score as int?),
      createdAt: (l$createdAt as int),
      updatedAt: (l$updatedAt as int),
      body: (l$body as String?),
      user: l$user == null
          ? null
          : Fragment$Review$user.fromJson((l$user as Map<String, dynamic>)),
      media: l$media == null
          ? null
          : Fragment$Review$media.fromJson((l$media as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String? summary;

  final Enum$ReviewRating? userRating;

  final int? rating;

  final int? ratingAmount;

  final int? score;

  final int createdAt;

  final int updatedAt;

  final String? body;

  final Fragment$Review$user? user;

  final Fragment$Review$media? media;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$summary = summary;
    _resultData['summary'] = l$summary;
    final l$userRating = userRating;
    _resultData['userRating'] =
        l$userRating == null ? null : toJson$Enum$ReviewRating(l$userRating);
    final l$rating = rating;
    _resultData['rating'] = l$rating;
    final l$ratingAmount = ratingAmount;
    _resultData['ratingAmount'] = l$ratingAmount;
    final l$score = score;
    _resultData['score'] = l$score;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt;
    final l$body = body;
    _resultData['body'] = l$body;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$summary = summary;
    final l$userRating = userRating;
    final l$rating = rating;
    final l$ratingAmount = ratingAmount;
    final l$score = score;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$body = body;
    final l$user = user;
    final l$media = media;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$summary,
      l$userRating,
      l$rating,
      l$ratingAmount,
      l$score,
      l$createdAt,
      l$updatedAt,
      l$body,
      l$user,
      l$media,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Review || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$summary = summary;
    final lOther$summary = other.summary;
    if (l$summary != lOther$summary) {
      return false;
    }
    final l$userRating = userRating;
    final lOther$userRating = other.userRating;
    if (l$userRating != lOther$userRating) {
      return false;
    }
    final l$rating = rating;
    final lOther$rating = other.rating;
    if (l$rating != lOther$rating) {
      return false;
    }
    final l$ratingAmount = ratingAmount;
    final lOther$ratingAmount = other.ratingAmount;
    if (l$ratingAmount != lOther$ratingAmount) {
      return false;
    }
    final l$score = score;
    final lOther$score = other.score;
    if (l$score != lOther$score) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$body = body;
    final lOther$body = other.body;
    if (l$body != lOther$body) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Review on Fragment$Review {
  CopyWith$Fragment$Review<Fragment$Review> get copyWith =>
      CopyWith$Fragment$Review(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Review<TRes> {
  factory CopyWith$Fragment$Review(
    Fragment$Review instance,
    TRes Function(Fragment$Review) then,
  ) = _CopyWithImpl$Fragment$Review;

  factory CopyWith$Fragment$Review.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Review;

  TRes call({
    int? id,
    String? summary,
    Enum$ReviewRating? userRating,
    int? rating,
    int? ratingAmount,
    int? score,
    int? createdAt,
    int? updatedAt,
    String? body,
    Fragment$Review$user? user,
    Fragment$Review$media? media,
    String? $__typename,
  });
  CopyWith$Fragment$Review$user<TRes> get user;
  CopyWith$Fragment$Review$media<TRes> get media;
}

class _CopyWithImpl$Fragment$Review<TRes>
    implements CopyWith$Fragment$Review<TRes> {
  _CopyWithImpl$Fragment$Review(
    this._instance,
    this._then,
  );

  final Fragment$Review _instance;

  final TRes Function(Fragment$Review) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? summary = _undefined,
    Object? userRating = _undefined,
    Object? rating = _undefined,
    Object? ratingAmount = _undefined,
    Object? score = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? body = _undefined,
    Object? user = _undefined,
    Object? media = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Review(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        summary:
            summary == _undefined ? _instance.summary : (summary as String?),
        userRating: userRating == _undefined
            ? _instance.userRating
            : (userRating as Enum$ReviewRating?),
        rating: rating == _undefined ? _instance.rating : (rating as int?),
        ratingAmount: ratingAmount == _undefined
            ? _instance.ratingAmount
            : (ratingAmount as int?),
        score: score == _undefined ? _instance.score : (score as int?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as int),
        body: body == _undefined ? _instance.body : (body as String?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$Review$user?),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$Review$media?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$Review$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$Review$user.stub(_then(_instance))
        : CopyWith$Fragment$Review$user(local$user, (e) => call(user: e));
  }

  CopyWith$Fragment$Review$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$Review$media.stub(_then(_instance))
        : CopyWith$Fragment$Review$media(local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$Review<TRes>
    implements CopyWith$Fragment$Review<TRes> {
  _CopyWithStubImpl$Fragment$Review(this._res);

  TRes _res;

  call({
    int? id,
    String? summary,
    Enum$ReviewRating? userRating,
    int? rating,
    int? ratingAmount,
    int? score,
    int? createdAt,
    int? updatedAt,
    String? body,
    Fragment$Review$user? user,
    Fragment$Review$media? media,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$Review$user<TRes> get user =>
      CopyWith$Fragment$Review$user.stub(_res);

  CopyWith$Fragment$Review$media<TRes> get media =>
      CopyWith$Fragment$Review$media.stub(_res);
}

const fragmentDefinitionReview = FragmentDefinitionNode(
  name: NameNode(value: 'Review'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Review'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'summary'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'userRating'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'rating'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'ratingAmount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'score'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'updatedAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'body'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'bannerImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentReview = DocumentNode(definitions: [
  fragmentDefinitionReview,
]);

extension ClientExtension$Fragment$Review on graphql.GraphQLClient {
  void writeFragment$Review({
    required Fragment$Review data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'Review',
            document: documentNodeFragmentReview,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$Review? readFragment$Review({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'Review',
          document: documentNodeFragmentReview,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$Review.fromJson(result);
  }
}

class Fragment$Review$user {
  Fragment$Review$user({
    required this.name,
    this.avatar,
    required this.id,
    this.$__typename = 'User',
  });

  factory Fragment$Review$user.fromJson(Map<String, dynamic> json) {
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$Review$user(
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$Review$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final String name;

  final Fragment$Review$user$avatar? avatar;

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$name = name;
    final l$avatar = avatar;
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$name,
      l$avatar,
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Review$user || runtimeType != other.runtimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Review$user on Fragment$Review$user {
  CopyWith$Fragment$Review$user<Fragment$Review$user> get copyWith =>
      CopyWith$Fragment$Review$user(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Review$user<TRes> {
  factory CopyWith$Fragment$Review$user(
    Fragment$Review$user instance,
    TRes Function(Fragment$Review$user) then,
  ) = _CopyWithImpl$Fragment$Review$user;

  factory CopyWith$Fragment$Review$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Review$user;

  TRes call({
    String? name,
    Fragment$Review$user$avatar? avatar,
    int? id,
    String? $__typename,
  });
  CopyWith$Fragment$Review$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$Review$user<TRes>
    implements CopyWith$Fragment$Review$user<TRes> {
  _CopyWithImpl$Fragment$Review$user(
    this._instance,
    this._then,
  );

  final Fragment$Review$user _instance;

  final TRes Function(Fragment$Review$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Review$user(
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$Review$user$avatar?),
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$Review$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$Review$user$avatar.stub(_then(_instance))
        : CopyWith$Fragment$Review$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$Review$user<TRes>
    implements CopyWith$Fragment$Review$user<TRes> {
  _CopyWithStubImpl$Fragment$Review$user(this._res);

  TRes _res;

  call({
    String? name,
    Fragment$Review$user$avatar? avatar,
    int? id,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$Review$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$Review$user$avatar.stub(_res);
}

class Fragment$Review$user$avatar {
  Fragment$Review$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$Review$user$avatar.fromJson(Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$Review$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Review$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Review$user$avatar
    on Fragment$Review$user$avatar {
  CopyWith$Fragment$Review$user$avatar<Fragment$Review$user$avatar>
      get copyWith => CopyWith$Fragment$Review$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$Review$user$avatar<TRes> {
  factory CopyWith$Fragment$Review$user$avatar(
    Fragment$Review$user$avatar instance,
    TRes Function(Fragment$Review$user$avatar) then,
  ) = _CopyWithImpl$Fragment$Review$user$avatar;

  factory CopyWith$Fragment$Review$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Review$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$Review$user$avatar<TRes>
    implements CopyWith$Fragment$Review$user$avatar<TRes> {
  _CopyWithImpl$Fragment$Review$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$Review$user$avatar _instance;

  final TRes Function(Fragment$Review$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Review$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$Review$user$avatar<TRes>
    implements CopyWith$Fragment$Review$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$Review$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$Review$media {
  Fragment$Review$media({
    this.bannerImage,
    this.title,
    this.$__typename = 'Media',
  });

  factory Fragment$Review$media.fromJson(Map<String, dynamic> json) {
    final l$bannerImage = json['bannerImage'];
    final l$title = json['title'];
    final l$$__typename = json['__typename'];
    return Fragment$Review$media(
      bannerImage: (l$bannerImage as String?),
      title: l$title == null
          ? null
          : Fragment$Review$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String? bannerImage;

  final Fragment$Review$media$title? title;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$bannerImage = bannerImage;
    _resultData['bannerImage'] = l$bannerImage;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$bannerImage = bannerImage;
    final l$title = title;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$bannerImage,
      l$title,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Review$media || runtimeType != other.runtimeType) {
      return false;
    }
    final l$bannerImage = bannerImage;
    final lOther$bannerImage = other.bannerImage;
    if (l$bannerImage != lOther$bannerImage) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Review$media on Fragment$Review$media {
  CopyWith$Fragment$Review$media<Fragment$Review$media> get copyWith =>
      CopyWith$Fragment$Review$media(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Review$media<TRes> {
  factory CopyWith$Fragment$Review$media(
    Fragment$Review$media instance,
    TRes Function(Fragment$Review$media) then,
  ) = _CopyWithImpl$Fragment$Review$media;

  factory CopyWith$Fragment$Review$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Review$media;

  TRes call({
    String? bannerImage,
    Fragment$Review$media$title? title,
    String? $__typename,
  });
  CopyWith$Fragment$Review$media$title<TRes> get title;
}

class _CopyWithImpl$Fragment$Review$media<TRes>
    implements CopyWith$Fragment$Review$media<TRes> {
  _CopyWithImpl$Fragment$Review$media(
    this._instance,
    this._then,
  );

  final Fragment$Review$media _instance;

  final TRes Function(Fragment$Review$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bannerImage = _undefined,
    Object? title = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Review$media(
        bannerImage: bannerImage == _undefined
            ? _instance.bannerImage
            : (bannerImage as String?),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$Review$media$title?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$Review$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$Review$media$title.stub(_then(_instance))
        : CopyWith$Fragment$Review$media$title(
            local$title, (e) => call(title: e));
  }
}

class _CopyWithStubImpl$Fragment$Review$media<TRes>
    implements CopyWith$Fragment$Review$media<TRes> {
  _CopyWithStubImpl$Fragment$Review$media(this._res);

  TRes _res;

  call({
    String? bannerImage,
    Fragment$Review$media$title? title,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$Review$media$title<TRes> get title =>
      CopyWith$Fragment$Review$media$title.stub(_res);
}

class Fragment$Review$media$title {
  Fragment$Review$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$Review$media$title.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$Review$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Review$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Review$media$title
    on Fragment$Review$media$title {
  CopyWith$Fragment$Review$media$title<Fragment$Review$media$title>
      get copyWith => CopyWith$Fragment$Review$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$Review$media$title<TRes> {
  factory CopyWith$Fragment$Review$media$title(
    Fragment$Review$media$title instance,
    TRes Function(Fragment$Review$media$title) then,
  ) = _CopyWithImpl$Fragment$Review$media$title;

  factory CopyWith$Fragment$Review$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Review$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$Review$media$title<TRes>
    implements CopyWith$Fragment$Review$media$title<TRes> {
  _CopyWithImpl$Fragment$Review$media$title(
    this._instance,
    this._then,
  );

  final Fragment$Review$media$title _instance;

  final TRes Function(Fragment$Review$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Review$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$Review$media$title<TRes>
    implements CopyWith$Fragment$Review$media$title<TRes> {
  _CopyWithStubImpl$Fragment$Review$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ReviewDetail {
  Fragment$ReviewDetail({
    required this.id,
    this.summary,
    this.userRating,
    this.rating,
    this.ratingAmount,
    this.body,
    this.score,
    required this.mediaId,
    this.mediaType,
    required this.createdAt,
    required this.updatedAt,
    this.user,
    this.media,
    this.$__typename = 'Review',
  });

  factory Fragment$ReviewDetail.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$summary = json['summary'];
    final l$userRating = json['userRating'];
    final l$rating = json['rating'];
    final l$ratingAmount = json['ratingAmount'];
    final l$body = json['body'];
    final l$score = json['score'];
    final l$mediaId = json['mediaId'];
    final l$mediaType = json['mediaType'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$user = json['user'];
    final l$media = json['media'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail(
      id: (l$id as int),
      summary: (l$summary as String?),
      userRating: l$userRating == null
          ? null
          : fromJson$Enum$ReviewRating((l$userRating as String)),
      rating: (l$rating as int?),
      ratingAmount: (l$ratingAmount as int?),
      body: (l$body as String?),
      score: (l$score as int?),
      mediaId: (l$mediaId as int),
      mediaType: l$mediaType == null
          ? null
          : fromJson$Enum$MediaType((l$mediaType as String)),
      createdAt: (l$createdAt as int),
      updatedAt: (l$updatedAt as int),
      user: l$user == null
          ? null
          : Fragment$ReviewDetail$user.fromJson(
              (l$user as Map<String, dynamic>)),
      media: l$media == null
          ? null
          : Fragment$ReviewDetail$media.fromJson(
              (l$media as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String? summary;

  final Enum$ReviewRating? userRating;

  final int? rating;

  final int? ratingAmount;

  final String? body;

  final int? score;

  final int mediaId;

  final Enum$MediaType? mediaType;

  final int createdAt;

  final int updatedAt;

  final Fragment$ReviewDetail$user? user;

  final Fragment$ReviewDetail$media? media;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$summary = summary;
    _resultData['summary'] = l$summary;
    final l$userRating = userRating;
    _resultData['userRating'] =
        l$userRating == null ? null : toJson$Enum$ReviewRating(l$userRating);
    final l$rating = rating;
    _resultData['rating'] = l$rating;
    final l$ratingAmount = ratingAmount;
    _resultData['ratingAmount'] = l$ratingAmount;
    final l$body = body;
    _resultData['body'] = l$body;
    final l$score = score;
    _resultData['score'] = l$score;
    final l$mediaId = mediaId;
    _resultData['mediaId'] = l$mediaId;
    final l$mediaType = mediaType;
    _resultData['mediaType'] =
        l$mediaType == null ? null : toJson$Enum$MediaType(l$mediaType);
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$summary = summary;
    final l$userRating = userRating;
    final l$rating = rating;
    final l$ratingAmount = ratingAmount;
    final l$body = body;
    final l$score = score;
    final l$mediaId = mediaId;
    final l$mediaType = mediaType;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$user = user;
    final l$media = media;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$summary,
      l$userRating,
      l$rating,
      l$ratingAmount,
      l$body,
      l$score,
      l$mediaId,
      l$mediaType,
      l$createdAt,
      l$updatedAt,
      l$user,
      l$media,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$summary = summary;
    final lOther$summary = other.summary;
    if (l$summary != lOther$summary) {
      return false;
    }
    final l$userRating = userRating;
    final lOther$userRating = other.userRating;
    if (l$userRating != lOther$userRating) {
      return false;
    }
    final l$rating = rating;
    final lOther$rating = other.rating;
    if (l$rating != lOther$rating) {
      return false;
    }
    final l$ratingAmount = ratingAmount;
    final lOther$ratingAmount = other.ratingAmount;
    if (l$ratingAmount != lOther$ratingAmount) {
      return false;
    }
    final l$body = body;
    final lOther$body = other.body;
    if (l$body != lOther$body) {
      return false;
    }
    final l$score = score;
    final lOther$score = other.score;
    if (l$score != lOther$score) {
      return false;
    }
    final l$mediaId = mediaId;
    final lOther$mediaId = other.mediaId;
    if (l$mediaId != lOther$mediaId) {
      return false;
    }
    final l$mediaType = mediaType;
    final lOther$mediaType = other.mediaType;
    if (l$mediaType != lOther$mediaType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail on Fragment$ReviewDetail {
  CopyWith$Fragment$ReviewDetail<Fragment$ReviewDetail> get copyWith =>
      CopyWith$Fragment$ReviewDetail(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$ReviewDetail<TRes> {
  factory CopyWith$Fragment$ReviewDetail(
    Fragment$ReviewDetail instance,
    TRes Function(Fragment$ReviewDetail) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail;

  factory CopyWith$Fragment$ReviewDetail.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail;

  TRes call({
    int? id,
    String? summary,
    Enum$ReviewRating? userRating,
    int? rating,
    int? ratingAmount,
    String? body,
    int? score,
    int? mediaId,
    Enum$MediaType? mediaType,
    int? createdAt,
    int? updatedAt,
    Fragment$ReviewDetail$user? user,
    Fragment$ReviewDetail$media? media,
    String? $__typename,
  });
  CopyWith$Fragment$ReviewDetail$user<TRes> get user;
  CopyWith$Fragment$ReviewDetail$media<TRes> get media;
}

class _CopyWithImpl$Fragment$ReviewDetail<TRes>
    implements CopyWith$Fragment$ReviewDetail<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail _instance;

  final TRes Function(Fragment$ReviewDetail) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? summary = _undefined,
    Object? userRating = _undefined,
    Object? rating = _undefined,
    Object? ratingAmount = _undefined,
    Object? body = _undefined,
    Object? score = _undefined,
    Object? mediaId = _undefined,
    Object? mediaType = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? user = _undefined,
    Object? media = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        summary:
            summary == _undefined ? _instance.summary : (summary as String?),
        userRating: userRating == _undefined
            ? _instance.userRating
            : (userRating as Enum$ReviewRating?),
        rating: rating == _undefined ? _instance.rating : (rating as int?),
        ratingAmount: ratingAmount == _undefined
            ? _instance.ratingAmount
            : (ratingAmount as int?),
        body: body == _undefined ? _instance.body : (body as String?),
        score: score == _undefined ? _instance.score : (score as int?),
        mediaId: mediaId == _undefined || mediaId == null
            ? _instance.mediaId
            : (mediaId as int),
        mediaType: mediaType == _undefined
            ? _instance.mediaType
            : (mediaType as Enum$MediaType?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ReviewDetail$user?),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$ReviewDetail$media?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ReviewDetail$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ReviewDetail$user.stub(_then(_instance))
        : CopyWith$Fragment$ReviewDetail$user(local$user, (e) => call(user: e));
  }

  CopyWith$Fragment$ReviewDetail$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$ReviewDetail$media.stub(_then(_instance))
        : CopyWith$Fragment$ReviewDetail$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$ReviewDetail<TRes>
    implements CopyWith$Fragment$ReviewDetail<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail(this._res);

  TRes _res;

  call({
    int? id,
    String? summary,
    Enum$ReviewRating? userRating,
    int? rating,
    int? ratingAmount,
    String? body,
    int? score,
    int? mediaId,
    Enum$MediaType? mediaType,
    int? createdAt,
    int? updatedAt,
    Fragment$ReviewDetail$user? user,
    Fragment$ReviewDetail$media? media,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ReviewDetail$user<TRes> get user =>
      CopyWith$Fragment$ReviewDetail$user.stub(_res);

  CopyWith$Fragment$ReviewDetail$media<TRes> get media =>
      CopyWith$Fragment$ReviewDetail$media.stub(_res);
}

const fragmentDefinitionReviewDetail = FragmentDefinitionNode(
  name: NameNode(value: 'ReviewDetail'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Review'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'summary'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'userRating'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'rating'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'ratingAmount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'body'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'score'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'mediaId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'mediaType'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'updatedAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'extraLarge'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentReviewDetail = DocumentNode(definitions: [
  fragmentDefinitionReviewDetail,
]);

extension ClientExtension$Fragment$ReviewDetail on graphql.GraphQLClient {
  void writeFragment$ReviewDetail({
    required Fragment$ReviewDetail data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ReviewDetail',
            document: documentNodeFragmentReviewDetail,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ReviewDetail? readFragment$ReviewDetail({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ReviewDetail',
          document: documentNodeFragmentReviewDetail,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$ReviewDetail.fromJson(result);
  }
}

class Fragment$ReviewDetail$user {
  Fragment$ReviewDetail$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ReviewDetail$user.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ReviewDetail$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ReviewDetail$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail$user
    on Fragment$ReviewDetail$user {
  CopyWith$Fragment$ReviewDetail$user<Fragment$ReviewDetail$user>
      get copyWith => CopyWith$Fragment$ReviewDetail$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ReviewDetail$user<TRes> {
  factory CopyWith$Fragment$ReviewDetail$user(
    Fragment$ReviewDetail$user instance,
    TRes Function(Fragment$ReviewDetail$user) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail$user;

  factory CopyWith$Fragment$ReviewDetail$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ReviewDetail$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ReviewDetail$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ReviewDetail$user<TRes>
    implements CopyWith$Fragment$ReviewDetail$user<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail$user(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail$user _instance;

  final TRes Function(Fragment$ReviewDetail$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ReviewDetail$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ReviewDetail$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ReviewDetail$user$avatar.stub(_then(_instance))
        : CopyWith$Fragment$ReviewDetail$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ReviewDetail$user<TRes>
    implements CopyWith$Fragment$ReviewDetail$user<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ReviewDetail$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ReviewDetail$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ReviewDetail$user$avatar.stub(_res);
}

class Fragment$ReviewDetail$user$avatar {
  Fragment$ReviewDetail$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ReviewDetail$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail$user$avatar
    on Fragment$ReviewDetail$user$avatar {
  CopyWith$Fragment$ReviewDetail$user$avatar<Fragment$ReviewDetail$user$avatar>
      get copyWith => CopyWith$Fragment$ReviewDetail$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ReviewDetail$user$avatar<TRes> {
  factory CopyWith$Fragment$ReviewDetail$user$avatar(
    Fragment$ReviewDetail$user$avatar instance,
    TRes Function(Fragment$ReviewDetail$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail$user$avatar;

  factory CopyWith$Fragment$ReviewDetail$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ReviewDetail$user$avatar<TRes>
    implements CopyWith$Fragment$ReviewDetail$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail$user$avatar _instance;

  final TRes Function(Fragment$ReviewDetail$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ReviewDetail$user$avatar<TRes>
    implements CopyWith$Fragment$ReviewDetail$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ReviewDetail$media {
  Fragment$ReviewDetail$media({
    this.title,
    this.coverImage,
    this.$__typename = 'Media',
  });

  factory Fragment$ReviewDetail$media.fromJson(Map<String, dynamic> json) {
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail$media(
      title: l$title == null
          ? null
          : Fragment$ReviewDetail$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$ReviewDetail$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Fragment$ReviewDetail$media$title? title;

  final Fragment$ReviewDetail$media$coverImage? coverImage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$title = title;
    final l$coverImage = coverImage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$title,
      l$coverImage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail$media
    on Fragment$ReviewDetail$media {
  CopyWith$Fragment$ReviewDetail$media<Fragment$ReviewDetail$media>
      get copyWith => CopyWith$Fragment$ReviewDetail$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ReviewDetail$media<TRes> {
  factory CopyWith$Fragment$ReviewDetail$media(
    Fragment$ReviewDetail$media instance,
    TRes Function(Fragment$ReviewDetail$media) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail$media;

  factory CopyWith$Fragment$ReviewDetail$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail$media;

  TRes call({
    Fragment$ReviewDetail$media$title? title,
    Fragment$ReviewDetail$media$coverImage? coverImage,
    String? $__typename,
  });
  CopyWith$Fragment$ReviewDetail$media$title<TRes> get title;
  CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> get coverImage;
}

class _CopyWithImpl$Fragment$ReviewDetail$media<TRes>
    implements CopyWith$Fragment$ReviewDetail$media<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail$media(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail$media _instance;

  final TRes Function(Fragment$ReviewDetail$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail$media(
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$ReviewDetail$media$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$ReviewDetail$media$coverImage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ReviewDetail$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$ReviewDetail$media$title.stub(_then(_instance))
        : CopyWith$Fragment$ReviewDetail$media$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$ReviewDetail$media$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$ReviewDetail$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$ReviewDetail$media<TRes>
    implements CopyWith$Fragment$ReviewDetail$media<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail$media(this._res);

  TRes _res;

  call({
    Fragment$ReviewDetail$media$title? title,
    Fragment$ReviewDetail$media$coverImage? coverImage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ReviewDetail$media$title<TRes> get title =>
      CopyWith$Fragment$ReviewDetail$media$title.stub(_res);

  CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$ReviewDetail$media$coverImage.stub(_res);
}

class Fragment$ReviewDetail$media$title {
  Fragment$ReviewDetail$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$ReviewDetail$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail$media$title
    on Fragment$ReviewDetail$media$title {
  CopyWith$Fragment$ReviewDetail$media$title<Fragment$ReviewDetail$media$title>
      get copyWith => CopyWith$Fragment$ReviewDetail$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ReviewDetail$media$title<TRes> {
  factory CopyWith$Fragment$ReviewDetail$media$title(
    Fragment$ReviewDetail$media$title instance,
    TRes Function(Fragment$ReviewDetail$media$title) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail$media$title;

  factory CopyWith$Fragment$ReviewDetail$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ReviewDetail$media$title<TRes>
    implements CopyWith$Fragment$ReviewDetail$media$title<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail$media$title(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail$media$title _instance;

  final TRes Function(Fragment$ReviewDetail$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ReviewDetail$media$title<TRes>
    implements CopyWith$Fragment$ReviewDetail$media$title<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ReviewDetail$media$coverImage {
  Fragment$ReviewDetail$media$coverImage({
    this.extraLarge,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$ReviewDetail$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$extraLarge = json['extraLarge'];
    final l$$__typename = json['__typename'];
    return Fragment$ReviewDetail$media$coverImage(
      extraLarge: (l$extraLarge as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? extraLarge;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$extraLarge = extraLarge;
    _resultData['extraLarge'] = l$extraLarge;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$extraLarge = extraLarge;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$extraLarge,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ReviewDetail$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$extraLarge = extraLarge;
    final lOther$extraLarge = other.extraLarge;
    if (l$extraLarge != lOther$extraLarge) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ReviewDetail$media$coverImage
    on Fragment$ReviewDetail$media$coverImage {
  CopyWith$Fragment$ReviewDetail$media$coverImage<
          Fragment$ReviewDetail$media$coverImage>
      get copyWith => CopyWith$Fragment$ReviewDetail$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> {
  factory CopyWith$Fragment$ReviewDetail$media$coverImage(
    Fragment$ReviewDetail$media$coverImage instance,
    TRes Function(Fragment$ReviewDetail$media$coverImage) then,
  ) = _CopyWithImpl$Fragment$ReviewDetail$media$coverImage;

  factory CopyWith$Fragment$ReviewDetail$media$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ReviewDetail$media$coverImage;

  TRes call({
    String? extraLarge,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ReviewDetail$media$coverImage<TRes>
    implements CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> {
  _CopyWithImpl$Fragment$ReviewDetail$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$ReviewDetail$media$coverImage _instance;

  final TRes Function(Fragment$ReviewDetail$media$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? extraLarge = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ReviewDetail$media$coverImage(
        extraLarge: extraLarge == _undefined
            ? _instance.extraLarge
            : (extraLarge as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ReviewDetail$media$coverImage<TRes>
    implements CopyWith$Fragment$ReviewDetail$media$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$ReviewDetail$media$coverImage(this._res);

  TRes _res;

  call({
    String? extraLarge,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultCharacter {
  Fragment$SearchResultCharacter({
    required this.id,
    this.name,
    this.image,
    this.favourites,
    this.$__typename = 'Character',
  });

  factory Fragment$SearchResultCharacter.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$image = json['image'];
    final l$favourites = json['favourites'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultCharacter(
      id: (l$id as int),
      name: l$name == null
          ? null
          : Fragment$SearchResultCharacter$name.fromJson(
              (l$name as Map<String, dynamic>)),
      image: l$image == null
          ? null
          : Fragment$SearchResultCharacter$image.fromJson(
              (l$image as Map<String, dynamic>)),
      favourites: (l$favourites as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$SearchResultCharacter$name? name;

  final Fragment$SearchResultCharacter$image? image;

  final int? favourites;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name?.toJson();
    final l$image = image;
    _resultData['image'] = l$image?.toJson();
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$image = image;
    final l$favourites = favourites;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$image,
      l$favourites,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultCharacter ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$image = image;
    final lOther$image = other.image;
    if (l$image != lOther$image) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultCharacter
    on Fragment$SearchResultCharacter {
  CopyWith$Fragment$SearchResultCharacter<Fragment$SearchResultCharacter>
      get copyWith => CopyWith$Fragment$SearchResultCharacter(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultCharacter<TRes> {
  factory CopyWith$Fragment$SearchResultCharacter(
    Fragment$SearchResultCharacter instance,
    TRes Function(Fragment$SearchResultCharacter) then,
  ) = _CopyWithImpl$Fragment$SearchResultCharacter;

  factory CopyWith$Fragment$SearchResultCharacter.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultCharacter;

  TRes call({
    int? id,
    Fragment$SearchResultCharacter$name? name,
    Fragment$SearchResultCharacter$image? image,
    int? favourites,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultCharacter$name<TRes> get name;
  CopyWith$Fragment$SearchResultCharacter$image<TRes> get image;
}

class _CopyWithImpl$Fragment$SearchResultCharacter<TRes>
    implements CopyWith$Fragment$SearchResultCharacter<TRes> {
  _CopyWithImpl$Fragment$SearchResultCharacter(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultCharacter _instance;

  final TRes Function(Fragment$SearchResultCharacter) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? image = _undefined,
    Object? favourites = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultCharacter(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined
            ? _instance.name
            : (name as Fragment$SearchResultCharacter$name?),
        image: image == _undefined
            ? _instance.image
            : (image as Fragment$SearchResultCharacter$image?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultCharacter$name<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Fragment$SearchResultCharacter$name.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultCharacter$name(
            local$name, (e) => call(name: e));
  }

  CopyWith$Fragment$SearchResultCharacter$image<TRes> get image {
    final local$image = _instance.image;
    return local$image == null
        ? CopyWith$Fragment$SearchResultCharacter$image.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultCharacter$image(
            local$image, (e) => call(image: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultCharacter<TRes>
    implements CopyWith$Fragment$SearchResultCharacter<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultCharacter(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$SearchResultCharacter$name? name,
    Fragment$SearchResultCharacter$image? image,
    int? favourites,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultCharacter$name<TRes> get name =>
      CopyWith$Fragment$SearchResultCharacter$name.stub(_res);

  CopyWith$Fragment$SearchResultCharacter$image<TRes> get image =>
      CopyWith$Fragment$SearchResultCharacter$image.stub(_res);
}

const fragmentDefinitionSearchResultCharacter = FragmentDefinitionNode(
  name: NameNode(value: 'SearchResultCharacter'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Character'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'image'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSearchResultCharacter = DocumentNode(definitions: [
  fragmentDefinitionSearchResultCharacter,
]);

extension ClientExtension$Fragment$SearchResultCharacter
    on graphql.GraphQLClient {
  void writeFragment$SearchResultCharacter({
    required Fragment$SearchResultCharacter data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'SearchResultCharacter',
            document: documentNodeFragmentSearchResultCharacter,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$SearchResultCharacter? readFragment$SearchResultCharacter({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'SearchResultCharacter',
          document: documentNodeFragmentSearchResultCharacter,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$SearchResultCharacter.fromJson(result);
  }
}

class Fragment$SearchResultCharacter$name {
  Fragment$SearchResultCharacter$name({
    this.userPreferred,
    this.$__typename = 'CharacterName',
  });

  factory Fragment$SearchResultCharacter$name.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultCharacter$name(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultCharacter$name ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultCharacter$name
    on Fragment$SearchResultCharacter$name {
  CopyWith$Fragment$SearchResultCharacter$name<
          Fragment$SearchResultCharacter$name>
      get copyWith => CopyWith$Fragment$SearchResultCharacter$name(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultCharacter$name<TRes> {
  factory CopyWith$Fragment$SearchResultCharacter$name(
    Fragment$SearchResultCharacter$name instance,
    TRes Function(Fragment$SearchResultCharacter$name) then,
  ) = _CopyWithImpl$Fragment$SearchResultCharacter$name;

  factory CopyWith$Fragment$SearchResultCharacter$name.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultCharacter$name;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultCharacter$name<TRes>
    implements CopyWith$Fragment$SearchResultCharacter$name<TRes> {
  _CopyWithImpl$Fragment$SearchResultCharacter$name(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultCharacter$name _instance;

  final TRes Function(Fragment$SearchResultCharacter$name) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultCharacter$name(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultCharacter$name<TRes>
    implements CopyWith$Fragment$SearchResultCharacter$name<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultCharacter$name(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultCharacter$image {
  Fragment$SearchResultCharacter$image({
    this.large,
    this.$__typename = 'CharacterImage',
  });

  factory Fragment$SearchResultCharacter$image.fromJson(
      Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultCharacter$image(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultCharacter$image ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultCharacter$image
    on Fragment$SearchResultCharacter$image {
  CopyWith$Fragment$SearchResultCharacter$image<
          Fragment$SearchResultCharacter$image>
      get copyWith => CopyWith$Fragment$SearchResultCharacter$image(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultCharacter$image<TRes> {
  factory CopyWith$Fragment$SearchResultCharacter$image(
    Fragment$SearchResultCharacter$image instance,
    TRes Function(Fragment$SearchResultCharacter$image) then,
  ) = _CopyWithImpl$Fragment$SearchResultCharacter$image;

  factory CopyWith$Fragment$SearchResultCharacter$image.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultCharacter$image;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultCharacter$image<TRes>
    implements CopyWith$Fragment$SearchResultCharacter$image<TRes> {
  _CopyWithImpl$Fragment$SearchResultCharacter$image(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultCharacter$image _instance;

  final TRes Function(Fragment$SearchResultCharacter$image) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultCharacter$image(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultCharacter$image<TRes>
    implements CopyWith$Fragment$SearchResultCharacter$image<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultCharacter$image(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultStaff {
  Fragment$SearchResultStaff({
    required this.id,
    this.name,
    this.image,
    this.favourites,
    this.$__typename = 'Staff',
  });

  factory Fragment$SearchResultStaff.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$image = json['image'];
    final l$favourites = json['favourites'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStaff(
      id: (l$id as int),
      name: l$name == null
          ? null
          : Fragment$SearchResultStaff$name.fromJson(
              (l$name as Map<String, dynamic>)),
      image: l$image == null
          ? null
          : Fragment$SearchResultStaff$image.fromJson(
              (l$image as Map<String, dynamic>)),
      favourites: (l$favourites as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$SearchResultStaff$name? name;

  final Fragment$SearchResultStaff$image? image;

  final int? favourites;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name?.toJson();
    final l$image = image;
    _resultData['image'] = l$image?.toJson();
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$image = image;
    final l$favourites = favourites;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$image,
      l$favourites,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStaff ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$image = image;
    final lOther$image = other.image;
    if (l$image != lOther$image) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStaff
    on Fragment$SearchResultStaff {
  CopyWith$Fragment$SearchResultStaff<Fragment$SearchResultStaff>
      get copyWith => CopyWith$Fragment$SearchResultStaff(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStaff<TRes> {
  factory CopyWith$Fragment$SearchResultStaff(
    Fragment$SearchResultStaff instance,
    TRes Function(Fragment$SearchResultStaff) then,
  ) = _CopyWithImpl$Fragment$SearchResultStaff;

  factory CopyWith$Fragment$SearchResultStaff.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStaff;

  TRes call({
    int? id,
    Fragment$SearchResultStaff$name? name,
    Fragment$SearchResultStaff$image? image,
    int? favourites,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultStaff$name<TRes> get name;
  CopyWith$Fragment$SearchResultStaff$image<TRes> get image;
}

class _CopyWithImpl$Fragment$SearchResultStaff<TRes>
    implements CopyWith$Fragment$SearchResultStaff<TRes> {
  _CopyWithImpl$Fragment$SearchResultStaff(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStaff _instance;

  final TRes Function(Fragment$SearchResultStaff) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? image = _undefined,
    Object? favourites = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStaff(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined
            ? _instance.name
            : (name as Fragment$SearchResultStaff$name?),
        image: image == _undefined
            ? _instance.image
            : (image as Fragment$SearchResultStaff$image?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultStaff$name<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Fragment$SearchResultStaff$name.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultStaff$name(
            local$name, (e) => call(name: e));
  }

  CopyWith$Fragment$SearchResultStaff$image<TRes> get image {
    final local$image = _instance.image;
    return local$image == null
        ? CopyWith$Fragment$SearchResultStaff$image.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultStaff$image(
            local$image, (e) => call(image: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultStaff<TRes>
    implements CopyWith$Fragment$SearchResultStaff<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStaff(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$SearchResultStaff$name? name,
    Fragment$SearchResultStaff$image? image,
    int? favourites,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultStaff$name<TRes> get name =>
      CopyWith$Fragment$SearchResultStaff$name.stub(_res);

  CopyWith$Fragment$SearchResultStaff$image<TRes> get image =>
      CopyWith$Fragment$SearchResultStaff$image.stub(_res);
}

const fragmentDefinitionSearchResultStaff = FragmentDefinitionNode(
  name: NameNode(value: 'SearchResultStaff'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Staff'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'image'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSearchResultStaff = DocumentNode(definitions: [
  fragmentDefinitionSearchResultStaff,
]);

extension ClientExtension$Fragment$SearchResultStaff on graphql.GraphQLClient {
  void writeFragment$SearchResultStaff({
    required Fragment$SearchResultStaff data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'SearchResultStaff',
            document: documentNodeFragmentSearchResultStaff,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$SearchResultStaff? readFragment$SearchResultStaff({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'SearchResultStaff',
          document: documentNodeFragmentSearchResultStaff,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$SearchResultStaff.fromJson(result);
  }
}

class Fragment$SearchResultStaff$name {
  Fragment$SearchResultStaff$name({
    this.userPreferred,
    this.$__typename = 'StaffName',
  });

  factory Fragment$SearchResultStaff$name.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStaff$name(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStaff$name ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStaff$name
    on Fragment$SearchResultStaff$name {
  CopyWith$Fragment$SearchResultStaff$name<Fragment$SearchResultStaff$name>
      get copyWith => CopyWith$Fragment$SearchResultStaff$name(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStaff$name<TRes> {
  factory CopyWith$Fragment$SearchResultStaff$name(
    Fragment$SearchResultStaff$name instance,
    TRes Function(Fragment$SearchResultStaff$name) then,
  ) = _CopyWithImpl$Fragment$SearchResultStaff$name;

  factory CopyWith$Fragment$SearchResultStaff$name.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStaff$name;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultStaff$name<TRes>
    implements CopyWith$Fragment$SearchResultStaff$name<TRes> {
  _CopyWithImpl$Fragment$SearchResultStaff$name(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStaff$name _instance;

  final TRes Function(Fragment$SearchResultStaff$name) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStaff$name(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultStaff$name<TRes>
    implements CopyWith$Fragment$SearchResultStaff$name<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStaff$name(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultStaff$image {
  Fragment$SearchResultStaff$image({
    this.large,
    this.$__typename = 'StaffImage',
  });

  factory Fragment$SearchResultStaff$image.fromJson(Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStaff$image(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStaff$image ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStaff$image
    on Fragment$SearchResultStaff$image {
  CopyWith$Fragment$SearchResultStaff$image<Fragment$SearchResultStaff$image>
      get copyWith => CopyWith$Fragment$SearchResultStaff$image(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStaff$image<TRes> {
  factory CopyWith$Fragment$SearchResultStaff$image(
    Fragment$SearchResultStaff$image instance,
    TRes Function(Fragment$SearchResultStaff$image) then,
  ) = _CopyWithImpl$Fragment$SearchResultStaff$image;

  factory CopyWith$Fragment$SearchResultStaff$image.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStaff$image;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultStaff$image<TRes>
    implements CopyWith$Fragment$SearchResultStaff$image<TRes> {
  _CopyWithImpl$Fragment$SearchResultStaff$image(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStaff$image _instance;

  final TRes Function(Fragment$SearchResultStaff$image) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStaff$image(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultStaff$image<TRes>
    implements CopyWith$Fragment$SearchResultStaff$image<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStaff$image(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultStudio {
  Fragment$SearchResultStudio({
    required this.id,
    required this.name,
    this.favourites,
    this.media,
    this.$__typename = 'Studio',
  });

  factory Fragment$SearchResultStudio.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$favourites = json['favourites'];
    final l$media = json['media'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStudio(
      id: (l$id as int),
      name: (l$name as String),
      favourites: (l$favourites as int?),
      media: l$media == null
          ? null
          : Fragment$SearchResultStudio$media.fromJson(
              (l$media as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final int? favourites;

  final Fragment$SearchResultStudio$media? media;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$favourites = favourites;
    final l$media = media;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$favourites,
      l$media,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStudio ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStudio
    on Fragment$SearchResultStudio {
  CopyWith$Fragment$SearchResultStudio<Fragment$SearchResultStudio>
      get copyWith => CopyWith$Fragment$SearchResultStudio(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStudio<TRes> {
  factory CopyWith$Fragment$SearchResultStudio(
    Fragment$SearchResultStudio instance,
    TRes Function(Fragment$SearchResultStudio) then,
  ) = _CopyWithImpl$Fragment$SearchResultStudio;

  factory CopyWith$Fragment$SearchResultStudio.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStudio;

  TRes call({
    int? id,
    String? name,
    int? favourites,
    Fragment$SearchResultStudio$media? media,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultStudio$media<TRes> get media;
}

class _CopyWithImpl$Fragment$SearchResultStudio<TRes>
    implements CopyWith$Fragment$SearchResultStudio<TRes> {
  _CopyWithImpl$Fragment$SearchResultStudio(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStudio _instance;

  final TRes Function(Fragment$SearchResultStudio) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? favourites = _undefined,
    Object? media = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStudio(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$SearchResultStudio$media?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultStudio$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$SearchResultStudio$media.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultStudio$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultStudio<TRes>
    implements CopyWith$Fragment$SearchResultStudio<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStudio(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    int? favourites,
    Fragment$SearchResultStudio$media? media,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultStudio$media<TRes> get media =>
      CopyWith$Fragment$SearchResultStudio$media.stub(_res);
}

const fragmentDefinitionSearchResultStudio = FragmentDefinitionNode(
  name: NameNode(value: 'SearchResultStudio'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Studio'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [
        ArgumentNode(
          name: NameNode(value: 'perPage'),
          value: IntValueNode(value: '1'),
        ),
        ArgumentNode(
          name: NameNode(value: 'sort'),
          value: ListValueNode(values: [
            EnumValueNode(name: NameNode(value: 'TRENDING_DESC')),
            EnumValueNode(name: NameNode(value: 'POPULARITY_DESC')),
          ]),
        ),
      ],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'nodes'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'isAdult'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'coverImage'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: SelectionSetNode(selections: [
                FieldNode(
                  name: NameNode(value: 'large'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
                FieldNode(
                  name: NameNode(value: '__typename'),
                  alias: null,
                  arguments: [],
                  directives: [],
                  selectionSet: null,
                ),
              ]),
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSearchResultStudio = DocumentNode(definitions: [
  fragmentDefinitionSearchResultStudio,
]);

extension ClientExtension$Fragment$SearchResultStudio on graphql.GraphQLClient {
  void writeFragment$SearchResultStudio({
    required Fragment$SearchResultStudio data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'SearchResultStudio',
            document: documentNodeFragmentSearchResultStudio,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$SearchResultStudio? readFragment$SearchResultStudio({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'SearchResultStudio',
          document: documentNodeFragmentSearchResultStudio,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$SearchResultStudio.fromJson(result);
  }
}

class Fragment$SearchResultStudio$media {
  Fragment$SearchResultStudio$media({
    this.nodes,
    this.$__typename = 'MediaConnection',
  });

  factory Fragment$SearchResultStudio$media.fromJson(
      Map<String, dynamic> json) {
    final l$nodes = json['nodes'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStudio$media(
      nodes: (l$nodes as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$SearchResultStudio$media$nodes.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Fragment$SearchResultStudio$media$nodes?>? nodes;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$nodes = nodes;
    _resultData['nodes'] = l$nodes?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$nodes = nodes;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$nodes == null ? null : Object.hashAll(l$nodes.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStudio$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$nodes = nodes;
    final lOther$nodes = other.nodes;
    if (l$nodes != null && lOther$nodes != null) {
      if (l$nodes.length != lOther$nodes.length) {
        return false;
      }
      for (int i = 0; i < l$nodes.length; i++) {
        final l$nodes$entry = l$nodes[i];
        final lOther$nodes$entry = lOther$nodes[i];
        if (l$nodes$entry != lOther$nodes$entry) {
          return false;
        }
      }
    } else if (l$nodes != lOther$nodes) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStudio$media
    on Fragment$SearchResultStudio$media {
  CopyWith$Fragment$SearchResultStudio$media<Fragment$SearchResultStudio$media>
      get copyWith => CopyWith$Fragment$SearchResultStudio$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStudio$media<TRes> {
  factory CopyWith$Fragment$SearchResultStudio$media(
    Fragment$SearchResultStudio$media instance,
    TRes Function(Fragment$SearchResultStudio$media) then,
  ) = _CopyWithImpl$Fragment$SearchResultStudio$media;

  factory CopyWith$Fragment$SearchResultStudio$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStudio$media;

  TRes call({
    List<Fragment$SearchResultStudio$media$nodes?>? nodes,
    String? $__typename,
  });
  TRes nodes(
      Iterable<Fragment$SearchResultStudio$media$nodes?>? Function(
              Iterable<
                  CopyWith$Fragment$SearchResultStudio$media$nodes<
                      Fragment$SearchResultStudio$media$nodes>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$SearchResultStudio$media<TRes>
    implements CopyWith$Fragment$SearchResultStudio$media<TRes> {
  _CopyWithImpl$Fragment$SearchResultStudio$media(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStudio$media _instance;

  final TRes Function(Fragment$SearchResultStudio$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? nodes = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStudio$media(
        nodes: nodes == _undefined
            ? _instance.nodes
            : (nodes as List<Fragment$SearchResultStudio$media$nodes?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes nodes(
          Iterable<Fragment$SearchResultStudio$media$nodes?>? Function(
                  Iterable<
                      CopyWith$Fragment$SearchResultStudio$media$nodes<
                          Fragment$SearchResultStudio$media$nodes>?>?)
              _fn) =>
      call(
          nodes: _fn(_instance.nodes?.map((e) => e == null
              ? null
              : CopyWith$Fragment$SearchResultStudio$media$nodes(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Fragment$SearchResultStudio$media<TRes>
    implements CopyWith$Fragment$SearchResultStudio$media<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStudio$media(this._res);

  TRes _res;

  call({
    List<Fragment$SearchResultStudio$media$nodes?>? nodes,
    String? $__typename,
  }) =>
      _res;

  nodes(_fn) => _res;
}

class Fragment$SearchResultStudio$media$nodes {
  Fragment$SearchResultStudio$media$nodes({
    this.isAdult,
    this.coverImage,
    this.$__typename = 'Media',
  });

  factory Fragment$SearchResultStudio$media$nodes.fromJson(
      Map<String, dynamic> json) {
    final l$isAdult = json['isAdult'];
    final l$coverImage = json['coverImage'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStudio$media$nodes(
      isAdult: (l$isAdult as bool?),
      coverImage: l$coverImage == null
          ? null
          : Fragment$SearchResultStudio$media$nodes$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final bool? isAdult;

  final Fragment$SearchResultStudio$media$nodes$coverImage? coverImage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$isAdult = isAdult;
    _resultData['isAdult'] = l$isAdult;
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$isAdult = isAdult;
    final l$coverImage = coverImage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$isAdult,
      l$coverImage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStudio$media$nodes ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$isAdult = isAdult;
    final lOther$isAdult = other.isAdult;
    if (l$isAdult != lOther$isAdult) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStudio$media$nodes
    on Fragment$SearchResultStudio$media$nodes {
  CopyWith$Fragment$SearchResultStudio$media$nodes<
          Fragment$SearchResultStudio$media$nodes>
      get copyWith => CopyWith$Fragment$SearchResultStudio$media$nodes(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStudio$media$nodes<TRes> {
  factory CopyWith$Fragment$SearchResultStudio$media$nodes(
    Fragment$SearchResultStudio$media$nodes instance,
    TRes Function(Fragment$SearchResultStudio$media$nodes) then,
  ) = _CopyWithImpl$Fragment$SearchResultStudio$media$nodes;

  factory CopyWith$Fragment$SearchResultStudio$media$nodes.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes;

  TRes call({
    bool? isAdult,
    Fragment$SearchResultStudio$media$nodes$coverImage? coverImage,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<TRes>
      get coverImage;
}

class _CopyWithImpl$Fragment$SearchResultStudio$media$nodes<TRes>
    implements CopyWith$Fragment$SearchResultStudio$media$nodes<TRes> {
  _CopyWithImpl$Fragment$SearchResultStudio$media$nodes(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStudio$media$nodes _instance;

  final TRes Function(Fragment$SearchResultStudio$media$nodes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? isAdult = _undefined,
    Object? coverImage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStudio$media$nodes(
        isAdult: isAdult == _undefined ? _instance.isAdult : (isAdult as bool?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage
                as Fragment$SearchResultStudio$media$nodes$coverImage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<TRes>
      get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage.stub(
            _then(_instance))
        : CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes<TRes>
    implements CopyWith$Fragment$SearchResultStudio$media$nodes<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes(this._res);

  TRes _res;

  call({
    bool? isAdult,
    Fragment$SearchResultStudio$media$nodes$coverImage? coverImage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<TRes>
      get coverImage =>
          CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage.stub(
              _res);
}

class Fragment$SearchResultStudio$media$nodes$coverImage {
  Fragment$SearchResultStudio$media$nodes$coverImage({
    this.large,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$SearchResultStudio$media$nodes$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultStudio$media$nodes$coverImage(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultStudio$media$nodes$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultStudio$media$nodes$coverImage
    on Fragment$SearchResultStudio$media$nodes$coverImage {
  CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<
          Fragment$SearchResultStudio$media$nodes$coverImage>
      get copyWith =>
          CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<
    TRes> {
  factory CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage(
    Fragment$SearchResultStudio$media$nodes$coverImage instance,
    TRes Function(Fragment$SearchResultStudio$media$nodes$coverImage) then,
  ) = _CopyWithImpl$Fragment$SearchResultStudio$media$nodes$coverImage;

  factory CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes$coverImage;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultStudio$media$nodes$coverImage<TRes>
    implements
        CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<TRes> {
  _CopyWithImpl$Fragment$SearchResultStudio$media$nodes$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultStudio$media$nodes$coverImage _instance;

  final TRes Function(Fragment$SearchResultStudio$media$nodes$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultStudio$media$nodes$coverImage(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes$coverImage<TRes>
    implements
        CopyWith$Fragment$SearchResultStudio$media$nodes$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultStudio$media$nodes$coverImage(
      this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$SearchResultUser {
  Fragment$SearchResultUser({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$SearchResultUser.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultUser(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$SearchResultUser$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$SearchResultUser$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultUser ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultUser
    on Fragment$SearchResultUser {
  CopyWith$Fragment$SearchResultUser<Fragment$SearchResultUser> get copyWith =>
      CopyWith$Fragment$SearchResultUser(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$SearchResultUser<TRes> {
  factory CopyWith$Fragment$SearchResultUser(
    Fragment$SearchResultUser instance,
    TRes Function(Fragment$SearchResultUser) then,
  ) = _CopyWithImpl$Fragment$SearchResultUser;

  factory CopyWith$Fragment$SearchResultUser.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultUser;

  TRes call({
    int? id,
    String? name,
    Fragment$SearchResultUser$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$SearchResultUser$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$SearchResultUser<TRes>
    implements CopyWith$Fragment$SearchResultUser<TRes> {
  _CopyWithImpl$Fragment$SearchResultUser(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultUser _instance;

  final TRes Function(Fragment$SearchResultUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultUser(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$SearchResultUser$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$SearchResultUser$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$SearchResultUser$avatar.stub(_then(_instance))
        : CopyWith$Fragment$SearchResultUser$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$SearchResultUser<TRes>
    implements CopyWith$Fragment$SearchResultUser<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultUser(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$SearchResultUser$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$SearchResultUser$avatar<TRes> get avatar =>
      CopyWith$Fragment$SearchResultUser$avatar.stub(_res);
}

const fragmentDefinitionSearchResultUser = FragmentDefinitionNode(
  name: NameNode(value: 'SearchResultUser'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'User'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'avatar'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSearchResultUser = DocumentNode(definitions: [
  fragmentDefinitionSearchResultUser,
]);

extension ClientExtension$Fragment$SearchResultUser on graphql.GraphQLClient {
  void writeFragment$SearchResultUser({
    required Fragment$SearchResultUser data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'SearchResultUser',
            document: documentNodeFragmentSearchResultUser,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$SearchResultUser? readFragment$SearchResultUser({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'SearchResultUser',
          document: documentNodeFragmentSearchResultUser,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$SearchResultUser.fromJson(result);
  }
}

class Fragment$SearchResultUser$avatar {
  Fragment$SearchResultUser$avatar({
    this.large,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$SearchResultUser$avatar.fromJson(Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$SearchResultUser$avatar(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$SearchResultUser$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$SearchResultUser$avatar
    on Fragment$SearchResultUser$avatar {
  CopyWith$Fragment$SearchResultUser$avatar<Fragment$SearchResultUser$avatar>
      get copyWith => CopyWith$Fragment$SearchResultUser$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$SearchResultUser$avatar<TRes> {
  factory CopyWith$Fragment$SearchResultUser$avatar(
    Fragment$SearchResultUser$avatar instance,
    TRes Function(Fragment$SearchResultUser$avatar) then,
  ) = _CopyWithImpl$Fragment$SearchResultUser$avatar;

  factory CopyWith$Fragment$SearchResultUser$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$SearchResultUser$avatar;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$SearchResultUser$avatar<TRes>
    implements CopyWith$Fragment$SearchResultUser$avatar<TRes> {
  _CopyWithImpl$Fragment$SearchResultUser$avatar(
    this._instance,
    this._then,
  );

  final Fragment$SearchResultUser$avatar _instance;

  final TRes Function(Fragment$SearchResultUser$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$SearchResultUser$avatar(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$SearchResultUser$avatar<TRes>
    implements CopyWith$Fragment$SearchResultUser$avatar<TRes> {
  _CopyWithStubImpl$Fragment$SearchResultUser$avatar(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$CalendarAiringSchedule {
  Fragment$CalendarAiringSchedule({
    required this.id,
    this.media,
    required this.airingAt,
    required this.timeUntilAiring,
    required this.episode,
    this.$__typename = 'AiringSchedule',
  });

  factory Fragment$CalendarAiringSchedule.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$media = json['media'];
    final l$airingAt = json['airingAt'];
    final l$timeUntilAiring = json['timeUntilAiring'];
    final l$episode = json['episode'];
    final l$$__typename = json['__typename'];
    return Fragment$CalendarAiringSchedule(
      id: (l$id as int),
      media: l$media == null
          ? null
          : Fragment$CalendarAiringSchedule$media.fromJson(
              (l$media as Map<String, dynamic>)),
      airingAt: (l$airingAt as int),
      timeUntilAiring: (l$timeUntilAiring as int),
      episode: (l$episode as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$CalendarAiringSchedule$media? media;

  final int airingAt;

  final int timeUntilAiring;

  final int episode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$airingAt = airingAt;
    _resultData['airingAt'] = l$airingAt;
    final l$timeUntilAiring = timeUntilAiring;
    _resultData['timeUntilAiring'] = l$timeUntilAiring;
    final l$episode = episode;
    _resultData['episode'] = l$episode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$media = media;
    final l$airingAt = airingAt;
    final l$timeUntilAiring = timeUntilAiring;
    final l$episode = episode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$media,
      l$airingAt,
      l$timeUntilAiring,
      l$episode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CalendarAiringSchedule ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$airingAt = airingAt;
    final lOther$airingAt = other.airingAt;
    if (l$airingAt != lOther$airingAt) {
      return false;
    }
    final l$timeUntilAiring = timeUntilAiring;
    final lOther$timeUntilAiring = other.timeUntilAiring;
    if (l$timeUntilAiring != lOther$timeUntilAiring) {
      return false;
    }
    final l$episode = episode;
    final lOther$episode = other.episode;
    if (l$episode != lOther$episode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CalendarAiringSchedule
    on Fragment$CalendarAiringSchedule {
  CopyWith$Fragment$CalendarAiringSchedule<Fragment$CalendarAiringSchedule>
      get copyWith => CopyWith$Fragment$CalendarAiringSchedule(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CalendarAiringSchedule<TRes> {
  factory CopyWith$Fragment$CalendarAiringSchedule(
    Fragment$CalendarAiringSchedule instance,
    TRes Function(Fragment$CalendarAiringSchedule) then,
  ) = _CopyWithImpl$Fragment$CalendarAiringSchedule;

  factory CopyWith$Fragment$CalendarAiringSchedule.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CalendarAiringSchedule;

  TRes call({
    int? id,
    Fragment$CalendarAiringSchedule$media? media,
    int? airingAt,
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  });
  CopyWith$Fragment$CalendarAiringSchedule$media<TRes> get media;
}

class _CopyWithImpl$Fragment$CalendarAiringSchedule<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule<TRes> {
  _CopyWithImpl$Fragment$CalendarAiringSchedule(
    this._instance,
    this._then,
  );

  final Fragment$CalendarAiringSchedule _instance;

  final TRes Function(Fragment$CalendarAiringSchedule) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? media = _undefined,
    Object? airingAt = _undefined,
    Object? timeUntilAiring = _undefined,
    Object? episode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CalendarAiringSchedule(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$CalendarAiringSchedule$media?),
        airingAt: airingAt == _undefined || airingAt == null
            ? _instance.airingAt
            : (airingAt as int),
        timeUntilAiring:
            timeUntilAiring == _undefined || timeUntilAiring == null
                ? _instance.timeUntilAiring
                : (timeUntilAiring as int),
        episode: episode == _undefined || episode == null
            ? _instance.episode
            : (episode as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$CalendarAiringSchedule$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$CalendarAiringSchedule$media.stub(_then(_instance))
        : CopyWith$Fragment$CalendarAiringSchedule$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$CalendarAiringSchedule<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule<TRes> {
  _CopyWithStubImpl$Fragment$CalendarAiringSchedule(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$CalendarAiringSchedule$media? media,
    int? airingAt,
    int? timeUntilAiring,
    int? episode,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$CalendarAiringSchedule$media<TRes> get media =>
      CopyWith$Fragment$CalendarAiringSchedule$media.stub(_res);
}

const fragmentDefinitionCalendarAiringSchedule = FragmentDefinitionNode(
  name: NameNode(value: 'CalendarAiringSchedule'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'AiringSchedule'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'english'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'bannerImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'mediaListEntry'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'status'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'type'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'airingAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'timeUntilAiring'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'episode'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentCalendarAiringSchedule = DocumentNode(definitions: [
  fragmentDefinitionCalendarAiringSchedule,
]);

extension ClientExtension$Fragment$CalendarAiringSchedule
    on graphql.GraphQLClient {
  void writeFragment$CalendarAiringSchedule({
    required Fragment$CalendarAiringSchedule data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'CalendarAiringSchedule',
            document: documentNodeFragmentCalendarAiringSchedule,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$CalendarAiringSchedule? readFragment$CalendarAiringSchedule({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'CalendarAiringSchedule',
          document: documentNodeFragmentCalendarAiringSchedule,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$CalendarAiringSchedule.fromJson(result);
  }
}

class Fragment$CalendarAiringSchedule$media {
  Fragment$CalendarAiringSchedule$media({
    required this.id,
    this.title,
    this.bannerImage,
    this.mediaListEntry,
    this.type,
    this.$__typename = 'Media',
  });

  factory Fragment$CalendarAiringSchedule$media.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$bannerImage = json['bannerImage'];
    final l$mediaListEntry = json['mediaListEntry'];
    final l$type = json['type'];
    final l$$__typename = json['__typename'];
    return Fragment$CalendarAiringSchedule$media(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$CalendarAiringSchedule$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      bannerImage: (l$bannerImage as String?),
      mediaListEntry: l$mediaListEntry == null
          ? null
          : Fragment$CalendarAiringSchedule$media$mediaListEntry.fromJson(
              (l$mediaListEntry as Map<String, dynamic>)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$CalendarAiringSchedule$media$title? title;

  final String? bannerImage;

  final Fragment$CalendarAiringSchedule$media$mediaListEntry? mediaListEntry;

  final Enum$MediaType? type;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$bannerImage = bannerImage;
    _resultData['bannerImage'] = l$bannerImage;
    final l$mediaListEntry = mediaListEntry;
    _resultData['mediaListEntry'] = l$mediaListEntry?.toJson();
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$bannerImage = bannerImage;
    final l$mediaListEntry = mediaListEntry;
    final l$type = type;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$bannerImage,
      l$mediaListEntry,
      l$type,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CalendarAiringSchedule$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$bannerImage = bannerImage;
    final lOther$bannerImage = other.bannerImage;
    if (l$bannerImage != lOther$bannerImage) {
      return false;
    }
    final l$mediaListEntry = mediaListEntry;
    final lOther$mediaListEntry = other.mediaListEntry;
    if (l$mediaListEntry != lOther$mediaListEntry) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CalendarAiringSchedule$media
    on Fragment$CalendarAiringSchedule$media {
  CopyWith$Fragment$CalendarAiringSchedule$media<
          Fragment$CalendarAiringSchedule$media>
      get copyWith => CopyWith$Fragment$CalendarAiringSchedule$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CalendarAiringSchedule$media<TRes> {
  factory CopyWith$Fragment$CalendarAiringSchedule$media(
    Fragment$CalendarAiringSchedule$media instance,
    TRes Function(Fragment$CalendarAiringSchedule$media) then,
  ) = _CopyWithImpl$Fragment$CalendarAiringSchedule$media;

  factory CopyWith$Fragment$CalendarAiringSchedule$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media;

  TRes call({
    int? id,
    Fragment$CalendarAiringSchedule$media$title? title,
    String? bannerImage,
    Fragment$CalendarAiringSchedule$media$mediaListEntry? mediaListEntry,
    Enum$MediaType? type,
    String? $__typename,
  });
  CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> get title;
  CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes>
      get mediaListEntry;
}

class _CopyWithImpl$Fragment$CalendarAiringSchedule$media<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule$media<TRes> {
  _CopyWithImpl$Fragment$CalendarAiringSchedule$media(
    this._instance,
    this._then,
  );

  final Fragment$CalendarAiringSchedule$media _instance;

  final TRes Function(Fragment$CalendarAiringSchedule$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? bannerImage = _undefined,
    Object? mediaListEntry = _undefined,
    Object? type = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CalendarAiringSchedule$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$CalendarAiringSchedule$media$title?),
        bannerImage: bannerImage == _undefined
            ? _instance.bannerImage
            : (bannerImage as String?),
        mediaListEntry: mediaListEntry == _undefined
            ? _instance.mediaListEntry
            : (mediaListEntry
                as Fragment$CalendarAiringSchedule$media$mediaListEntry?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$CalendarAiringSchedule$media$title.stub(
            _then(_instance))
        : CopyWith$Fragment$CalendarAiringSchedule$media$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes>
      get mediaListEntry {
    final local$mediaListEntry = _instance.mediaListEntry;
    return local$mediaListEntry == null
        ? CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry.stub(
            _then(_instance))
        : CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry(
            local$mediaListEntry, (e) => call(mediaListEntry: e));
  }
}

class _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule$media<TRes> {
  _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$CalendarAiringSchedule$media$title? title,
    String? bannerImage,
    Fragment$CalendarAiringSchedule$media$mediaListEntry? mediaListEntry,
    Enum$MediaType? type,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> get title =>
      CopyWith$Fragment$CalendarAiringSchedule$media$title.stub(_res);

  CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes>
      get mediaListEntry =>
          CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry.stub(
              _res);
}

class Fragment$CalendarAiringSchedule$media$title {
  Fragment$CalendarAiringSchedule$media$title({
    this.userPreferred,
    this.english,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$CalendarAiringSchedule$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$english = json['english'];
    final l$$__typename = json['__typename'];
    return Fragment$CalendarAiringSchedule$media$title(
      userPreferred: (l$userPreferred as String?),
      english: (l$english as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String? english;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$english = english;
    _resultData['english'] = l$english;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$english = english;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$english,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CalendarAiringSchedule$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$english = english;
    final lOther$english = other.english;
    if (l$english != lOther$english) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CalendarAiringSchedule$media$title
    on Fragment$CalendarAiringSchedule$media$title {
  CopyWith$Fragment$CalendarAiringSchedule$media$title<
          Fragment$CalendarAiringSchedule$media$title>
      get copyWith => CopyWith$Fragment$CalendarAiringSchedule$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> {
  factory CopyWith$Fragment$CalendarAiringSchedule$media$title(
    Fragment$CalendarAiringSchedule$media$title instance,
    TRes Function(Fragment$CalendarAiringSchedule$media$title) then,
  ) = _CopyWithImpl$Fragment$CalendarAiringSchedule$media$title;

  factory CopyWith$Fragment$CalendarAiringSchedule$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$title;

  TRes call({
    String? userPreferred,
    String? english,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$CalendarAiringSchedule$media$title<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> {
  _CopyWithImpl$Fragment$CalendarAiringSchedule$media$title(
    this._instance,
    this._then,
  );

  final Fragment$CalendarAiringSchedule$media$title _instance;

  final TRes Function(Fragment$CalendarAiringSchedule$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? english = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CalendarAiringSchedule$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        english:
            english == _undefined ? _instance.english : (english as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$title<TRes>
    implements CopyWith$Fragment$CalendarAiringSchedule$media$title<TRes> {
  _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? english,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$CalendarAiringSchedule$media$mediaListEntry {
  Fragment$CalendarAiringSchedule$media$mediaListEntry({
    this.status,
    this.$__typename = 'MediaList',
  });

  factory Fragment$CalendarAiringSchedule$media$mediaListEntry.fromJson(
      Map<String, dynamic> json) {
    final l$status = json['status'];
    final l$$__typename = json['__typename'];
    return Fragment$CalendarAiringSchedule$media$mediaListEntry(
      status: l$status == null
          ? null
          : fromJson$Enum$MediaListStatus((l$status as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final Enum$MediaListStatus? status;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaListStatus(l$status);
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$status = status;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$status,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CalendarAiringSchedule$media$mediaListEntry ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CalendarAiringSchedule$media$mediaListEntry
    on Fragment$CalendarAiringSchedule$media$mediaListEntry {
  CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<
          Fragment$CalendarAiringSchedule$media$mediaListEntry>
      get copyWith =>
          CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<
    TRes> {
  factory CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry(
    Fragment$CalendarAiringSchedule$media$mediaListEntry instance,
    TRes Function(Fragment$CalendarAiringSchedule$media$mediaListEntry) then,
  ) = _CopyWithImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry;

  factory CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry;

  TRes call({
    Enum$MediaListStatus? status,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes>
    implements
        CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes> {
  _CopyWithImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry(
    this._instance,
    this._then,
  );

  final Fragment$CalendarAiringSchedule$media$mediaListEntry _instance;

  final TRes Function(Fragment$CalendarAiringSchedule$media$mediaListEntry)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? status = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CalendarAiringSchedule$media$mediaListEntry(
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaListStatus?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry<
        TRes>
    implements
        CopyWith$Fragment$CalendarAiringSchedule$media$mediaListEntry<TRes> {
  _CopyWithStubImpl$Fragment$CalendarAiringSchedule$media$mediaListEntry(
      this._res);

  TRes _res;

  call({
    Enum$MediaListStatus? status,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaTag {
  Fragment$MediaTag({
    required this.id,
    required this.name,
    this.category,
    this.description,
    this.isAdult,
    this.$__typename = 'MediaTag',
  });

  factory Fragment$MediaTag.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$category = json['category'];
    final l$description = json['description'];
    final l$isAdult = json['isAdult'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaTag(
      id: (l$id as int),
      name: (l$name as String),
      category: (l$category as String?),
      description: (l$description as String?),
      isAdult: (l$isAdult as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final String? category;

  final String? description;

  final bool? isAdult;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$category = category;
    _resultData['category'] = l$category;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isAdult = isAdult;
    _resultData['isAdult'] = l$isAdult;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$category = category;
    final l$description = description;
    final l$isAdult = isAdult;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$category,
      l$description,
      l$isAdult,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaTag || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isAdult = isAdult;
    final lOther$isAdult = other.isAdult;
    if (l$isAdult != lOther$isAdult) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaTag on Fragment$MediaTag {
  CopyWith$Fragment$MediaTag<Fragment$MediaTag> get copyWith =>
      CopyWith$Fragment$MediaTag(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaTag<TRes> {
  factory CopyWith$Fragment$MediaTag(
    Fragment$MediaTag instance,
    TRes Function(Fragment$MediaTag) then,
  ) = _CopyWithImpl$Fragment$MediaTag;

  factory CopyWith$Fragment$MediaTag.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaTag;

  TRes call({
    int? id,
    String? name,
    String? category,
    String? description,
    bool? isAdult,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaTag<TRes>
    implements CopyWith$Fragment$MediaTag<TRes> {
  _CopyWithImpl$Fragment$MediaTag(
    this._instance,
    this._then,
  );

  final Fragment$MediaTag _instance;

  final TRes Function(Fragment$MediaTag) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? category = _undefined,
    Object? description = _undefined,
    Object? isAdult = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaTag(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        category:
            category == _undefined ? _instance.category : (category as String?),
        description: description == _undefined
            ? _instance.description
            : (description as String?),
        isAdult: isAdult == _undefined ? _instance.isAdult : (isAdult as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaTag<TRes>
    implements CopyWith$Fragment$MediaTag<TRes> {
  _CopyWithStubImpl$Fragment$MediaTag(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? category,
    String? description,
    bool? isAdult,
    String? $__typename,
  }) =>
      _res;
}

const fragmentDefinitionMediaTag = FragmentDefinitionNode(
  name: NameNode(value: 'MediaTag'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaTag'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'category'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'description'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isAdult'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaTag = DocumentNode(definitions: [
  fragmentDefinitionMediaTag,
]);

extension ClientExtension$Fragment$MediaTag on graphql.GraphQLClient {
  void writeFragment$MediaTag({
    required Fragment$MediaTag data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaTag',
            document: documentNodeFragmentMediaTag,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaTag? readFragment$MediaTag({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaTag',
          document: documentNodeFragmentMediaTag,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MediaTag.fromJson(result);
  }
}

class Fragment$FuzzyDate {
  Fragment$FuzzyDate({
    this.day,
    this.month,
    this.year,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$FuzzyDate.fromJson(Map<String, dynamic> json) {
    final l$day = json['day'];
    final l$month = json['month'];
    final l$year = json['year'];
    final l$$__typename = json['__typename'];
    return Fragment$FuzzyDate(
      day: (l$day as int?),
      month: (l$month as int?),
      year: (l$year as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? day;

  final int? month;

  final int? year;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$day = day;
    _resultData['day'] = l$day;
    final l$month = month;
    _resultData['month'] = l$month;
    final l$year = year;
    _resultData['year'] = l$year;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$day = day;
    final l$month = month;
    final l$year = year;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$day,
      l$month,
      l$year,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$FuzzyDate || runtimeType != other.runtimeType) {
      return false;
    }
    final l$day = day;
    final lOther$day = other.day;
    if (l$day != lOther$day) {
      return false;
    }
    final l$month = month;
    final lOther$month = other.month;
    if (l$month != lOther$month) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$FuzzyDate on Fragment$FuzzyDate {
  CopyWith$Fragment$FuzzyDate<Fragment$FuzzyDate> get copyWith =>
      CopyWith$Fragment$FuzzyDate(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$FuzzyDate<TRes> {
  factory CopyWith$Fragment$FuzzyDate(
    Fragment$FuzzyDate instance,
    TRes Function(Fragment$FuzzyDate) then,
  ) = _CopyWithImpl$Fragment$FuzzyDate;

  factory CopyWith$Fragment$FuzzyDate.stub(TRes res) =
      _CopyWithStubImpl$Fragment$FuzzyDate;

  TRes call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$FuzzyDate<TRes>
    implements CopyWith$Fragment$FuzzyDate<TRes> {
  _CopyWithImpl$Fragment$FuzzyDate(
    this._instance,
    this._then,
  );

  final Fragment$FuzzyDate _instance;

  final TRes Function(Fragment$FuzzyDate) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? day = _undefined,
    Object? month = _undefined,
    Object? year = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$FuzzyDate(
        day: day == _undefined ? _instance.day : (day as int?),
        month: month == _undefined ? _instance.month : (month as int?),
        year: year == _undefined ? _instance.year : (year as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$FuzzyDate<TRes>
    implements CopyWith$Fragment$FuzzyDate<TRes> {
  _CopyWithStubImpl$Fragment$FuzzyDate(this._res);

  TRes _res;

  call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  }) =>
      _res;
}

const fragmentDefinitionFuzzyDate = FragmentDefinitionNode(
  name: NameNode(value: 'FuzzyDate'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'FuzzyDate'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'day'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'month'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'year'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentFuzzyDate = DocumentNode(definitions: [
  fragmentDefinitionFuzzyDate,
]);

extension ClientExtension$Fragment$FuzzyDate on graphql.GraphQLClient {
  void writeFragment$FuzzyDate({
    required Fragment$FuzzyDate data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'FuzzyDate',
            document: documentNodeFragmentFuzzyDate,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$FuzzyDate? readFragment$FuzzyDate({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'FuzzyDate',
          document: documentNodeFragmentFuzzyDate,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$FuzzyDate.fromJson(result);
  }
}

class Fragment$CharacterShort {
  Fragment$CharacterShort({
    required this.id,
    this.name,
    this.image,
    this.favourites,
    this.$__typename = 'Character',
  });

  factory Fragment$CharacterShort.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$image = json['image'];
    final l$favourites = json['favourites'];
    final l$$__typename = json['__typename'];
    return Fragment$CharacterShort(
      id: (l$id as int),
      name: l$name == null
          ? null
          : Fragment$CharacterShort$name.fromJson(
              (l$name as Map<String, dynamic>)),
      image: l$image == null
          ? null
          : Fragment$CharacterShort$image.fromJson(
              (l$image as Map<String, dynamic>)),
      favourites: (l$favourites as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$CharacterShort$name? name;

  final Fragment$CharacterShort$image? image;

  final int? favourites;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name?.toJson();
    final l$image = image;
    _resultData['image'] = l$image?.toJson();
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$image = image;
    final l$favourites = favourites;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$image,
      l$favourites,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CharacterShort || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$image = image;
    final lOther$image = other.image;
    if (l$image != lOther$image) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CharacterShort on Fragment$CharacterShort {
  CopyWith$Fragment$CharacterShort<Fragment$CharacterShort> get copyWith =>
      CopyWith$Fragment$CharacterShort(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$CharacterShort<TRes> {
  factory CopyWith$Fragment$CharacterShort(
    Fragment$CharacterShort instance,
    TRes Function(Fragment$CharacterShort) then,
  ) = _CopyWithImpl$Fragment$CharacterShort;

  factory CopyWith$Fragment$CharacterShort.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CharacterShort;

  TRes call({
    int? id,
    Fragment$CharacterShort$name? name,
    Fragment$CharacterShort$image? image,
    int? favourites,
    String? $__typename,
  });
  CopyWith$Fragment$CharacterShort$name<TRes> get name;
  CopyWith$Fragment$CharacterShort$image<TRes> get image;
}

class _CopyWithImpl$Fragment$CharacterShort<TRes>
    implements CopyWith$Fragment$CharacterShort<TRes> {
  _CopyWithImpl$Fragment$CharacterShort(
    this._instance,
    this._then,
  );

  final Fragment$CharacterShort _instance;

  final TRes Function(Fragment$CharacterShort) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? image = _undefined,
    Object? favourites = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CharacterShort(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined
            ? _instance.name
            : (name as Fragment$CharacterShort$name?),
        image: image == _undefined
            ? _instance.image
            : (image as Fragment$CharacterShort$image?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$CharacterShort$name<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Fragment$CharacterShort$name.stub(_then(_instance))
        : CopyWith$Fragment$CharacterShort$name(
            local$name, (e) => call(name: e));
  }

  CopyWith$Fragment$CharacterShort$image<TRes> get image {
    final local$image = _instance.image;
    return local$image == null
        ? CopyWith$Fragment$CharacterShort$image.stub(_then(_instance))
        : CopyWith$Fragment$CharacterShort$image(
            local$image, (e) => call(image: e));
  }
}

class _CopyWithStubImpl$Fragment$CharacterShort<TRes>
    implements CopyWith$Fragment$CharacterShort<TRes> {
  _CopyWithStubImpl$Fragment$CharacterShort(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$CharacterShort$name? name,
    Fragment$CharacterShort$image? image,
    int? favourites,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$CharacterShort$name<TRes> get name =>
      CopyWith$Fragment$CharacterShort$name.stub(_res);

  CopyWith$Fragment$CharacterShort$image<TRes> get image =>
      CopyWith$Fragment$CharacterShort$image.stub(_res);
}

const fragmentDefinitionCharacterShort = FragmentDefinitionNode(
  name: NameNode(value: 'CharacterShort'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Character'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'image'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentCharacterShort = DocumentNode(definitions: [
  fragmentDefinitionCharacterShort,
]);

extension ClientExtension$Fragment$CharacterShort on graphql.GraphQLClient {
  void writeFragment$CharacterShort({
    required Fragment$CharacterShort data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'CharacterShort',
            document: documentNodeFragmentCharacterShort,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$CharacterShort? readFragment$CharacterShort({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'CharacterShort',
          document: documentNodeFragmentCharacterShort,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$CharacterShort.fromJson(result);
  }
}

class Fragment$CharacterShort$name {
  Fragment$CharacterShort$name({
    this.userPreferred,
    this.$__typename = 'CharacterName',
  });

  factory Fragment$CharacterShort$name.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$CharacterShort$name(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CharacterShort$name ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CharacterShort$name
    on Fragment$CharacterShort$name {
  CopyWith$Fragment$CharacterShort$name<Fragment$CharacterShort$name>
      get copyWith => CopyWith$Fragment$CharacterShort$name(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CharacterShort$name<TRes> {
  factory CopyWith$Fragment$CharacterShort$name(
    Fragment$CharacterShort$name instance,
    TRes Function(Fragment$CharacterShort$name) then,
  ) = _CopyWithImpl$Fragment$CharacterShort$name;

  factory CopyWith$Fragment$CharacterShort$name.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CharacterShort$name;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$CharacterShort$name<TRes>
    implements CopyWith$Fragment$CharacterShort$name<TRes> {
  _CopyWithImpl$Fragment$CharacterShort$name(
    this._instance,
    this._then,
  );

  final Fragment$CharacterShort$name _instance;

  final TRes Function(Fragment$CharacterShort$name) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CharacterShort$name(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$CharacterShort$name<TRes>
    implements CopyWith$Fragment$CharacterShort$name<TRes> {
  _CopyWithStubImpl$Fragment$CharacterShort$name(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$CharacterShort$image {
  Fragment$CharacterShort$image({
    this.large,
    this.$__typename = 'CharacterImage',
  });

  factory Fragment$CharacterShort$image.fromJson(Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$CharacterShort$image(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$CharacterShort$image ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$CharacterShort$image
    on Fragment$CharacterShort$image {
  CopyWith$Fragment$CharacterShort$image<Fragment$CharacterShort$image>
      get copyWith => CopyWith$Fragment$CharacterShort$image(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$CharacterShort$image<TRes> {
  factory CopyWith$Fragment$CharacterShort$image(
    Fragment$CharacterShort$image instance,
    TRes Function(Fragment$CharacterShort$image) then,
  ) = _CopyWithImpl$Fragment$CharacterShort$image;

  factory CopyWith$Fragment$CharacterShort$image.stub(TRes res) =
      _CopyWithStubImpl$Fragment$CharacterShort$image;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$CharacterShort$image<TRes>
    implements CopyWith$Fragment$CharacterShort$image<TRes> {
  _CopyWithImpl$Fragment$CharacterShort$image(
    this._instance,
    this._then,
  );

  final Fragment$CharacterShort$image _instance;

  final TRes Function(Fragment$CharacterShort$image) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$CharacterShort$image(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$CharacterShort$image<TRes>
    implements CopyWith$Fragment$CharacterShort$image<TRes> {
  _CopyWithStubImpl$Fragment$CharacterShort$image(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$StaffShort {
  Fragment$StaffShort({
    required this.id,
    this.name,
    this.image,
    this.favourites,
    this.$__typename = 'Staff',
  });

  factory Fragment$StaffShort.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$image = json['image'];
    final l$favourites = json['favourites'];
    final l$$__typename = json['__typename'];
    return Fragment$StaffShort(
      id: (l$id as int),
      name: l$name == null
          ? null
          : Fragment$StaffShort$name.fromJson((l$name as Map<String, dynamic>)),
      image: l$image == null
          ? null
          : Fragment$StaffShort$image.fromJson(
              (l$image as Map<String, dynamic>)),
      favourites: (l$favourites as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$StaffShort$name? name;

  final Fragment$StaffShort$image? image;

  final int? favourites;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name?.toJson();
    final l$image = image;
    _resultData['image'] = l$image?.toJson();
    final l$favourites = favourites;
    _resultData['favourites'] = l$favourites;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$image = image;
    final l$favourites = favourites;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$image,
      l$favourites,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$StaffShort || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$image = image;
    final lOther$image = other.image;
    if (l$image != lOther$image) {
      return false;
    }
    final l$favourites = favourites;
    final lOther$favourites = other.favourites;
    if (l$favourites != lOther$favourites) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$StaffShort on Fragment$StaffShort {
  CopyWith$Fragment$StaffShort<Fragment$StaffShort> get copyWith =>
      CopyWith$Fragment$StaffShort(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$StaffShort<TRes> {
  factory CopyWith$Fragment$StaffShort(
    Fragment$StaffShort instance,
    TRes Function(Fragment$StaffShort) then,
  ) = _CopyWithImpl$Fragment$StaffShort;

  factory CopyWith$Fragment$StaffShort.stub(TRes res) =
      _CopyWithStubImpl$Fragment$StaffShort;

  TRes call({
    int? id,
    Fragment$StaffShort$name? name,
    Fragment$StaffShort$image? image,
    int? favourites,
    String? $__typename,
  });
  CopyWith$Fragment$StaffShort$name<TRes> get name;
  CopyWith$Fragment$StaffShort$image<TRes> get image;
}

class _CopyWithImpl$Fragment$StaffShort<TRes>
    implements CopyWith$Fragment$StaffShort<TRes> {
  _CopyWithImpl$Fragment$StaffShort(
    this._instance,
    this._then,
  );

  final Fragment$StaffShort _instance;

  final TRes Function(Fragment$StaffShort) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? image = _undefined,
    Object? favourites = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$StaffShort(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined
            ? _instance.name
            : (name as Fragment$StaffShort$name?),
        image: image == _undefined
            ? _instance.image
            : (image as Fragment$StaffShort$image?),
        favourites: favourites == _undefined
            ? _instance.favourites
            : (favourites as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$StaffShort$name<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Fragment$StaffShort$name.stub(_then(_instance))
        : CopyWith$Fragment$StaffShort$name(local$name, (e) => call(name: e));
  }

  CopyWith$Fragment$StaffShort$image<TRes> get image {
    final local$image = _instance.image;
    return local$image == null
        ? CopyWith$Fragment$StaffShort$image.stub(_then(_instance))
        : CopyWith$Fragment$StaffShort$image(
            local$image, (e) => call(image: e));
  }
}

class _CopyWithStubImpl$Fragment$StaffShort<TRes>
    implements CopyWith$Fragment$StaffShort<TRes> {
  _CopyWithStubImpl$Fragment$StaffShort(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$StaffShort$name? name,
    Fragment$StaffShort$image? image,
    int? favourites,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$StaffShort$name<TRes> get name =>
      CopyWith$Fragment$StaffShort$name.stub(_res);

  CopyWith$Fragment$StaffShort$image<TRes> get image =>
      CopyWith$Fragment$StaffShort$image.stub(_res);
}

const fragmentDefinitionStaffShort = FragmentDefinitionNode(
  name: NameNode(value: 'StaffShort'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Staff'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'image'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'favourites'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentStaffShort = DocumentNode(definitions: [
  fragmentDefinitionStaffShort,
]);

extension ClientExtension$Fragment$StaffShort on graphql.GraphQLClient {
  void writeFragment$StaffShort({
    required Fragment$StaffShort data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'StaffShort',
            document: documentNodeFragmentStaffShort,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$StaffShort? readFragment$StaffShort({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'StaffShort',
          document: documentNodeFragmentStaffShort,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$StaffShort.fromJson(result);
  }
}

class Fragment$StaffShort$name {
  Fragment$StaffShort$name({
    this.userPreferred,
    this.$__typename = 'StaffName',
  });

  factory Fragment$StaffShort$name.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$StaffShort$name(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$StaffShort$name ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$StaffShort$name
    on Fragment$StaffShort$name {
  CopyWith$Fragment$StaffShort$name<Fragment$StaffShort$name> get copyWith =>
      CopyWith$Fragment$StaffShort$name(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$StaffShort$name<TRes> {
  factory CopyWith$Fragment$StaffShort$name(
    Fragment$StaffShort$name instance,
    TRes Function(Fragment$StaffShort$name) then,
  ) = _CopyWithImpl$Fragment$StaffShort$name;

  factory CopyWith$Fragment$StaffShort$name.stub(TRes res) =
      _CopyWithStubImpl$Fragment$StaffShort$name;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$StaffShort$name<TRes>
    implements CopyWith$Fragment$StaffShort$name<TRes> {
  _CopyWithImpl$Fragment$StaffShort$name(
    this._instance,
    this._then,
  );

  final Fragment$StaffShort$name _instance;

  final TRes Function(Fragment$StaffShort$name) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$StaffShort$name(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$StaffShort$name<TRes>
    implements CopyWith$Fragment$StaffShort$name<TRes> {
  _CopyWithStubImpl$Fragment$StaffShort$name(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$StaffShort$image {
  Fragment$StaffShort$image({
    this.large,
    this.$__typename = 'StaffImage',
  });

  factory Fragment$StaffShort$image.fromJson(Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$StaffShort$image(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$StaffShort$image ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$StaffShort$image
    on Fragment$StaffShort$image {
  CopyWith$Fragment$StaffShort$image<Fragment$StaffShort$image> get copyWith =>
      CopyWith$Fragment$StaffShort$image(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$StaffShort$image<TRes> {
  factory CopyWith$Fragment$StaffShort$image(
    Fragment$StaffShort$image instance,
    TRes Function(Fragment$StaffShort$image) then,
  ) = _CopyWithImpl$Fragment$StaffShort$image;

  factory CopyWith$Fragment$StaffShort$image.stub(TRes res) =
      _CopyWithStubImpl$Fragment$StaffShort$image;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$StaffShort$image<TRes>
    implements CopyWith$Fragment$StaffShort$image<TRes> {
  _CopyWithImpl$Fragment$StaffShort$image(
    this._instance,
    this._then,
  );

  final Fragment$StaffShort$image _instance;

  final TRes Function(Fragment$StaffShort$image) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$StaffShort$image(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$StaffShort$image<TRes>
    implements CopyWith$Fragment$StaffShort$image<TRes> {
  _CopyWithStubImpl$Fragment$StaffShort$image(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$TextActivity {
  Fragment$TextActivity({
    required this.id,
    this.user,
    required this.likeCount,
    required this.replyCount,
    required this.createdAt,
    this.isLiked,
    this.isSubscribed,
    this.siteUrl,
    this.text,
    this.$__typename = 'TextActivity',
  });

  factory Fragment$TextActivity.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$user = json['user'];
    final l$likeCount = json['likeCount'];
    final l$replyCount = json['replyCount'];
    final l$createdAt = json['createdAt'];
    final l$isLiked = json['isLiked'];
    final l$isSubscribed = json['isSubscribed'];
    final l$siteUrl = json['siteUrl'];
    final l$text = json['text'];
    final l$$__typename = json['__typename'];
    return Fragment$TextActivity(
      id: (l$id as int),
      user: l$user == null
          ? null
          : Fragment$TextActivity$user.fromJson(
              (l$user as Map<String, dynamic>)),
      likeCount: (l$likeCount as int),
      replyCount: (l$replyCount as int),
      createdAt: (l$createdAt as int),
      isLiked: (l$isLiked as bool?),
      isSubscribed: (l$isSubscribed as bool?),
      siteUrl: (l$siteUrl as String?),
      text: (l$text as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$TextActivity$user? user;

  final int likeCount;

  final int replyCount;

  final int createdAt;

  final bool? isLiked;

  final bool? isSubscribed;

  final String? siteUrl;

  final String? text;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$likeCount = likeCount;
    _resultData['likeCount'] = l$likeCount;
    final l$replyCount = replyCount;
    _resultData['replyCount'] = l$replyCount;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$isLiked = isLiked;
    _resultData['isLiked'] = l$isLiked;
    final l$isSubscribed = isSubscribed;
    _resultData['isSubscribed'] = l$isSubscribed;
    final l$siteUrl = siteUrl;
    _resultData['siteUrl'] = l$siteUrl;
    final l$text = text;
    _resultData['text'] = l$text;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$user = user;
    final l$likeCount = likeCount;
    final l$replyCount = replyCount;
    final l$createdAt = createdAt;
    final l$isLiked = isLiked;
    final l$isSubscribed = isSubscribed;
    final l$siteUrl = siteUrl;
    final l$text = text;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$user,
      l$likeCount,
      l$replyCount,
      l$createdAt,
      l$isLiked,
      l$isSubscribed,
      l$siteUrl,
      l$text,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$TextActivity || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$likeCount = likeCount;
    final lOther$likeCount = other.likeCount;
    if (l$likeCount != lOther$likeCount) {
      return false;
    }
    final l$replyCount = replyCount;
    final lOther$replyCount = other.replyCount;
    if (l$replyCount != lOther$replyCount) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$isLiked = isLiked;
    final lOther$isLiked = other.isLiked;
    if (l$isLiked != lOther$isLiked) {
      return false;
    }
    final l$isSubscribed = isSubscribed;
    final lOther$isSubscribed = other.isSubscribed;
    if (l$isSubscribed != lOther$isSubscribed) {
      return false;
    }
    final l$siteUrl = siteUrl;
    final lOther$siteUrl = other.siteUrl;
    if (l$siteUrl != lOther$siteUrl) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$TextActivity on Fragment$TextActivity {
  CopyWith$Fragment$TextActivity<Fragment$TextActivity> get copyWith =>
      CopyWith$Fragment$TextActivity(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$TextActivity<TRes> {
  factory CopyWith$Fragment$TextActivity(
    Fragment$TextActivity instance,
    TRes Function(Fragment$TextActivity) then,
  ) = _CopyWithImpl$Fragment$TextActivity;

  factory CopyWith$Fragment$TextActivity.stub(TRes res) =
      _CopyWithStubImpl$Fragment$TextActivity;

  TRes call({
    int? id,
    Fragment$TextActivity$user? user,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? text,
    String? $__typename,
  });
  CopyWith$Fragment$TextActivity$user<TRes> get user;
}

class _CopyWithImpl$Fragment$TextActivity<TRes>
    implements CopyWith$Fragment$TextActivity<TRes> {
  _CopyWithImpl$Fragment$TextActivity(
    this._instance,
    this._then,
  );

  final Fragment$TextActivity _instance;

  final TRes Function(Fragment$TextActivity) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? user = _undefined,
    Object? likeCount = _undefined,
    Object? replyCount = _undefined,
    Object? createdAt = _undefined,
    Object? isLiked = _undefined,
    Object? isSubscribed = _undefined,
    Object? siteUrl = _undefined,
    Object? text = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$TextActivity(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$TextActivity$user?),
        likeCount: likeCount == _undefined || likeCount == null
            ? _instance.likeCount
            : (likeCount as int),
        replyCount: replyCount == _undefined || replyCount == null
            ? _instance.replyCount
            : (replyCount as int),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        isLiked: isLiked == _undefined ? _instance.isLiked : (isLiked as bool?),
        isSubscribed: isSubscribed == _undefined
            ? _instance.isSubscribed
            : (isSubscribed as bool?),
        siteUrl:
            siteUrl == _undefined ? _instance.siteUrl : (siteUrl as String?),
        text: text == _undefined ? _instance.text : (text as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$TextActivity$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$TextActivity$user.stub(_then(_instance))
        : CopyWith$Fragment$TextActivity$user(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$TextActivity<TRes>
    implements CopyWith$Fragment$TextActivity<TRes> {
  _CopyWithStubImpl$Fragment$TextActivity(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$TextActivity$user? user,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? text,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$TextActivity$user<TRes> get user =>
      CopyWith$Fragment$TextActivity$user.stub(_res);
}

const fragmentDefinitionTextActivity = FragmentDefinitionNode(
  name: NameNode(value: 'TextActivity'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'TextActivity'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isFollowing'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'likeCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'replyCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isLiked'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isSubscribed'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'siteUrl'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'text'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentTextActivity = DocumentNode(definitions: [
  fragmentDefinitionTextActivity,
]);

extension ClientExtension$Fragment$TextActivity on graphql.GraphQLClient {
  void writeFragment$TextActivity({
    required Fragment$TextActivity data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'TextActivity',
            document: documentNodeFragmentTextActivity,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$TextActivity? readFragment$TextActivity({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'TextActivity',
          document: documentNodeFragmentTextActivity,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$TextActivity.fromJson(result);
  }
}

class Fragment$TextActivity$user {
  Fragment$TextActivity$user({
    required this.id,
    this.avatar,
    required this.name,
    this.isFollowing,
    this.$__typename = 'User',
  });

  factory Fragment$TextActivity$user.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$avatar = json['avatar'];
    final l$name = json['name'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Fragment$TextActivity$user(
      id: (l$id as int),
      avatar: l$avatar == null
          ? null
          : Fragment$TextActivity$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      name: (l$name as String),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$TextActivity$user$avatar? avatar;

  final String name;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$avatar = avatar;
    final l$name = name;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$avatar,
      l$name,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$TextActivity$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$TextActivity$user
    on Fragment$TextActivity$user {
  CopyWith$Fragment$TextActivity$user<Fragment$TextActivity$user>
      get copyWith => CopyWith$Fragment$TextActivity$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$TextActivity$user<TRes> {
  factory CopyWith$Fragment$TextActivity$user(
    Fragment$TextActivity$user instance,
    TRes Function(Fragment$TextActivity$user) then,
  ) = _CopyWithImpl$Fragment$TextActivity$user;

  factory CopyWith$Fragment$TextActivity$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$TextActivity$user;

  TRes call({
    int? id,
    Fragment$TextActivity$user$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Fragment$TextActivity$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$TextActivity$user<TRes>
    implements CopyWith$Fragment$TextActivity$user<TRes> {
  _CopyWithImpl$Fragment$TextActivity$user(
    this._instance,
    this._then,
  );

  final Fragment$TextActivity$user _instance;

  final TRes Function(Fragment$TextActivity$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? avatar = _undefined,
    Object? name = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$TextActivity$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$TextActivity$user$avatar?),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$TextActivity$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$TextActivity$user$avatar.stub(_then(_instance))
        : CopyWith$Fragment$TextActivity$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$TextActivity$user<TRes>
    implements CopyWith$Fragment$TextActivity$user<TRes> {
  _CopyWithStubImpl$Fragment$TextActivity$user(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$TextActivity$user$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$TextActivity$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$TextActivity$user$avatar.stub(_res);
}

class Fragment$TextActivity$user$avatar {
  Fragment$TextActivity$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$TextActivity$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$TextActivity$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$TextActivity$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$TextActivity$user$avatar
    on Fragment$TextActivity$user$avatar {
  CopyWith$Fragment$TextActivity$user$avatar<Fragment$TextActivity$user$avatar>
      get copyWith => CopyWith$Fragment$TextActivity$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$TextActivity$user$avatar<TRes> {
  factory CopyWith$Fragment$TextActivity$user$avatar(
    Fragment$TextActivity$user$avatar instance,
    TRes Function(Fragment$TextActivity$user$avatar) then,
  ) = _CopyWithImpl$Fragment$TextActivity$user$avatar;

  factory CopyWith$Fragment$TextActivity$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$TextActivity$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$TextActivity$user$avatar<TRes>
    implements CopyWith$Fragment$TextActivity$user$avatar<TRes> {
  _CopyWithImpl$Fragment$TextActivity$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$TextActivity$user$avatar _instance;

  final TRes Function(Fragment$TextActivity$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$TextActivity$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$TextActivity$user$avatar<TRes>
    implements CopyWith$Fragment$TextActivity$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$TextActivity$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MessageActivity {
  Fragment$MessageActivity({
    required this.id,
    this.messenger,
    this.recipient,
    required this.likeCount,
    required this.replyCount,
    required this.createdAt,
    this.isLiked,
    this.isSubscribed,
    this.siteUrl,
    this.message,
    this.isPrivate,
    this.$__typename = 'MessageActivity',
  });

  factory Fragment$MessageActivity.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$messenger = json['messenger'];
    final l$recipient = json['recipient'];
    final l$likeCount = json['likeCount'];
    final l$replyCount = json['replyCount'];
    final l$createdAt = json['createdAt'];
    final l$isLiked = json['isLiked'];
    final l$isSubscribed = json['isSubscribed'];
    final l$siteUrl = json['siteUrl'];
    final l$message = json['message'];
    final l$isPrivate = json['isPrivate'];
    final l$$__typename = json['__typename'];
    return Fragment$MessageActivity(
      id: (l$id as int),
      messenger: l$messenger == null
          ? null
          : Fragment$MessageActivity$messenger.fromJson(
              (l$messenger as Map<String, dynamic>)),
      recipient: l$recipient == null
          ? null
          : Fragment$MessageActivity$recipient.fromJson(
              (l$recipient as Map<String, dynamic>)),
      likeCount: (l$likeCount as int),
      replyCount: (l$replyCount as int),
      createdAt: (l$createdAt as int),
      isLiked: (l$isLiked as bool?),
      isSubscribed: (l$isSubscribed as bool?),
      siteUrl: (l$siteUrl as String?),
      message: (l$message as String?),
      isPrivate: (l$isPrivate as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MessageActivity$messenger? messenger;

  final Fragment$MessageActivity$recipient? recipient;

  final int likeCount;

  final int replyCount;

  final int createdAt;

  final bool? isLiked;

  final bool? isSubscribed;

  final String? siteUrl;

  final String? message;

  final bool? isPrivate;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$messenger = messenger;
    _resultData['messenger'] = l$messenger?.toJson();
    final l$recipient = recipient;
    _resultData['recipient'] = l$recipient?.toJson();
    final l$likeCount = likeCount;
    _resultData['likeCount'] = l$likeCount;
    final l$replyCount = replyCount;
    _resultData['replyCount'] = l$replyCount;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$isLiked = isLiked;
    _resultData['isLiked'] = l$isLiked;
    final l$isSubscribed = isSubscribed;
    _resultData['isSubscribed'] = l$isSubscribed;
    final l$siteUrl = siteUrl;
    _resultData['siteUrl'] = l$siteUrl;
    final l$message = message;
    _resultData['message'] = l$message;
    final l$isPrivate = isPrivate;
    _resultData['isPrivate'] = l$isPrivate;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$messenger = messenger;
    final l$recipient = recipient;
    final l$likeCount = likeCount;
    final l$replyCount = replyCount;
    final l$createdAt = createdAt;
    final l$isLiked = isLiked;
    final l$isSubscribed = isSubscribed;
    final l$siteUrl = siteUrl;
    final l$message = message;
    final l$isPrivate = isPrivate;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$messenger,
      l$recipient,
      l$likeCount,
      l$replyCount,
      l$createdAt,
      l$isLiked,
      l$isSubscribed,
      l$siteUrl,
      l$message,
      l$isPrivate,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MessageActivity ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$messenger = messenger;
    final lOther$messenger = other.messenger;
    if (l$messenger != lOther$messenger) {
      return false;
    }
    final l$recipient = recipient;
    final lOther$recipient = other.recipient;
    if (l$recipient != lOther$recipient) {
      return false;
    }
    final l$likeCount = likeCount;
    final lOther$likeCount = other.likeCount;
    if (l$likeCount != lOther$likeCount) {
      return false;
    }
    final l$replyCount = replyCount;
    final lOther$replyCount = other.replyCount;
    if (l$replyCount != lOther$replyCount) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$isLiked = isLiked;
    final lOther$isLiked = other.isLiked;
    if (l$isLiked != lOther$isLiked) {
      return false;
    }
    final l$isSubscribed = isSubscribed;
    final lOther$isSubscribed = other.isSubscribed;
    if (l$isSubscribed != lOther$isSubscribed) {
      return false;
    }
    final l$siteUrl = siteUrl;
    final lOther$siteUrl = other.siteUrl;
    if (l$siteUrl != lOther$siteUrl) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (l$message != lOther$message) {
      return false;
    }
    final l$isPrivate = isPrivate;
    final lOther$isPrivate = other.isPrivate;
    if (l$isPrivate != lOther$isPrivate) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MessageActivity
    on Fragment$MessageActivity {
  CopyWith$Fragment$MessageActivity<Fragment$MessageActivity> get copyWith =>
      CopyWith$Fragment$MessageActivity(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MessageActivity<TRes> {
  factory CopyWith$Fragment$MessageActivity(
    Fragment$MessageActivity instance,
    TRes Function(Fragment$MessageActivity) then,
  ) = _CopyWithImpl$Fragment$MessageActivity;

  factory CopyWith$Fragment$MessageActivity.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MessageActivity;

  TRes call({
    int? id,
    Fragment$MessageActivity$messenger? messenger,
    Fragment$MessageActivity$recipient? recipient,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? message,
    bool? isPrivate,
    String? $__typename,
  });
  CopyWith$Fragment$MessageActivity$messenger<TRes> get messenger;
  CopyWith$Fragment$MessageActivity$recipient<TRes> get recipient;
}

class _CopyWithImpl$Fragment$MessageActivity<TRes>
    implements CopyWith$Fragment$MessageActivity<TRes> {
  _CopyWithImpl$Fragment$MessageActivity(
    this._instance,
    this._then,
  );

  final Fragment$MessageActivity _instance;

  final TRes Function(Fragment$MessageActivity) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? messenger = _undefined,
    Object? recipient = _undefined,
    Object? likeCount = _undefined,
    Object? replyCount = _undefined,
    Object? createdAt = _undefined,
    Object? isLiked = _undefined,
    Object? isSubscribed = _undefined,
    Object? siteUrl = _undefined,
    Object? message = _undefined,
    Object? isPrivate = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MessageActivity(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        messenger: messenger == _undefined
            ? _instance.messenger
            : (messenger as Fragment$MessageActivity$messenger?),
        recipient: recipient == _undefined
            ? _instance.recipient
            : (recipient as Fragment$MessageActivity$recipient?),
        likeCount: likeCount == _undefined || likeCount == null
            ? _instance.likeCount
            : (likeCount as int),
        replyCount: replyCount == _undefined || replyCount == null
            ? _instance.replyCount
            : (replyCount as int),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        isLiked: isLiked == _undefined ? _instance.isLiked : (isLiked as bool?),
        isSubscribed: isSubscribed == _undefined
            ? _instance.isSubscribed
            : (isSubscribed as bool?),
        siteUrl:
            siteUrl == _undefined ? _instance.siteUrl : (siteUrl as String?),
        message:
            message == _undefined ? _instance.message : (message as String?),
        isPrivate: isPrivate == _undefined
            ? _instance.isPrivate
            : (isPrivate as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MessageActivity$messenger<TRes> get messenger {
    final local$messenger = _instance.messenger;
    return local$messenger == null
        ? CopyWith$Fragment$MessageActivity$messenger.stub(_then(_instance))
        : CopyWith$Fragment$MessageActivity$messenger(
            local$messenger, (e) => call(messenger: e));
  }

  CopyWith$Fragment$MessageActivity$recipient<TRes> get recipient {
    final local$recipient = _instance.recipient;
    return local$recipient == null
        ? CopyWith$Fragment$MessageActivity$recipient.stub(_then(_instance))
        : CopyWith$Fragment$MessageActivity$recipient(
            local$recipient, (e) => call(recipient: e));
  }
}

class _CopyWithStubImpl$Fragment$MessageActivity<TRes>
    implements CopyWith$Fragment$MessageActivity<TRes> {
  _CopyWithStubImpl$Fragment$MessageActivity(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MessageActivity$messenger? messenger,
    Fragment$MessageActivity$recipient? recipient,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? message,
    bool? isPrivate,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MessageActivity$messenger<TRes> get messenger =>
      CopyWith$Fragment$MessageActivity$messenger.stub(_res);

  CopyWith$Fragment$MessageActivity$recipient<TRes> get recipient =>
      CopyWith$Fragment$MessageActivity$recipient.stub(_res);
}

const fragmentDefinitionMessageActivity = FragmentDefinitionNode(
  name: NameNode(value: 'MessageActivity'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MessageActivity'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'messenger'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isFollowing'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'recipient'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'likeCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'replyCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isLiked'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isSubscribed'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'siteUrl'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'message'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isPrivate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMessageActivity = DocumentNode(definitions: [
  fragmentDefinitionMessageActivity,
]);

extension ClientExtension$Fragment$MessageActivity on graphql.GraphQLClient {
  void writeFragment$MessageActivity({
    required Fragment$MessageActivity data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MessageActivity',
            document: documentNodeFragmentMessageActivity,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MessageActivity? readFragment$MessageActivity({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MessageActivity',
          document: documentNodeFragmentMessageActivity,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MessageActivity.fromJson(result);
  }
}

class Fragment$MessageActivity$messenger {
  Fragment$MessageActivity$messenger({
    required this.id,
    this.avatar,
    required this.name,
    this.isFollowing,
    this.$__typename = 'User',
  });

  factory Fragment$MessageActivity$messenger.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$avatar = json['avatar'];
    final l$name = json['name'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Fragment$MessageActivity$messenger(
      id: (l$id as int),
      avatar: l$avatar == null
          ? null
          : Fragment$MessageActivity$messenger$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      name: (l$name as String),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MessageActivity$messenger$avatar? avatar;

  final String name;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$avatar = avatar;
    final l$name = name;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$avatar,
      l$name,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MessageActivity$messenger ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MessageActivity$messenger
    on Fragment$MessageActivity$messenger {
  CopyWith$Fragment$MessageActivity$messenger<
          Fragment$MessageActivity$messenger>
      get copyWith => CopyWith$Fragment$MessageActivity$messenger(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MessageActivity$messenger<TRes> {
  factory CopyWith$Fragment$MessageActivity$messenger(
    Fragment$MessageActivity$messenger instance,
    TRes Function(Fragment$MessageActivity$messenger) then,
  ) = _CopyWithImpl$Fragment$MessageActivity$messenger;

  factory CopyWith$Fragment$MessageActivity$messenger.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MessageActivity$messenger;

  TRes call({
    int? id,
    Fragment$MessageActivity$messenger$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$MessageActivity$messenger<TRes>
    implements CopyWith$Fragment$MessageActivity$messenger<TRes> {
  _CopyWithImpl$Fragment$MessageActivity$messenger(
    this._instance,
    this._then,
  );

  final Fragment$MessageActivity$messenger _instance;

  final TRes Function(Fragment$MessageActivity$messenger) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? avatar = _undefined,
    Object? name = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MessageActivity$messenger(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$MessageActivity$messenger$avatar?),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$MessageActivity$messenger$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$MessageActivity$messenger$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$MessageActivity$messenger<TRes>
    implements CopyWith$Fragment$MessageActivity$messenger<TRes> {
  _CopyWithStubImpl$Fragment$MessageActivity$messenger(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MessageActivity$messenger$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> get avatar =>
      CopyWith$Fragment$MessageActivity$messenger$avatar.stub(_res);
}

class Fragment$MessageActivity$messenger$avatar {
  Fragment$MessageActivity$messenger$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$MessageActivity$messenger$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$MessageActivity$messenger$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MessageActivity$messenger$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MessageActivity$messenger$avatar
    on Fragment$MessageActivity$messenger$avatar {
  CopyWith$Fragment$MessageActivity$messenger$avatar<
          Fragment$MessageActivity$messenger$avatar>
      get copyWith => CopyWith$Fragment$MessageActivity$messenger$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> {
  factory CopyWith$Fragment$MessageActivity$messenger$avatar(
    Fragment$MessageActivity$messenger$avatar instance,
    TRes Function(Fragment$MessageActivity$messenger$avatar) then,
  ) = _CopyWithImpl$Fragment$MessageActivity$messenger$avatar;

  factory CopyWith$Fragment$MessageActivity$messenger$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MessageActivity$messenger$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MessageActivity$messenger$avatar<TRes>
    implements CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> {
  _CopyWithImpl$Fragment$MessageActivity$messenger$avatar(
    this._instance,
    this._then,
  );

  final Fragment$MessageActivity$messenger$avatar _instance;

  final TRes Function(Fragment$MessageActivity$messenger$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MessageActivity$messenger$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MessageActivity$messenger$avatar<TRes>
    implements CopyWith$Fragment$MessageActivity$messenger$avatar<TRes> {
  _CopyWithStubImpl$Fragment$MessageActivity$messenger$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MessageActivity$recipient {
  Fragment$MessageActivity$recipient({
    required this.id,
    this.avatar,
    required this.name,
    this.$__typename = 'User',
  });

  factory Fragment$MessageActivity$recipient.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$avatar = json['avatar'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Fragment$MessageActivity$recipient(
      id: (l$id as int),
      avatar: l$avatar == null
          ? null
          : Fragment$MessageActivity$recipient$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      name: (l$name as String),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MessageActivity$recipient$avatar? avatar;

  final String name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$avatar = avatar;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$avatar,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MessageActivity$recipient ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MessageActivity$recipient
    on Fragment$MessageActivity$recipient {
  CopyWith$Fragment$MessageActivity$recipient<
          Fragment$MessageActivity$recipient>
      get copyWith => CopyWith$Fragment$MessageActivity$recipient(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MessageActivity$recipient<TRes> {
  factory CopyWith$Fragment$MessageActivity$recipient(
    Fragment$MessageActivity$recipient instance,
    TRes Function(Fragment$MessageActivity$recipient) then,
  ) = _CopyWithImpl$Fragment$MessageActivity$recipient;

  factory CopyWith$Fragment$MessageActivity$recipient.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MessageActivity$recipient;

  TRes call({
    int? id,
    Fragment$MessageActivity$recipient$avatar? avatar,
    String? name,
    String? $__typename,
  });
  CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$MessageActivity$recipient<TRes>
    implements CopyWith$Fragment$MessageActivity$recipient<TRes> {
  _CopyWithImpl$Fragment$MessageActivity$recipient(
    this._instance,
    this._then,
  );

  final Fragment$MessageActivity$recipient _instance;

  final TRes Function(Fragment$MessageActivity$recipient) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? avatar = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MessageActivity$recipient(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$MessageActivity$recipient$avatar?),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$MessageActivity$recipient$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$MessageActivity$recipient$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$MessageActivity$recipient<TRes>
    implements CopyWith$Fragment$MessageActivity$recipient<TRes> {
  _CopyWithStubImpl$Fragment$MessageActivity$recipient(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MessageActivity$recipient$avatar? avatar,
    String? name,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> get avatar =>
      CopyWith$Fragment$MessageActivity$recipient$avatar.stub(_res);
}

class Fragment$MessageActivity$recipient$avatar {
  Fragment$MessageActivity$recipient$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$MessageActivity$recipient$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$MessageActivity$recipient$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MessageActivity$recipient$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MessageActivity$recipient$avatar
    on Fragment$MessageActivity$recipient$avatar {
  CopyWith$Fragment$MessageActivity$recipient$avatar<
          Fragment$MessageActivity$recipient$avatar>
      get copyWith => CopyWith$Fragment$MessageActivity$recipient$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> {
  factory CopyWith$Fragment$MessageActivity$recipient$avatar(
    Fragment$MessageActivity$recipient$avatar instance,
    TRes Function(Fragment$MessageActivity$recipient$avatar) then,
  ) = _CopyWithImpl$Fragment$MessageActivity$recipient$avatar;

  factory CopyWith$Fragment$MessageActivity$recipient$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MessageActivity$recipient$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MessageActivity$recipient$avatar<TRes>
    implements CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> {
  _CopyWithImpl$Fragment$MessageActivity$recipient$avatar(
    this._instance,
    this._then,
  );

  final Fragment$MessageActivity$recipient$avatar _instance;

  final TRes Function(Fragment$MessageActivity$recipient$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MessageActivity$recipient$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MessageActivity$recipient$avatar<TRes>
    implements CopyWith$Fragment$MessageActivity$recipient$avatar<TRes> {
  _CopyWithStubImpl$Fragment$MessageActivity$recipient$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListActivity {
  Fragment$ListActivity({
    required this.id,
    this.user,
    required this.likeCount,
    required this.replyCount,
    required this.createdAt,
    this.isLiked,
    this.isSubscribed,
    this.siteUrl,
    this.progress,
    this.status,
    this.media,
    this.$__typename = 'ListActivity',
  });

  factory Fragment$ListActivity.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$user = json['user'];
    final l$likeCount = json['likeCount'];
    final l$replyCount = json['replyCount'];
    final l$createdAt = json['createdAt'];
    final l$isLiked = json['isLiked'];
    final l$isSubscribed = json['isSubscribed'];
    final l$siteUrl = json['siteUrl'];
    final l$progress = json['progress'];
    final l$status = json['status'];
    final l$media = json['media'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity(
      id: (l$id as int),
      user: l$user == null
          ? null
          : Fragment$ListActivity$user.fromJson(
              (l$user as Map<String, dynamic>)),
      likeCount: (l$likeCount as int),
      replyCount: (l$replyCount as int),
      createdAt: (l$createdAt as int),
      isLiked: (l$isLiked as bool?),
      isSubscribed: (l$isSubscribed as bool?),
      siteUrl: (l$siteUrl as String?),
      progress: (l$progress as String?),
      status: (l$status as String?),
      media: l$media == null
          ? null
          : Fragment$ListActivity$media.fromJson(
              (l$media as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ListActivity$user? user;

  final int likeCount;

  final int replyCount;

  final int createdAt;

  final bool? isLiked;

  final bool? isSubscribed;

  final String? siteUrl;

  final String? progress;

  final String? status;

  final Fragment$ListActivity$media? media;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$likeCount = likeCount;
    _resultData['likeCount'] = l$likeCount;
    final l$replyCount = replyCount;
    _resultData['replyCount'] = l$replyCount;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$isLiked = isLiked;
    _resultData['isLiked'] = l$isLiked;
    final l$isSubscribed = isSubscribed;
    _resultData['isSubscribed'] = l$isSubscribed;
    final l$siteUrl = siteUrl;
    _resultData['siteUrl'] = l$siteUrl;
    final l$progress = progress;
    _resultData['progress'] = l$progress;
    final l$status = status;
    _resultData['status'] = l$status;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$user = user;
    final l$likeCount = likeCount;
    final l$replyCount = replyCount;
    final l$createdAt = createdAt;
    final l$isLiked = isLiked;
    final l$isSubscribed = isSubscribed;
    final l$siteUrl = siteUrl;
    final l$progress = progress;
    final l$status = status;
    final l$media = media;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$user,
      l$likeCount,
      l$replyCount,
      l$createdAt,
      l$isLiked,
      l$isSubscribed,
      l$siteUrl,
      l$progress,
      l$status,
      l$media,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$likeCount = likeCount;
    final lOther$likeCount = other.likeCount;
    if (l$likeCount != lOther$likeCount) {
      return false;
    }
    final l$replyCount = replyCount;
    final lOther$replyCount = other.replyCount;
    if (l$replyCount != lOther$replyCount) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$isLiked = isLiked;
    final lOther$isLiked = other.isLiked;
    if (l$isLiked != lOther$isLiked) {
      return false;
    }
    final l$isSubscribed = isSubscribed;
    final lOther$isSubscribed = other.isSubscribed;
    if (l$isSubscribed != lOther$isSubscribed) {
      return false;
    }
    final l$siteUrl = siteUrl;
    final lOther$siteUrl = other.siteUrl;
    if (l$siteUrl != lOther$siteUrl) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (l$progress != lOther$progress) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity on Fragment$ListActivity {
  CopyWith$Fragment$ListActivity<Fragment$ListActivity> get copyWith =>
      CopyWith$Fragment$ListActivity(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$ListActivity<TRes> {
  factory CopyWith$Fragment$ListActivity(
    Fragment$ListActivity instance,
    TRes Function(Fragment$ListActivity) then,
  ) = _CopyWithImpl$Fragment$ListActivity;

  factory CopyWith$Fragment$ListActivity.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity;

  TRes call({
    int? id,
    Fragment$ListActivity$user? user,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? progress,
    String? status,
    Fragment$ListActivity$media? media,
    String? $__typename,
  });
  CopyWith$Fragment$ListActivity$user<TRes> get user;
  CopyWith$Fragment$ListActivity$media<TRes> get media;
}

class _CopyWithImpl$Fragment$ListActivity<TRes>
    implements CopyWith$Fragment$ListActivity<TRes> {
  _CopyWithImpl$Fragment$ListActivity(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity _instance;

  final TRes Function(Fragment$ListActivity) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? user = _undefined,
    Object? likeCount = _undefined,
    Object? replyCount = _undefined,
    Object? createdAt = _undefined,
    Object? isLiked = _undefined,
    Object? isSubscribed = _undefined,
    Object? siteUrl = _undefined,
    Object? progress = _undefined,
    Object? status = _undefined,
    Object? media = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ListActivity$user?),
        likeCount: likeCount == _undefined || likeCount == null
            ? _instance.likeCount
            : (likeCount as int),
        replyCount: replyCount == _undefined || replyCount == null
            ? _instance.replyCount
            : (replyCount as int),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        isLiked: isLiked == _undefined ? _instance.isLiked : (isLiked as bool?),
        isSubscribed: isSubscribed == _undefined
            ? _instance.isSubscribed
            : (isSubscribed as bool?),
        siteUrl:
            siteUrl == _undefined ? _instance.siteUrl : (siteUrl as String?),
        progress:
            progress == _undefined ? _instance.progress : (progress as String?),
        status: status == _undefined ? _instance.status : (status as String?),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$ListActivity$media?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ListActivity$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ListActivity$user.stub(_then(_instance))
        : CopyWith$Fragment$ListActivity$user(local$user, (e) => call(user: e));
  }

  CopyWith$Fragment$ListActivity$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$ListActivity$media.stub(_then(_instance))
        : CopyWith$Fragment$ListActivity$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$ListActivity<TRes>
    implements CopyWith$Fragment$ListActivity<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ListActivity$user? user,
    int? likeCount,
    int? replyCount,
    int? createdAt,
    bool? isLiked,
    bool? isSubscribed,
    String? siteUrl,
    String? progress,
    String? status,
    Fragment$ListActivity$media? media,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ListActivity$user<TRes> get user =>
      CopyWith$Fragment$ListActivity$user.stub(_res);

  CopyWith$Fragment$ListActivity$media<TRes> get media =>
      CopyWith$Fragment$ListActivity$media.stub(_res);
}

const fragmentDefinitionListActivity = FragmentDefinitionNode(
  name: NameNode(value: 'ListActivity'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ListActivity'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isFollowing'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'likeCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'replyCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isLiked'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isSubscribed'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'siteUrl'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'progress'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'status'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'type'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'format'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'isAdult'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentListActivity = DocumentNode(definitions: [
  fragmentDefinitionListActivity,
]);

extension ClientExtension$Fragment$ListActivity on graphql.GraphQLClient {
  void writeFragment$ListActivity({
    required Fragment$ListActivity data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ListActivity',
            document: documentNodeFragmentListActivity,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ListActivity? readFragment$ListActivity({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ListActivity',
          document: documentNodeFragmentListActivity,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$ListActivity.fromJson(result);
  }
}

class Fragment$ListActivity$user {
  Fragment$ListActivity$user({
    required this.id,
    this.avatar,
    required this.name,
    this.isFollowing,
    this.$__typename = 'User',
  });

  factory Fragment$ListActivity$user.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$avatar = json['avatar'];
    final l$name = json['name'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity$user(
      id: (l$id as int),
      avatar: l$avatar == null
          ? null
          : Fragment$ListActivity$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      name: (l$name as String),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ListActivity$user$avatar? avatar;

  final String name;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$avatar = avatar;
    final l$name = name;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$avatar,
      l$name,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity$user
    on Fragment$ListActivity$user {
  CopyWith$Fragment$ListActivity$user<Fragment$ListActivity$user>
      get copyWith => CopyWith$Fragment$ListActivity$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListActivity$user<TRes> {
  factory CopyWith$Fragment$ListActivity$user(
    Fragment$ListActivity$user instance,
    TRes Function(Fragment$ListActivity$user) then,
  ) = _CopyWithImpl$Fragment$ListActivity$user;

  factory CopyWith$Fragment$ListActivity$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity$user;

  TRes call({
    int? id,
    Fragment$ListActivity$user$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Fragment$ListActivity$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ListActivity$user<TRes>
    implements CopyWith$Fragment$ListActivity$user<TRes> {
  _CopyWithImpl$Fragment$ListActivity$user(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity$user _instance;

  final TRes Function(Fragment$ListActivity$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? avatar = _undefined,
    Object? name = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ListActivity$user$avatar?),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ListActivity$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ListActivity$user$avatar.stub(_then(_instance))
        : CopyWith$Fragment$ListActivity$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ListActivity$user<TRes>
    implements CopyWith$Fragment$ListActivity$user<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity$user(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ListActivity$user$avatar? avatar,
    String? name,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ListActivity$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ListActivity$user$avatar.stub(_res);
}

class Fragment$ListActivity$user$avatar {
  Fragment$ListActivity$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ListActivity$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity$user$avatar
    on Fragment$ListActivity$user$avatar {
  CopyWith$Fragment$ListActivity$user$avatar<Fragment$ListActivity$user$avatar>
      get copyWith => CopyWith$Fragment$ListActivity$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListActivity$user$avatar<TRes> {
  factory CopyWith$Fragment$ListActivity$user$avatar(
    Fragment$ListActivity$user$avatar instance,
    TRes Function(Fragment$ListActivity$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ListActivity$user$avatar;

  factory CopyWith$Fragment$ListActivity$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListActivity$user$avatar<TRes>
    implements CopyWith$Fragment$ListActivity$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ListActivity$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity$user$avatar _instance;

  final TRes Function(Fragment$ListActivity$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListActivity$user$avatar<TRes>
    implements CopyWith$Fragment$ListActivity$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListActivity$media {
  Fragment$ListActivity$media({
    required this.id,
    this.coverImage,
    this.title,
    this.type,
    this.format,
    this.isAdult,
    this.$__typename = 'Media',
  });

  factory Fragment$ListActivity$media.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$coverImage = json['coverImage'];
    final l$title = json['title'];
    final l$type = json['type'];
    final l$format = json['format'];
    final l$isAdult = json['isAdult'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity$media(
      id: (l$id as int),
      coverImage: l$coverImage == null
          ? null
          : Fragment$ListActivity$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      title: l$title == null
          ? null
          : Fragment$ListActivity$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      isAdult: (l$isAdult as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ListActivity$media$coverImage? coverImage;

  final Fragment$ListActivity$media$title? title;

  final Enum$MediaType? type;

  final Enum$MediaFormat? format;

  final bool? isAdult;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$isAdult = isAdult;
    _resultData['isAdult'] = l$isAdult;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$coverImage = coverImage;
    final l$title = title;
    final l$type = type;
    final l$format = format;
    final l$isAdult = isAdult;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$coverImage,
      l$title,
      l$type,
      l$format,
      l$isAdult,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$isAdult = isAdult;
    final lOther$isAdult = other.isAdult;
    if (l$isAdult != lOther$isAdult) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity$media
    on Fragment$ListActivity$media {
  CopyWith$Fragment$ListActivity$media<Fragment$ListActivity$media>
      get copyWith => CopyWith$Fragment$ListActivity$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListActivity$media<TRes> {
  factory CopyWith$Fragment$ListActivity$media(
    Fragment$ListActivity$media instance,
    TRes Function(Fragment$ListActivity$media) then,
  ) = _CopyWithImpl$Fragment$ListActivity$media;

  factory CopyWith$Fragment$ListActivity$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity$media;

  TRes call({
    int? id,
    Fragment$ListActivity$media$coverImage? coverImage,
    Fragment$ListActivity$media$title? title,
    Enum$MediaType? type,
    Enum$MediaFormat? format,
    bool? isAdult,
    String? $__typename,
  });
  CopyWith$Fragment$ListActivity$media$coverImage<TRes> get coverImage;
  CopyWith$Fragment$ListActivity$media$title<TRes> get title;
}

class _CopyWithImpl$Fragment$ListActivity$media<TRes>
    implements CopyWith$Fragment$ListActivity$media<TRes> {
  _CopyWithImpl$Fragment$ListActivity$media(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity$media _instance;

  final TRes Function(Fragment$ListActivity$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? coverImage = _undefined,
    Object? title = _undefined,
    Object? type = _undefined,
    Object? format = _undefined,
    Object? isAdult = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$ListActivity$media$coverImage?),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$ListActivity$media$title?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        isAdult: isAdult == _undefined ? _instance.isAdult : (isAdult as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ListActivity$media$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$ListActivity$media$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$ListActivity$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$ListActivity$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$ListActivity$media$title.stub(_then(_instance))
        : CopyWith$Fragment$ListActivity$media$title(
            local$title, (e) => call(title: e));
  }
}

class _CopyWithStubImpl$Fragment$ListActivity$media<TRes>
    implements CopyWith$Fragment$ListActivity$media<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ListActivity$media$coverImage? coverImage,
    Fragment$ListActivity$media$title? title,
    Enum$MediaType? type,
    Enum$MediaFormat? format,
    bool? isAdult,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ListActivity$media$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$ListActivity$media$coverImage.stub(_res);

  CopyWith$Fragment$ListActivity$media$title<TRes> get title =>
      CopyWith$Fragment$ListActivity$media$title.stub(_res);
}

class Fragment$ListActivity$media$coverImage {
  Fragment$ListActivity$media$coverImage({
    this.medium,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$ListActivity$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity$media$coverImage(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity$media$coverImage
    on Fragment$ListActivity$media$coverImage {
  CopyWith$Fragment$ListActivity$media$coverImage<
          Fragment$ListActivity$media$coverImage>
      get copyWith => CopyWith$Fragment$ListActivity$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListActivity$media$coverImage<TRes> {
  factory CopyWith$Fragment$ListActivity$media$coverImage(
    Fragment$ListActivity$media$coverImage instance,
    TRes Function(Fragment$ListActivity$media$coverImage) then,
  ) = _CopyWithImpl$Fragment$ListActivity$media$coverImage;

  factory CopyWith$Fragment$ListActivity$media$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity$media$coverImage;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListActivity$media$coverImage<TRes>
    implements CopyWith$Fragment$ListActivity$media$coverImage<TRes> {
  _CopyWithImpl$Fragment$ListActivity$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity$media$coverImage _instance;

  final TRes Function(Fragment$ListActivity$media$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity$media$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListActivity$media$coverImage<TRes>
    implements CopyWith$Fragment$ListActivity$media$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity$media$coverImage(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListActivity$media$title {
  Fragment$ListActivity$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$ListActivity$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$ListActivity$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListActivity$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListActivity$media$title
    on Fragment$ListActivity$media$title {
  CopyWith$Fragment$ListActivity$media$title<Fragment$ListActivity$media$title>
      get copyWith => CopyWith$Fragment$ListActivity$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListActivity$media$title<TRes> {
  factory CopyWith$Fragment$ListActivity$media$title(
    Fragment$ListActivity$media$title instance,
    TRes Function(Fragment$ListActivity$media$title) then,
  ) = _CopyWithImpl$Fragment$ListActivity$media$title;

  factory CopyWith$Fragment$ListActivity$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListActivity$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListActivity$media$title<TRes>
    implements CopyWith$Fragment$ListActivity$media$title<TRes> {
  _CopyWithImpl$Fragment$ListActivity$media$title(
    this._instance,
    this._then,
  );

  final Fragment$ListActivity$media$title _instance;

  final TRes Function(Fragment$ListActivity$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListActivity$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListActivity$media$title<TRes>
    implements CopyWith$Fragment$ListActivity$media$title<TRes> {
  _CopyWithStubImpl$Fragment$ListActivity$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityReply {
  Fragment$ActivityReply({
    required this.id,
    this.activityId,
    this.user,
    this.text,
    this.isLiked,
    required this.likeCount,
    required this.createdAt,
    this.$__typename = 'ActivityReply',
  });

  factory Fragment$ActivityReply.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$text = json['text'];
    final l$isLiked = json['isLiked'];
    final l$likeCount = json['likeCount'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReply(
      id: (l$id as int),
      activityId: (l$activityId as int?),
      user: l$user == null
          ? null
          : Fragment$ActivityReply$user.fromJson(
              (l$user as Map<String, dynamic>)),
      text: (l$text as String?),
      isLiked: (l$isLiked as bool?),
      likeCount: (l$likeCount as int),
      createdAt: (l$createdAt as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int? activityId;

  final Fragment$ActivityReply$user? user;

  final String? text;

  final bool? isLiked;

  final int likeCount;

  final int createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$text = text;
    _resultData['text'] = l$text;
    final l$isLiked = isLiked;
    _resultData['isLiked'] = l$isLiked;
    final l$likeCount = likeCount;
    _resultData['likeCount'] = l$likeCount;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$text = text;
    final l$isLiked = isLiked;
    final l$likeCount = likeCount;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$text,
      l$isLiked,
      l$likeCount,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReply || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$isLiked = isLiked;
    final lOther$isLiked = other.isLiked;
    if (l$isLiked != lOther$isLiked) {
      return false;
    }
    final l$likeCount = likeCount;
    final lOther$likeCount = other.likeCount;
    if (l$likeCount != lOther$likeCount) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReply on Fragment$ActivityReply {
  CopyWith$Fragment$ActivityReply<Fragment$ActivityReply> get copyWith =>
      CopyWith$Fragment$ActivityReply(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$ActivityReply<TRes> {
  factory CopyWith$Fragment$ActivityReply(
    Fragment$ActivityReply instance,
    TRes Function(Fragment$ActivityReply) then,
  ) = _CopyWithImpl$Fragment$ActivityReply;

  factory CopyWith$Fragment$ActivityReply.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReply;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityReply$user? user,
    String? text,
    bool? isLiked,
    int? likeCount,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReply$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityReply<TRes>
    implements CopyWith$Fragment$ActivityReply<TRes> {
  _CopyWithImpl$Fragment$ActivityReply(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReply _instance;

  final TRes Function(Fragment$ActivityReply) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? text = _undefined,
    Object? isLiked = _undefined,
    Object? likeCount = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReply(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined
            ? _instance.activityId
            : (activityId as int?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityReply$user?),
        text: text == _undefined ? _instance.text : (text as String?),
        isLiked: isLiked == _undefined ? _instance.isLiked : (isLiked as bool?),
        likeCount: likeCount == _undefined || likeCount == null
            ? _instance.likeCount
            : (likeCount as int),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReply$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityReply$user.stub(_then(_instance))
        : CopyWith$Fragment$ActivityReply$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReply<TRes>
    implements CopyWith$Fragment$ActivityReply<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReply(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityReply$user? user,
    String? text,
    bool? isLiked,
    int? likeCount,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReply$user<TRes> get user =>
      CopyWith$Fragment$ActivityReply$user.stub(_res);
}

const fragmentDefinitionActivityReply = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityReply'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityReply'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'text'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isLiked'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'likeCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityReply = DocumentNode(definitions: [
  fragmentDefinitionActivityReply,
]);

extension ClientExtension$Fragment$ActivityReply on graphql.GraphQLClient {
  void writeFragment$ActivityReply({
    required Fragment$ActivityReply data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityReply',
            document: documentNodeFragmentActivityReply,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityReply? readFragment$ActivityReply({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityReply',
          document: documentNodeFragmentActivityReply,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$ActivityReply.fromJson(result);
  }
}

class Fragment$ActivityReply$user {
  Fragment$ActivityReply$user({
    required this.id,
    this.avatar,
    required this.name,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityReply$user.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$avatar = json['avatar'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReply$user(
      id: (l$id as int),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityReply$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      name: (l$name as String),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ActivityReply$user$avatar? avatar;

  final String name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$avatar = avatar;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$avatar,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReply$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReply$user
    on Fragment$ActivityReply$user {
  CopyWith$Fragment$ActivityReply$user<Fragment$ActivityReply$user>
      get copyWith => CopyWith$Fragment$ActivityReply$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReply$user<TRes> {
  factory CopyWith$Fragment$ActivityReply$user(
    Fragment$ActivityReply$user instance,
    TRes Function(Fragment$ActivityReply$user) then,
  ) = _CopyWithImpl$Fragment$ActivityReply$user;

  factory CopyWith$Fragment$ActivityReply$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReply$user;

  TRes call({
    int? id,
    Fragment$ActivityReply$user$avatar? avatar,
    String? name,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReply$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityReply$user<TRes>
    implements CopyWith$Fragment$ActivityReply$user<TRes> {
  _CopyWithImpl$Fragment$ActivityReply$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReply$user _instance;

  final TRes Function(Fragment$ActivityReply$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? avatar = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReply$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityReply$user$avatar?),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReply$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityReply$user$avatar.stub(_then(_instance))
        : CopyWith$Fragment$ActivityReply$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReply$user<TRes>
    implements CopyWith$Fragment$ActivityReply$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReply$user(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ActivityReply$user$avatar? avatar,
    String? name,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReply$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ActivityReply$user$avatar.stub(_res);
}

class Fragment$ActivityReply$user$avatar {
  Fragment$ActivityReply$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityReply$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReply$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReply$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReply$user$avatar
    on Fragment$ActivityReply$user$avatar {
  CopyWith$Fragment$ActivityReply$user$avatar<
          Fragment$ActivityReply$user$avatar>
      get copyWith => CopyWith$Fragment$ActivityReply$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReply$user$avatar<TRes> {
  factory CopyWith$Fragment$ActivityReply$user$avatar(
    Fragment$ActivityReply$user$avatar instance,
    TRes Function(Fragment$ActivityReply$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityReply$user$avatar;

  factory CopyWith$Fragment$ActivityReply$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReply$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityReply$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityReply$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityReply$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReply$user$avatar _instance;

  final TRes Function(Fragment$ActivityReply$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReply$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityReply$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityReply$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReply$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$PageInfo {
  Fragment$PageInfo({
    this.currentPage,
    this.hasNextPage,
    this.$__typename = 'PageInfo',
  });

  factory Fragment$PageInfo.fromJson(Map<String, dynamic> json) {
    final l$currentPage = json['currentPage'];
    final l$hasNextPage = json['hasNextPage'];
    final l$$__typename = json['__typename'];
    return Fragment$PageInfo(
      currentPage: (l$currentPage as int?),
      hasNextPage: (l$hasNextPage as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? currentPage;

  final bool? hasNextPage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$currentPage = currentPage;
    _resultData['currentPage'] = l$currentPage;
    final l$hasNextPage = hasNextPage;
    _resultData['hasNextPage'] = l$hasNextPage;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$currentPage = currentPage;
    final l$hasNextPage = hasNextPage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$currentPage,
      l$hasNextPage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$PageInfo || runtimeType != other.runtimeType) {
      return false;
    }
    final l$currentPage = currentPage;
    final lOther$currentPage = other.currentPage;
    if (l$currentPage != lOther$currentPage) {
      return false;
    }
    final l$hasNextPage = hasNextPage;
    final lOther$hasNextPage = other.hasNextPage;
    if (l$hasNextPage != lOther$hasNextPage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$PageInfo on Fragment$PageInfo {
  CopyWith$Fragment$PageInfo<Fragment$PageInfo> get copyWith =>
      CopyWith$Fragment$PageInfo(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$PageInfo<TRes> {
  factory CopyWith$Fragment$PageInfo(
    Fragment$PageInfo instance,
    TRes Function(Fragment$PageInfo) then,
  ) = _CopyWithImpl$Fragment$PageInfo;

  factory CopyWith$Fragment$PageInfo.stub(TRes res) =
      _CopyWithStubImpl$Fragment$PageInfo;

  TRes call({
    int? currentPage,
    bool? hasNextPage,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$PageInfo<TRes>
    implements CopyWith$Fragment$PageInfo<TRes> {
  _CopyWithImpl$Fragment$PageInfo(
    this._instance,
    this._then,
  );

  final Fragment$PageInfo _instance;

  final TRes Function(Fragment$PageInfo) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? currentPage = _undefined,
    Object? hasNextPage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$PageInfo(
        currentPage: currentPage == _undefined
            ? _instance.currentPage
            : (currentPage as int?),
        hasNextPage: hasNextPage == _undefined
            ? _instance.hasNextPage
            : (hasNextPage as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$PageInfo<TRes>
    implements CopyWith$Fragment$PageInfo<TRes> {
  _CopyWithStubImpl$Fragment$PageInfo(this._res);

  TRes _res;

  call({
    int? currentPage,
    bool? hasNextPage,
    String? $__typename,
  }) =>
      _res;
}

const fragmentDefinitionPageInfo = FragmentDefinitionNode(
  name: NameNode(value: 'PageInfo'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'PageInfo'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'currentPage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'hasNextPage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentPageInfo = DocumentNode(definitions: [
  fragmentDefinitionPageInfo,
]);

extension ClientExtension$Fragment$PageInfo on graphql.GraphQLClient {
  void writeFragment$PageInfo({
    required Fragment$PageInfo data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'PageInfo',
            document: documentNodeFragmentPageInfo,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$PageInfo? readFragment$PageInfo({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'PageInfo',
          document: documentNodeFragmentPageInfo,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$PageInfo.fromJson(result);
  }
}

class Fragment$User {
  Fragment$User({
    required this.id,
    required this.name,
    this.avatar,
    this.isFollower,
    this.isFollowing,
    this.$__typename = 'User',
  });

  factory Fragment$User.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$isFollower = json['isFollower'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Fragment$User(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$User$avatar.fromJson((l$avatar as Map<String, dynamic>)),
      isFollower: (l$isFollower as bool?),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$User$avatar? avatar;

  final bool? isFollower;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$isFollower = isFollower;
    _resultData['isFollower'] = l$isFollower;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$isFollower = isFollower;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$isFollower,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$User || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$isFollower = isFollower;
    final lOther$isFollower = other.isFollower;
    if (l$isFollower != lOther$isFollower) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$User on Fragment$User {
  CopyWith$Fragment$User<Fragment$User> get copyWith => CopyWith$Fragment$User(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$User<TRes> {
  factory CopyWith$Fragment$User(
    Fragment$User instance,
    TRes Function(Fragment$User) then,
  ) = _CopyWithImpl$Fragment$User;

  factory CopyWith$Fragment$User.stub(TRes res) =
      _CopyWithStubImpl$Fragment$User;

  TRes call({
    int? id,
    String? name,
    Fragment$User$avatar? avatar,
    bool? isFollower,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Fragment$User$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$User<TRes>
    implements CopyWith$Fragment$User<TRes> {
  _CopyWithImpl$Fragment$User(
    this._instance,
    this._then,
  );

  final Fragment$User _instance;

  final TRes Function(Fragment$User) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? isFollower = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$User(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$User$avatar?),
        isFollower: isFollower == _undefined
            ? _instance.isFollower
            : (isFollower as bool?),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$User$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$User$avatar.stub(_then(_instance))
        : CopyWith$Fragment$User$avatar(local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$User<TRes>
    implements CopyWith$Fragment$User<TRes> {
  _CopyWithStubImpl$Fragment$User(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$User$avatar? avatar,
    bool? isFollower,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$User$avatar<TRes> get avatar =>
      CopyWith$Fragment$User$avatar.stub(_res);
}

const fragmentDefinitionUser = FragmentDefinitionNode(
  name: NameNode(value: 'User'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'User'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'avatar'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'medium'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'isFollower'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isFollowing'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentUser = DocumentNode(definitions: [
  fragmentDefinitionUser,
]);

extension ClientExtension$Fragment$User on graphql.GraphQLClient {
  void writeFragment$User({
    required Fragment$User data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'User',
            document: documentNodeFragmentUser,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$User? readFragment$User({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'User',
          document: documentNodeFragmentUser,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$User.fromJson(result);
  }
}

class Fragment$User$avatar {
  Fragment$User$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$User$avatar.fromJson(Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$User$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$User$avatar || runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$User$avatar on Fragment$User$avatar {
  CopyWith$Fragment$User$avatar<Fragment$User$avatar> get copyWith =>
      CopyWith$Fragment$User$avatar(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$User$avatar<TRes> {
  factory CopyWith$Fragment$User$avatar(
    Fragment$User$avatar instance,
    TRes Function(Fragment$User$avatar) then,
  ) = _CopyWithImpl$Fragment$User$avatar;

  factory CopyWith$Fragment$User$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$User$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$User$avatar<TRes>
    implements CopyWith$Fragment$User$avatar<TRes> {
  _CopyWithImpl$Fragment$User$avatar(
    this._instance,
    this._then,
  );

  final Fragment$User$avatar _instance;

  final TRes Function(Fragment$User$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$User$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$User$avatar<TRes>
    implements CopyWith$Fragment$User$avatar<TRes> {
  _CopyWithStubImpl$Fragment$User$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$Settings {
  Fragment$Settings({
    required this.id,
    required this.name,
    this.about,
    this.avatar,
    this.bannerImage,
    this.unreadNotificationCount,
    this.donatorTier,
    this.donatorBadge,
    this.moderatorRoles,
    this.options,
    this.mediaListOptions,
    this.$__typename = 'User',
  });

  factory Fragment$Settings.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$about = json['about'];
    final l$avatar = json['avatar'];
    final l$bannerImage = json['bannerImage'];
    final l$unreadNotificationCount = json['unreadNotificationCount'];
    final l$donatorTier = json['donatorTier'];
    final l$donatorBadge = json['donatorBadge'];
    final l$moderatorRoles = json['moderatorRoles'];
    final l$options = json['options'];
    final l$mediaListOptions = json['mediaListOptions'];
    final l$$__typename = json['__typename'];
    return Fragment$Settings(
      id: (l$id as int),
      name: (l$name as String),
      about: (l$about as String?),
      avatar: l$avatar == null
          ? null
          : Fragment$Settings$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      bannerImage: (l$bannerImage as String?),
      unreadNotificationCount: (l$unreadNotificationCount as int?),
      donatorTier: (l$donatorTier as int?),
      donatorBadge: (l$donatorBadge as String?),
      moderatorRoles: (l$moderatorRoles as List<dynamic>?)
          ?.map((e) => e == null ? null : fromJson$Enum$ModRole((e as String)))
          .toList(),
      options: l$options == null
          ? null
          : Fragment$Settings$options.fromJson(
              (l$options as Map<String, dynamic>)),
      mediaListOptions: l$mediaListOptions == null
          ? null
          : Fragment$MediaListOptions.fromJson(
              (l$mediaListOptions as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final String? about;

  final Fragment$Settings$avatar? avatar;

  final String? bannerImage;

  final int? unreadNotificationCount;

  final int? donatorTier;

  final String? donatorBadge;

  final List<Enum$ModRole?>? moderatorRoles;

  final Fragment$Settings$options? options;

  final Fragment$MediaListOptions? mediaListOptions;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$about = about;
    _resultData['about'] = l$about;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$bannerImage = bannerImage;
    _resultData['bannerImage'] = l$bannerImage;
    final l$unreadNotificationCount = unreadNotificationCount;
    _resultData['unreadNotificationCount'] = l$unreadNotificationCount;
    final l$donatorTier = donatorTier;
    _resultData['donatorTier'] = l$donatorTier;
    final l$donatorBadge = donatorBadge;
    _resultData['donatorBadge'] = l$donatorBadge;
    final l$moderatorRoles = moderatorRoles;
    _resultData['moderatorRoles'] = l$moderatorRoles
        ?.map((e) => e == null ? null : toJson$Enum$ModRole(e))
        .toList();
    final l$options = options;
    _resultData['options'] = l$options?.toJson();
    final l$mediaListOptions = mediaListOptions;
    _resultData['mediaListOptions'] = l$mediaListOptions?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$about = about;
    final l$avatar = avatar;
    final l$bannerImage = bannerImage;
    final l$unreadNotificationCount = unreadNotificationCount;
    final l$donatorTier = donatorTier;
    final l$donatorBadge = donatorBadge;
    final l$moderatorRoles = moderatorRoles;
    final l$options = options;
    final l$mediaListOptions = mediaListOptions;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$about,
      l$avatar,
      l$bannerImage,
      l$unreadNotificationCount,
      l$donatorTier,
      l$donatorBadge,
      l$moderatorRoles == null
          ? null
          : Object.hashAll(l$moderatorRoles.map((v) => v)),
      l$options,
      l$mediaListOptions,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Settings || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$about = about;
    final lOther$about = other.about;
    if (l$about != lOther$about) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$bannerImage = bannerImage;
    final lOther$bannerImage = other.bannerImage;
    if (l$bannerImage != lOther$bannerImage) {
      return false;
    }
    final l$unreadNotificationCount = unreadNotificationCount;
    final lOther$unreadNotificationCount = other.unreadNotificationCount;
    if (l$unreadNotificationCount != lOther$unreadNotificationCount) {
      return false;
    }
    final l$donatorTier = donatorTier;
    final lOther$donatorTier = other.donatorTier;
    if (l$donatorTier != lOther$donatorTier) {
      return false;
    }
    final l$donatorBadge = donatorBadge;
    final lOther$donatorBadge = other.donatorBadge;
    if (l$donatorBadge != lOther$donatorBadge) {
      return false;
    }
    final l$moderatorRoles = moderatorRoles;
    final lOther$moderatorRoles = other.moderatorRoles;
    if (l$moderatorRoles != null && lOther$moderatorRoles != null) {
      if (l$moderatorRoles.length != lOther$moderatorRoles.length) {
        return false;
      }
      for (int i = 0; i < l$moderatorRoles.length; i++) {
        final l$moderatorRoles$entry = l$moderatorRoles[i];
        final lOther$moderatorRoles$entry = lOther$moderatorRoles[i];
        if (l$moderatorRoles$entry != lOther$moderatorRoles$entry) {
          return false;
        }
      }
    } else if (l$moderatorRoles != lOther$moderatorRoles) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (l$options != lOther$options) {
      return false;
    }
    final l$mediaListOptions = mediaListOptions;
    final lOther$mediaListOptions = other.mediaListOptions;
    if (l$mediaListOptions != lOther$mediaListOptions) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Settings on Fragment$Settings {
  CopyWith$Fragment$Settings<Fragment$Settings> get copyWith =>
      CopyWith$Fragment$Settings(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Settings<TRes> {
  factory CopyWith$Fragment$Settings(
    Fragment$Settings instance,
    TRes Function(Fragment$Settings) then,
  ) = _CopyWithImpl$Fragment$Settings;

  factory CopyWith$Fragment$Settings.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Settings;

  TRes call({
    int? id,
    String? name,
    String? about,
    Fragment$Settings$avatar? avatar,
    String? bannerImage,
    int? unreadNotificationCount,
    int? donatorTier,
    String? donatorBadge,
    List<Enum$ModRole?>? moderatorRoles,
    Fragment$Settings$options? options,
    Fragment$MediaListOptions? mediaListOptions,
    String? $__typename,
  });
  CopyWith$Fragment$Settings$avatar<TRes> get avatar;
  CopyWith$Fragment$Settings$options<TRes> get options;
  CopyWith$Fragment$MediaListOptions<TRes> get mediaListOptions;
}

class _CopyWithImpl$Fragment$Settings<TRes>
    implements CopyWith$Fragment$Settings<TRes> {
  _CopyWithImpl$Fragment$Settings(
    this._instance,
    this._then,
  );

  final Fragment$Settings _instance;

  final TRes Function(Fragment$Settings) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? about = _undefined,
    Object? avatar = _undefined,
    Object? bannerImage = _undefined,
    Object? unreadNotificationCount = _undefined,
    Object? donatorTier = _undefined,
    Object? donatorBadge = _undefined,
    Object? moderatorRoles = _undefined,
    Object? options = _undefined,
    Object? mediaListOptions = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Settings(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        about: about == _undefined ? _instance.about : (about as String?),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$Settings$avatar?),
        bannerImage: bannerImage == _undefined
            ? _instance.bannerImage
            : (bannerImage as String?),
        unreadNotificationCount: unreadNotificationCount == _undefined
            ? _instance.unreadNotificationCount
            : (unreadNotificationCount as int?),
        donatorTier: donatorTier == _undefined
            ? _instance.donatorTier
            : (donatorTier as int?),
        donatorBadge: donatorBadge == _undefined
            ? _instance.donatorBadge
            : (donatorBadge as String?),
        moderatorRoles: moderatorRoles == _undefined
            ? _instance.moderatorRoles
            : (moderatorRoles as List<Enum$ModRole?>?),
        options: options == _undefined
            ? _instance.options
            : (options as Fragment$Settings$options?),
        mediaListOptions: mediaListOptions == _undefined
            ? _instance.mediaListOptions
            : (mediaListOptions as Fragment$MediaListOptions?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$Settings$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$Settings$avatar.stub(_then(_instance))
        : CopyWith$Fragment$Settings$avatar(
            local$avatar, (e) => call(avatar: e));
  }

  CopyWith$Fragment$Settings$options<TRes> get options {
    final local$options = _instance.options;
    return local$options == null
        ? CopyWith$Fragment$Settings$options.stub(_then(_instance))
        : CopyWith$Fragment$Settings$options(
            local$options, (e) => call(options: e));
  }

  CopyWith$Fragment$MediaListOptions<TRes> get mediaListOptions {
    final local$mediaListOptions = _instance.mediaListOptions;
    return local$mediaListOptions == null
        ? CopyWith$Fragment$MediaListOptions.stub(_then(_instance))
        : CopyWith$Fragment$MediaListOptions(
            local$mediaListOptions, (e) => call(mediaListOptions: e));
  }
}

class _CopyWithStubImpl$Fragment$Settings<TRes>
    implements CopyWith$Fragment$Settings<TRes> {
  _CopyWithStubImpl$Fragment$Settings(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? about,
    Fragment$Settings$avatar? avatar,
    String? bannerImage,
    int? unreadNotificationCount,
    int? donatorTier,
    String? donatorBadge,
    List<Enum$ModRole?>? moderatorRoles,
    Fragment$Settings$options? options,
    Fragment$MediaListOptions? mediaListOptions,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$Settings$avatar<TRes> get avatar =>
      CopyWith$Fragment$Settings$avatar.stub(_res);

  CopyWith$Fragment$Settings$options<TRes> get options =>
      CopyWith$Fragment$Settings$options.stub(_res);

  CopyWith$Fragment$MediaListOptions<TRes> get mediaListOptions =>
      CopyWith$Fragment$MediaListOptions.stub(_res);
}

const fragmentDefinitionSettings = FragmentDefinitionNode(
  name: NameNode(value: 'Settings'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'User'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'about'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'avatar'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'medium'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'bannerImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'unreadNotificationCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'donatorTier'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'donatorBadge'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'moderatorRoles'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'options'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'titleLanguage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'staffNameLanguage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'restrictMessagesToFollowing'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'airingNotifications'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'displayAdultContent'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'profileColor'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'timezone'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'activityMergeTime'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'notificationOptions'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'enabled'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'disabledListActivity'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'type'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: 'disabled'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'mediaListOptions'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'MediaListOptions'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentSettings = DocumentNode(definitions: [
  fragmentDefinitionSettings,
  fragmentDefinitionMediaListOptions,
]);

extension ClientExtension$Fragment$Settings on graphql.GraphQLClient {
  void writeFragment$Settings({
    required Fragment$Settings data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'Settings',
            document: documentNodeFragmentSettings,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$Settings? readFragment$Settings({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'Settings',
          document: documentNodeFragmentSettings,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$Settings.fromJson(result);
  }
}

class Fragment$Settings$avatar {
  Fragment$Settings$avatar({
    this.medium,
    this.large,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$Settings$avatar.fromJson(Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$Settings$avatar(
      medium: (l$medium as String?),
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Settings$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Settings$avatar
    on Fragment$Settings$avatar {
  CopyWith$Fragment$Settings$avatar<Fragment$Settings$avatar> get copyWith =>
      CopyWith$Fragment$Settings$avatar(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Settings$avatar<TRes> {
  factory CopyWith$Fragment$Settings$avatar(
    Fragment$Settings$avatar instance,
    TRes Function(Fragment$Settings$avatar) then,
  ) = _CopyWithImpl$Fragment$Settings$avatar;

  factory CopyWith$Fragment$Settings$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Settings$avatar;

  TRes call({
    String? medium,
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$Settings$avatar<TRes>
    implements CopyWith$Fragment$Settings$avatar<TRes> {
  _CopyWithImpl$Fragment$Settings$avatar(
    this._instance,
    this._then,
  );

  final Fragment$Settings$avatar _instance;

  final TRes Function(Fragment$Settings$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Settings$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$Settings$avatar<TRes>
    implements CopyWith$Fragment$Settings$avatar<TRes> {
  _CopyWithStubImpl$Fragment$Settings$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$Settings$options {
  Fragment$Settings$options({
    this.titleLanguage,
    this.staffNameLanguage,
    this.restrictMessagesToFollowing,
    this.airingNotifications,
    this.displayAdultContent,
    this.profileColor,
    this.timezone,
    this.activityMergeTime,
    this.notificationOptions,
    this.disabledListActivity,
    this.$__typename = 'UserOptions',
  });

  factory Fragment$Settings$options.fromJson(Map<String, dynamic> json) {
    final l$titleLanguage = json['titleLanguage'];
    final l$staffNameLanguage = json['staffNameLanguage'];
    final l$restrictMessagesToFollowing = json['restrictMessagesToFollowing'];
    final l$airingNotifications = json['airingNotifications'];
    final l$displayAdultContent = json['displayAdultContent'];
    final l$profileColor = json['profileColor'];
    final l$timezone = json['timezone'];
    final l$activityMergeTime = json['activityMergeTime'];
    final l$notificationOptions = json['notificationOptions'];
    final l$disabledListActivity = json['disabledListActivity'];
    final l$$__typename = json['__typename'];
    return Fragment$Settings$options(
      titleLanguage: l$titleLanguage == null
          ? null
          : fromJson$Enum$UserTitleLanguage((l$titleLanguage as String)),
      staffNameLanguage: l$staffNameLanguage == null
          ? null
          : fromJson$Enum$UserStaffNameLanguage(
              (l$staffNameLanguage as String)),
      restrictMessagesToFollowing: (l$restrictMessagesToFollowing as bool?),
      airingNotifications: (l$airingNotifications as bool?),
      displayAdultContent: (l$displayAdultContent as bool?),
      profileColor: (l$profileColor as String?),
      timezone: (l$timezone as String?),
      activityMergeTime: (l$activityMergeTime as int?),
      notificationOptions: (l$notificationOptions as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$Settings$options$notificationOptions.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      disabledListActivity: (l$disabledListActivity as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Fragment$Settings$options$disabledListActivity.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final Enum$UserTitleLanguage? titleLanguage;

  final Enum$UserStaffNameLanguage? staffNameLanguage;

  final bool? restrictMessagesToFollowing;

  final bool? airingNotifications;

  final bool? displayAdultContent;

  final String? profileColor;

  final String? timezone;

  final int? activityMergeTime;

  final List<Fragment$Settings$options$notificationOptions?>?
      notificationOptions;

  final List<Fragment$Settings$options$disabledListActivity?>?
      disabledListActivity;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$titleLanguage = titleLanguage;
    _resultData['titleLanguage'] = l$titleLanguage == null
        ? null
        : toJson$Enum$UserTitleLanguage(l$titleLanguage);
    final l$staffNameLanguage = staffNameLanguage;
    _resultData['staffNameLanguage'] = l$staffNameLanguage == null
        ? null
        : toJson$Enum$UserStaffNameLanguage(l$staffNameLanguage);
    final l$restrictMessagesToFollowing = restrictMessagesToFollowing;
    _resultData['restrictMessagesToFollowing'] = l$restrictMessagesToFollowing;
    final l$airingNotifications = airingNotifications;
    _resultData['airingNotifications'] = l$airingNotifications;
    final l$displayAdultContent = displayAdultContent;
    _resultData['displayAdultContent'] = l$displayAdultContent;
    final l$profileColor = profileColor;
    _resultData['profileColor'] = l$profileColor;
    final l$timezone = timezone;
    _resultData['timezone'] = l$timezone;
    final l$activityMergeTime = activityMergeTime;
    _resultData['activityMergeTime'] = l$activityMergeTime;
    final l$notificationOptions = notificationOptions;
    _resultData['notificationOptions'] =
        l$notificationOptions?.map((e) => e?.toJson()).toList();
    final l$disabledListActivity = disabledListActivity;
    _resultData['disabledListActivity'] =
        l$disabledListActivity?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$titleLanguage = titleLanguage;
    final l$staffNameLanguage = staffNameLanguage;
    final l$restrictMessagesToFollowing = restrictMessagesToFollowing;
    final l$airingNotifications = airingNotifications;
    final l$displayAdultContent = displayAdultContent;
    final l$profileColor = profileColor;
    final l$timezone = timezone;
    final l$activityMergeTime = activityMergeTime;
    final l$notificationOptions = notificationOptions;
    final l$disabledListActivity = disabledListActivity;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$titleLanguage,
      l$staffNameLanguage,
      l$restrictMessagesToFollowing,
      l$airingNotifications,
      l$displayAdultContent,
      l$profileColor,
      l$timezone,
      l$activityMergeTime,
      l$notificationOptions == null
          ? null
          : Object.hashAll(l$notificationOptions.map((v) => v)),
      l$disabledListActivity == null
          ? null
          : Object.hashAll(l$disabledListActivity.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Settings$options ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$titleLanguage = titleLanguage;
    final lOther$titleLanguage = other.titleLanguage;
    if (l$titleLanguage != lOther$titleLanguage) {
      return false;
    }
    final l$staffNameLanguage = staffNameLanguage;
    final lOther$staffNameLanguage = other.staffNameLanguage;
    if (l$staffNameLanguage != lOther$staffNameLanguage) {
      return false;
    }
    final l$restrictMessagesToFollowing = restrictMessagesToFollowing;
    final lOther$restrictMessagesToFollowing =
        other.restrictMessagesToFollowing;
    if (l$restrictMessagesToFollowing != lOther$restrictMessagesToFollowing) {
      return false;
    }
    final l$airingNotifications = airingNotifications;
    final lOther$airingNotifications = other.airingNotifications;
    if (l$airingNotifications != lOther$airingNotifications) {
      return false;
    }
    final l$displayAdultContent = displayAdultContent;
    final lOther$displayAdultContent = other.displayAdultContent;
    if (l$displayAdultContent != lOther$displayAdultContent) {
      return false;
    }
    final l$profileColor = profileColor;
    final lOther$profileColor = other.profileColor;
    if (l$profileColor != lOther$profileColor) {
      return false;
    }
    final l$timezone = timezone;
    final lOther$timezone = other.timezone;
    if (l$timezone != lOther$timezone) {
      return false;
    }
    final l$activityMergeTime = activityMergeTime;
    final lOther$activityMergeTime = other.activityMergeTime;
    if (l$activityMergeTime != lOther$activityMergeTime) {
      return false;
    }
    final l$notificationOptions = notificationOptions;
    final lOther$notificationOptions = other.notificationOptions;
    if (l$notificationOptions != null && lOther$notificationOptions != null) {
      if (l$notificationOptions.length != lOther$notificationOptions.length) {
        return false;
      }
      for (int i = 0; i < l$notificationOptions.length; i++) {
        final l$notificationOptions$entry = l$notificationOptions[i];
        final lOther$notificationOptions$entry = lOther$notificationOptions[i];
        if (l$notificationOptions$entry != lOther$notificationOptions$entry) {
          return false;
        }
      }
    } else if (l$notificationOptions != lOther$notificationOptions) {
      return false;
    }
    final l$disabledListActivity = disabledListActivity;
    final lOther$disabledListActivity = other.disabledListActivity;
    if (l$disabledListActivity != null && lOther$disabledListActivity != null) {
      if (l$disabledListActivity.length != lOther$disabledListActivity.length) {
        return false;
      }
      for (int i = 0; i < l$disabledListActivity.length; i++) {
        final l$disabledListActivity$entry = l$disabledListActivity[i];
        final lOther$disabledListActivity$entry =
            lOther$disabledListActivity[i];
        if (l$disabledListActivity$entry != lOther$disabledListActivity$entry) {
          return false;
        }
      }
    } else if (l$disabledListActivity != lOther$disabledListActivity) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Settings$options
    on Fragment$Settings$options {
  CopyWith$Fragment$Settings$options<Fragment$Settings$options> get copyWith =>
      CopyWith$Fragment$Settings$options(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$Settings$options<TRes> {
  factory CopyWith$Fragment$Settings$options(
    Fragment$Settings$options instance,
    TRes Function(Fragment$Settings$options) then,
  ) = _CopyWithImpl$Fragment$Settings$options;

  factory CopyWith$Fragment$Settings$options.stub(TRes res) =
      _CopyWithStubImpl$Fragment$Settings$options;

  TRes call({
    Enum$UserTitleLanguage? titleLanguage,
    Enum$UserStaffNameLanguage? staffNameLanguage,
    bool? restrictMessagesToFollowing,
    bool? airingNotifications,
    bool? displayAdultContent,
    String? profileColor,
    String? timezone,
    int? activityMergeTime,
    List<Fragment$Settings$options$notificationOptions?>? notificationOptions,
    List<Fragment$Settings$options$disabledListActivity?>? disabledListActivity,
    String? $__typename,
  });
  TRes notificationOptions(
      Iterable<Fragment$Settings$options$notificationOptions?>? Function(
              Iterable<
                  CopyWith$Fragment$Settings$options$notificationOptions<
                      Fragment$Settings$options$notificationOptions>?>?)
          _fn);
  TRes disabledListActivity(
      Iterable<Fragment$Settings$options$disabledListActivity?>? Function(
              Iterable<
                  CopyWith$Fragment$Settings$options$disabledListActivity<
                      Fragment$Settings$options$disabledListActivity>?>?)
          _fn);
}

class _CopyWithImpl$Fragment$Settings$options<TRes>
    implements CopyWith$Fragment$Settings$options<TRes> {
  _CopyWithImpl$Fragment$Settings$options(
    this._instance,
    this._then,
  );

  final Fragment$Settings$options _instance;

  final TRes Function(Fragment$Settings$options) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? titleLanguage = _undefined,
    Object? staffNameLanguage = _undefined,
    Object? restrictMessagesToFollowing = _undefined,
    Object? airingNotifications = _undefined,
    Object? displayAdultContent = _undefined,
    Object? profileColor = _undefined,
    Object? timezone = _undefined,
    Object? activityMergeTime = _undefined,
    Object? notificationOptions = _undefined,
    Object? disabledListActivity = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Settings$options(
        titleLanguage: titleLanguage == _undefined
            ? _instance.titleLanguage
            : (titleLanguage as Enum$UserTitleLanguage?),
        staffNameLanguage: staffNameLanguage == _undefined
            ? _instance.staffNameLanguage
            : (staffNameLanguage as Enum$UserStaffNameLanguage?),
        restrictMessagesToFollowing: restrictMessagesToFollowing == _undefined
            ? _instance.restrictMessagesToFollowing
            : (restrictMessagesToFollowing as bool?),
        airingNotifications: airingNotifications == _undefined
            ? _instance.airingNotifications
            : (airingNotifications as bool?),
        displayAdultContent: displayAdultContent == _undefined
            ? _instance.displayAdultContent
            : (displayAdultContent as bool?),
        profileColor: profileColor == _undefined
            ? _instance.profileColor
            : (profileColor as String?),
        timezone:
            timezone == _undefined ? _instance.timezone : (timezone as String?),
        activityMergeTime: activityMergeTime == _undefined
            ? _instance.activityMergeTime
            : (activityMergeTime as int?),
        notificationOptions: notificationOptions == _undefined
            ? _instance.notificationOptions
            : (notificationOptions
                as List<Fragment$Settings$options$notificationOptions?>?),
        disabledListActivity: disabledListActivity == _undefined
            ? _instance.disabledListActivity
            : (disabledListActivity
                as List<Fragment$Settings$options$disabledListActivity?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes notificationOptions(
          Iterable<Fragment$Settings$options$notificationOptions?>? Function(
                  Iterable<
                      CopyWith$Fragment$Settings$options$notificationOptions<
                          Fragment$Settings$options$notificationOptions>?>?)
              _fn) =>
      call(
          notificationOptions:
              _fn(_instance.notificationOptions?.map((e) => e == null
                  ? null
                  : CopyWith$Fragment$Settings$options$notificationOptions(
                      e,
                      (i) => i,
                    )))?.toList());

  TRes disabledListActivity(
          Iterable<Fragment$Settings$options$disabledListActivity?>? Function(
                  Iterable<
                      CopyWith$Fragment$Settings$options$disabledListActivity<
                          Fragment$Settings$options$disabledListActivity>?>?)
              _fn) =>
      call(
          disabledListActivity:
              _fn(_instance.disabledListActivity?.map((e) => e == null
                  ? null
                  : CopyWith$Fragment$Settings$options$disabledListActivity(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Fragment$Settings$options<TRes>
    implements CopyWith$Fragment$Settings$options<TRes> {
  _CopyWithStubImpl$Fragment$Settings$options(this._res);

  TRes _res;

  call({
    Enum$UserTitleLanguage? titleLanguage,
    Enum$UserStaffNameLanguage? staffNameLanguage,
    bool? restrictMessagesToFollowing,
    bool? airingNotifications,
    bool? displayAdultContent,
    String? profileColor,
    String? timezone,
    int? activityMergeTime,
    List<Fragment$Settings$options$notificationOptions?>? notificationOptions,
    List<Fragment$Settings$options$disabledListActivity?>? disabledListActivity,
    String? $__typename,
  }) =>
      _res;

  notificationOptions(_fn) => _res;

  disabledListActivity(_fn) => _res;
}

class Fragment$Settings$options$notificationOptions {
  Fragment$Settings$options$notificationOptions({
    this.type,
    this.enabled,
    this.$__typename = 'NotificationOption',
  });

  factory Fragment$Settings$options$notificationOptions.fromJson(
      Map<String, dynamic> json) {
    final l$type = json['type'];
    final l$enabled = json['enabled'];
    final l$$__typename = json['__typename'];
    return Fragment$Settings$options$notificationOptions(
      type: l$type == null
          ? null
          : fromJson$Enum$NotificationType((l$type as String)),
      enabled: (l$enabled as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final Enum$NotificationType? type;

  final bool? enabled;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$type = type;
    _resultData['type'] =
        l$type == null ? null : toJson$Enum$NotificationType(l$type);
    final l$enabled = enabled;
    _resultData['enabled'] = l$enabled;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$type = type;
    final l$enabled = enabled;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$type,
      l$enabled,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Settings$options$notificationOptions ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$enabled = enabled;
    final lOther$enabled = other.enabled;
    if (l$enabled != lOther$enabled) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Settings$options$notificationOptions
    on Fragment$Settings$options$notificationOptions {
  CopyWith$Fragment$Settings$options$notificationOptions<
          Fragment$Settings$options$notificationOptions>
      get copyWith => CopyWith$Fragment$Settings$options$notificationOptions(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$Settings$options$notificationOptions<TRes> {
  factory CopyWith$Fragment$Settings$options$notificationOptions(
    Fragment$Settings$options$notificationOptions instance,
    TRes Function(Fragment$Settings$options$notificationOptions) then,
  ) = _CopyWithImpl$Fragment$Settings$options$notificationOptions;

  factory CopyWith$Fragment$Settings$options$notificationOptions.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$Settings$options$notificationOptions;

  TRes call({
    Enum$NotificationType? type,
    bool? enabled,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$Settings$options$notificationOptions<TRes>
    implements CopyWith$Fragment$Settings$options$notificationOptions<TRes> {
  _CopyWithImpl$Fragment$Settings$options$notificationOptions(
    this._instance,
    this._then,
  );

  final Fragment$Settings$options$notificationOptions _instance;

  final TRes Function(Fragment$Settings$options$notificationOptions) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? type = _undefined,
    Object? enabled = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Settings$options$notificationOptions(
        type: type == _undefined
            ? _instance.type
            : (type as Enum$NotificationType?),
        enabled: enabled == _undefined ? _instance.enabled : (enabled as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$Settings$options$notificationOptions<TRes>
    implements CopyWith$Fragment$Settings$options$notificationOptions<TRes> {
  _CopyWithStubImpl$Fragment$Settings$options$notificationOptions(this._res);

  TRes _res;

  call({
    Enum$NotificationType? type,
    bool? enabled,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$Settings$options$disabledListActivity {
  Fragment$Settings$options$disabledListActivity({
    this.type,
    this.disabled,
    this.$__typename = 'ListActivityOption',
  });

  factory Fragment$Settings$options$disabledListActivity.fromJson(
      Map<String, dynamic> json) {
    final l$type = json['type'];
    final l$disabled = json['disabled'];
    final l$$__typename = json['__typename'];
    return Fragment$Settings$options$disabledListActivity(
      type: l$type == null
          ? null
          : fromJson$Enum$MediaListStatus((l$type as String)),
      disabled: (l$disabled as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final Enum$MediaListStatus? type;

  final bool? disabled;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$type = type;
    _resultData['type'] =
        l$type == null ? null : toJson$Enum$MediaListStatus(l$type);
    final l$disabled = disabled;
    _resultData['disabled'] = l$disabled;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$type = type;
    final l$disabled = disabled;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$type,
      l$disabled,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$Settings$options$disabledListActivity ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$Settings$options$disabledListActivity
    on Fragment$Settings$options$disabledListActivity {
  CopyWith$Fragment$Settings$options$disabledListActivity<
          Fragment$Settings$options$disabledListActivity>
      get copyWith => CopyWith$Fragment$Settings$options$disabledListActivity(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$Settings$options$disabledListActivity<TRes> {
  factory CopyWith$Fragment$Settings$options$disabledListActivity(
    Fragment$Settings$options$disabledListActivity instance,
    TRes Function(Fragment$Settings$options$disabledListActivity) then,
  ) = _CopyWithImpl$Fragment$Settings$options$disabledListActivity;

  factory CopyWith$Fragment$Settings$options$disabledListActivity.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$Settings$options$disabledListActivity;

  TRes call({
    Enum$MediaListStatus? type,
    bool? disabled,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$Settings$options$disabledListActivity<TRes>
    implements CopyWith$Fragment$Settings$options$disabledListActivity<TRes> {
  _CopyWithImpl$Fragment$Settings$options$disabledListActivity(
    this._instance,
    this._then,
  );

  final Fragment$Settings$options$disabledListActivity _instance;

  final TRes Function(Fragment$Settings$options$disabledListActivity) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? type = _undefined,
    Object? disabled = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$Settings$options$disabledListActivity(
        type: type == _undefined
            ? _instance.type
            : (type as Enum$MediaListStatus?),
        disabled:
            disabled == _undefined ? _instance.disabled : (disabled as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$Settings$options$disabledListActivity<TRes>
    implements CopyWith$Fragment$Settings$options$disabledListActivity<TRes> {
  _CopyWithStubImpl$Fragment$Settings$options$disabledListActivity(this._res);

  TRes _res;

  call({
    Enum$MediaListStatus? type,
    bool? disabled,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$UserInfo {
  Fragment$UserInfo({
    required this.id,
    required this.name,
    this.avatar,
    this.bannerImage,
    this.about,
    this.unreadNotificationCount,
    this.isFollowing,
    this.isFollower,
    this.isBlocked,
    this.statistics,
    this.$__typename = 'User',
  });

  factory Fragment$UserInfo.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$bannerImage = json['bannerImage'];
    final l$about = json['about'];
    final l$unreadNotificationCount = json['unreadNotificationCount'];
    final l$isFollowing = json['isFollowing'];
    final l$isFollower = json['isFollower'];
    final l$isBlocked = json['isBlocked'];
    final l$statistics = json['statistics'];
    final l$$__typename = json['__typename'];
    return Fragment$UserInfo(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$UserInfo$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      bannerImage: (l$bannerImage as String?),
      about: (l$about as String?),
      unreadNotificationCount: (l$unreadNotificationCount as int?),
      isFollowing: (l$isFollowing as bool?),
      isFollower: (l$isFollower as bool?),
      isBlocked: (l$isBlocked as bool?),
      statistics: l$statistics == null
          ? null
          : Fragment$UserInfo$statistics.fromJson(
              (l$statistics as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$UserInfo$avatar? avatar;

  final String? bannerImage;

  final String? about;

  final int? unreadNotificationCount;

  final bool? isFollowing;

  final bool? isFollower;

  final bool? isBlocked;

  final Fragment$UserInfo$statistics? statistics;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$bannerImage = bannerImage;
    _resultData['bannerImage'] = l$bannerImage;
    final l$about = about;
    _resultData['about'] = l$about;
    final l$unreadNotificationCount = unreadNotificationCount;
    _resultData['unreadNotificationCount'] = l$unreadNotificationCount;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$isFollower = isFollower;
    _resultData['isFollower'] = l$isFollower;
    final l$isBlocked = isBlocked;
    _resultData['isBlocked'] = l$isBlocked;
    final l$statistics = statistics;
    _resultData['statistics'] = l$statistics?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$bannerImage = bannerImage;
    final l$about = about;
    final l$unreadNotificationCount = unreadNotificationCount;
    final l$isFollowing = isFollowing;
    final l$isFollower = isFollower;
    final l$isBlocked = isBlocked;
    final l$statistics = statistics;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$bannerImage,
      l$about,
      l$unreadNotificationCount,
      l$isFollowing,
      l$isFollower,
      l$isBlocked,
      l$statistics,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$UserInfo || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$bannerImage = bannerImage;
    final lOther$bannerImage = other.bannerImage;
    if (l$bannerImage != lOther$bannerImage) {
      return false;
    }
    final l$about = about;
    final lOther$about = other.about;
    if (l$about != lOther$about) {
      return false;
    }
    final l$unreadNotificationCount = unreadNotificationCount;
    final lOther$unreadNotificationCount = other.unreadNotificationCount;
    if (l$unreadNotificationCount != lOther$unreadNotificationCount) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$isFollower = isFollower;
    final lOther$isFollower = other.isFollower;
    if (l$isFollower != lOther$isFollower) {
      return false;
    }
    final l$isBlocked = isBlocked;
    final lOther$isBlocked = other.isBlocked;
    if (l$isBlocked != lOther$isBlocked) {
      return false;
    }
    final l$statistics = statistics;
    final lOther$statistics = other.statistics;
    if (l$statistics != lOther$statistics) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$UserInfo on Fragment$UserInfo {
  CopyWith$Fragment$UserInfo<Fragment$UserInfo> get copyWith =>
      CopyWith$Fragment$UserInfo(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$UserInfo<TRes> {
  factory CopyWith$Fragment$UserInfo(
    Fragment$UserInfo instance,
    TRes Function(Fragment$UserInfo) then,
  ) = _CopyWithImpl$Fragment$UserInfo;

  factory CopyWith$Fragment$UserInfo.stub(TRes res) =
      _CopyWithStubImpl$Fragment$UserInfo;

  TRes call({
    int? id,
    String? name,
    Fragment$UserInfo$avatar? avatar,
    String? bannerImage,
    String? about,
    int? unreadNotificationCount,
    bool? isFollowing,
    bool? isFollower,
    bool? isBlocked,
    Fragment$UserInfo$statistics? statistics,
    String? $__typename,
  });
  CopyWith$Fragment$UserInfo$avatar<TRes> get avatar;
  CopyWith$Fragment$UserInfo$statistics<TRes> get statistics;
}

class _CopyWithImpl$Fragment$UserInfo<TRes>
    implements CopyWith$Fragment$UserInfo<TRes> {
  _CopyWithImpl$Fragment$UserInfo(
    this._instance,
    this._then,
  );

  final Fragment$UserInfo _instance;

  final TRes Function(Fragment$UserInfo) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? bannerImage = _undefined,
    Object? about = _undefined,
    Object? unreadNotificationCount = _undefined,
    Object? isFollowing = _undefined,
    Object? isFollower = _undefined,
    Object? isBlocked = _undefined,
    Object? statistics = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$UserInfo(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$UserInfo$avatar?),
        bannerImage: bannerImage == _undefined
            ? _instance.bannerImage
            : (bannerImage as String?),
        about: about == _undefined ? _instance.about : (about as String?),
        unreadNotificationCount: unreadNotificationCount == _undefined
            ? _instance.unreadNotificationCount
            : (unreadNotificationCount as int?),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        isFollower: isFollower == _undefined
            ? _instance.isFollower
            : (isFollower as bool?),
        isBlocked: isBlocked == _undefined
            ? _instance.isBlocked
            : (isBlocked as bool?),
        statistics: statistics == _undefined
            ? _instance.statistics
            : (statistics as Fragment$UserInfo$statistics?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$UserInfo$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$UserInfo$avatar.stub(_then(_instance))
        : CopyWith$Fragment$UserInfo$avatar(
            local$avatar, (e) => call(avatar: e));
  }

  CopyWith$Fragment$UserInfo$statistics<TRes> get statistics {
    final local$statistics = _instance.statistics;
    return local$statistics == null
        ? CopyWith$Fragment$UserInfo$statistics.stub(_then(_instance))
        : CopyWith$Fragment$UserInfo$statistics(
            local$statistics, (e) => call(statistics: e));
  }
}

class _CopyWithStubImpl$Fragment$UserInfo<TRes>
    implements CopyWith$Fragment$UserInfo<TRes> {
  _CopyWithStubImpl$Fragment$UserInfo(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$UserInfo$avatar? avatar,
    String? bannerImage,
    String? about,
    int? unreadNotificationCount,
    bool? isFollowing,
    bool? isFollower,
    bool? isBlocked,
    Fragment$UserInfo$statistics? statistics,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$UserInfo$avatar<TRes> get avatar =>
      CopyWith$Fragment$UserInfo$avatar.stub(_res);

  CopyWith$Fragment$UserInfo$statistics<TRes> get statistics =>
      CopyWith$Fragment$UserInfo$statistics.stub(_res);
}

const fragmentDefinitionUserInfo = FragmentDefinitionNode(
  name: NameNode(value: 'UserInfo'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'User'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'name'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'avatar'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'bannerImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'about'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'unreadNotificationCount'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isFollowing'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isFollower'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'isBlocked'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'statistics'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'anime'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'count'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'manga'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'count'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentUserInfo = DocumentNode(definitions: [
  fragmentDefinitionUserInfo,
]);

extension ClientExtension$Fragment$UserInfo on graphql.GraphQLClient {
  void writeFragment$UserInfo({
    required Fragment$UserInfo data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'UserInfo',
            document: documentNodeFragmentUserInfo,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$UserInfo? readFragment$UserInfo({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'UserInfo',
          document: documentNodeFragmentUserInfo,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$UserInfo.fromJson(result);
  }
}

class Fragment$UserInfo$avatar {
  Fragment$UserInfo$avatar({
    this.large,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$UserInfo$avatar.fromJson(Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$$__typename = json['__typename'];
    return Fragment$UserInfo$avatar(
      large: (l$large as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$UserInfo$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$UserInfo$avatar
    on Fragment$UserInfo$avatar {
  CopyWith$Fragment$UserInfo$avatar<Fragment$UserInfo$avatar> get copyWith =>
      CopyWith$Fragment$UserInfo$avatar(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$UserInfo$avatar<TRes> {
  factory CopyWith$Fragment$UserInfo$avatar(
    Fragment$UserInfo$avatar instance,
    TRes Function(Fragment$UserInfo$avatar) then,
  ) = _CopyWithImpl$Fragment$UserInfo$avatar;

  factory CopyWith$Fragment$UserInfo$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$UserInfo$avatar;

  TRes call({
    String? large,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$UserInfo$avatar<TRes>
    implements CopyWith$Fragment$UserInfo$avatar<TRes> {
  _CopyWithImpl$Fragment$UserInfo$avatar(
    this._instance,
    this._then,
  );

  final Fragment$UserInfo$avatar _instance;

  final TRes Function(Fragment$UserInfo$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$UserInfo$avatar(
        large: large == _undefined ? _instance.large : (large as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$UserInfo$avatar<TRes>
    implements CopyWith$Fragment$UserInfo$avatar<TRes> {
  _CopyWithStubImpl$Fragment$UserInfo$avatar(this._res);

  TRes _res;

  call({
    String? large,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$UserInfo$statistics {
  Fragment$UserInfo$statistics({
    this.anime,
    this.manga,
    this.$__typename = 'UserStatisticTypes',
  });

  factory Fragment$UserInfo$statistics.fromJson(Map<String, dynamic> json) {
    final l$anime = json['anime'];
    final l$manga = json['manga'];
    final l$$__typename = json['__typename'];
    return Fragment$UserInfo$statistics(
      anime: l$anime == null
          ? null
          : Fragment$UserInfo$statistics$anime.fromJson(
              (l$anime as Map<String, dynamic>)),
      manga: l$manga == null
          ? null
          : Fragment$UserInfo$statistics$manga.fromJson(
              (l$manga as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Fragment$UserInfo$statistics$anime? anime;

  final Fragment$UserInfo$statistics$manga? manga;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$anime = anime;
    _resultData['anime'] = l$anime?.toJson();
    final l$manga = manga;
    _resultData['manga'] = l$manga?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$anime = anime;
    final l$manga = manga;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$anime,
      l$manga,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$UserInfo$statistics ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$anime = anime;
    final lOther$anime = other.anime;
    if (l$anime != lOther$anime) {
      return false;
    }
    final l$manga = manga;
    final lOther$manga = other.manga;
    if (l$manga != lOther$manga) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$UserInfo$statistics
    on Fragment$UserInfo$statistics {
  CopyWith$Fragment$UserInfo$statistics<Fragment$UserInfo$statistics>
      get copyWith => CopyWith$Fragment$UserInfo$statistics(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$UserInfo$statistics<TRes> {
  factory CopyWith$Fragment$UserInfo$statistics(
    Fragment$UserInfo$statistics instance,
    TRes Function(Fragment$UserInfo$statistics) then,
  ) = _CopyWithImpl$Fragment$UserInfo$statistics;

  factory CopyWith$Fragment$UserInfo$statistics.stub(TRes res) =
      _CopyWithStubImpl$Fragment$UserInfo$statistics;

  TRes call({
    Fragment$UserInfo$statistics$anime? anime,
    Fragment$UserInfo$statistics$manga? manga,
    String? $__typename,
  });
  CopyWith$Fragment$UserInfo$statistics$anime<TRes> get anime;
  CopyWith$Fragment$UserInfo$statistics$manga<TRes> get manga;
}

class _CopyWithImpl$Fragment$UserInfo$statistics<TRes>
    implements CopyWith$Fragment$UserInfo$statistics<TRes> {
  _CopyWithImpl$Fragment$UserInfo$statistics(
    this._instance,
    this._then,
  );

  final Fragment$UserInfo$statistics _instance;

  final TRes Function(Fragment$UserInfo$statistics) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? anime = _undefined,
    Object? manga = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$UserInfo$statistics(
        anime: anime == _undefined
            ? _instance.anime
            : (anime as Fragment$UserInfo$statistics$anime?),
        manga: manga == _undefined
            ? _instance.manga
            : (manga as Fragment$UserInfo$statistics$manga?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$UserInfo$statistics$anime<TRes> get anime {
    final local$anime = _instance.anime;
    return local$anime == null
        ? CopyWith$Fragment$UserInfo$statistics$anime.stub(_then(_instance))
        : CopyWith$Fragment$UserInfo$statistics$anime(
            local$anime, (e) => call(anime: e));
  }

  CopyWith$Fragment$UserInfo$statistics$manga<TRes> get manga {
    final local$manga = _instance.manga;
    return local$manga == null
        ? CopyWith$Fragment$UserInfo$statistics$manga.stub(_then(_instance))
        : CopyWith$Fragment$UserInfo$statistics$manga(
            local$manga, (e) => call(manga: e));
  }
}

class _CopyWithStubImpl$Fragment$UserInfo$statistics<TRes>
    implements CopyWith$Fragment$UserInfo$statistics<TRes> {
  _CopyWithStubImpl$Fragment$UserInfo$statistics(this._res);

  TRes _res;

  call({
    Fragment$UserInfo$statistics$anime? anime,
    Fragment$UserInfo$statistics$manga? manga,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$UserInfo$statistics$anime<TRes> get anime =>
      CopyWith$Fragment$UserInfo$statistics$anime.stub(_res);

  CopyWith$Fragment$UserInfo$statistics$manga<TRes> get manga =>
      CopyWith$Fragment$UserInfo$statistics$manga.stub(_res);
}

class Fragment$UserInfo$statistics$anime {
  Fragment$UserInfo$statistics$anime({
    required this.count,
    this.$__typename = 'UserStatistics',
  });

  factory Fragment$UserInfo$statistics$anime.fromJson(
      Map<String, dynamic> json) {
    final l$count = json['count'];
    final l$$__typename = json['__typename'];
    return Fragment$UserInfo$statistics$anime(
      count: (l$count as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int count;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$count = count;
    _resultData['count'] = l$count;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$count,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$UserInfo$statistics$anime ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (l$count != lOther$count) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$UserInfo$statistics$anime
    on Fragment$UserInfo$statistics$anime {
  CopyWith$Fragment$UserInfo$statistics$anime<
          Fragment$UserInfo$statistics$anime>
      get copyWith => CopyWith$Fragment$UserInfo$statistics$anime(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$UserInfo$statistics$anime<TRes> {
  factory CopyWith$Fragment$UserInfo$statistics$anime(
    Fragment$UserInfo$statistics$anime instance,
    TRes Function(Fragment$UserInfo$statistics$anime) then,
  ) = _CopyWithImpl$Fragment$UserInfo$statistics$anime;

  factory CopyWith$Fragment$UserInfo$statistics$anime.stub(TRes res) =
      _CopyWithStubImpl$Fragment$UserInfo$statistics$anime;

  TRes call({
    int? count,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$UserInfo$statistics$anime<TRes>
    implements CopyWith$Fragment$UserInfo$statistics$anime<TRes> {
  _CopyWithImpl$Fragment$UserInfo$statistics$anime(
    this._instance,
    this._then,
  );

  final Fragment$UserInfo$statistics$anime _instance;

  final TRes Function(Fragment$UserInfo$statistics$anime) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$UserInfo$statistics$anime(
        count: count == _undefined || count == null
            ? _instance.count
            : (count as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$UserInfo$statistics$anime<TRes>
    implements CopyWith$Fragment$UserInfo$statistics$anime<TRes> {
  _CopyWithStubImpl$Fragment$UserInfo$statistics$anime(this._res);

  TRes _res;

  call({
    int? count,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$UserInfo$statistics$manga {
  Fragment$UserInfo$statistics$manga({
    required this.count,
    this.$__typename = 'UserStatistics',
  });

  factory Fragment$UserInfo$statistics$manga.fromJson(
      Map<String, dynamic> json) {
    final l$count = json['count'];
    final l$$__typename = json['__typename'];
    return Fragment$UserInfo$statistics$manga(
      count: (l$count as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int count;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$count = count;
    _resultData['count'] = l$count;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$count,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$UserInfo$statistics$manga ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (l$count != lOther$count) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$UserInfo$statistics$manga
    on Fragment$UserInfo$statistics$manga {
  CopyWith$Fragment$UserInfo$statistics$manga<
          Fragment$UserInfo$statistics$manga>
      get copyWith => CopyWith$Fragment$UserInfo$statistics$manga(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$UserInfo$statistics$manga<TRes> {
  factory CopyWith$Fragment$UserInfo$statistics$manga(
    Fragment$UserInfo$statistics$manga instance,
    TRes Function(Fragment$UserInfo$statistics$manga) then,
  ) = _CopyWithImpl$Fragment$UserInfo$statistics$manga;

  factory CopyWith$Fragment$UserInfo$statistics$manga.stub(TRes res) =
      _CopyWithStubImpl$Fragment$UserInfo$statistics$manga;

  TRes call({
    int? count,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$UserInfo$statistics$manga<TRes>
    implements CopyWith$Fragment$UserInfo$statistics$manga<TRes> {
  _CopyWithImpl$Fragment$UserInfo$statistics$manga(
    this._instance,
    this._then,
  );

  final Fragment$UserInfo$statistics$manga _instance;

  final TRes Function(Fragment$UserInfo$statistics$manga) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$UserInfo$statistics$manga(
        count: count == _undefined || count == null
            ? _instance.count
            : (count as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$UserInfo$statistics$manga<TRes>
    implements CopyWith$Fragment$UserInfo$statistics$manga<TRes> {
  _CopyWithStubImpl$Fragment$UserInfo$statistics$manga(this._res);

  TRes _res;

  call({
    int? count,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityLikeNotification {
  Fragment$ActivityLikeNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityLikeNotification',
  });

  factory Fragment$ActivityLikeNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityLikeNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityLikeNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityLikeNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityLikeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityLikeNotification
    on Fragment$ActivityLikeNotification {
  CopyWith$Fragment$ActivityLikeNotification<Fragment$ActivityLikeNotification>
      get copyWith => CopyWith$Fragment$ActivityLikeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityLikeNotification<TRes> {
  factory CopyWith$Fragment$ActivityLikeNotification(
    Fragment$ActivityLikeNotification instance,
    TRes Function(Fragment$ActivityLikeNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityLikeNotification;

  factory CopyWith$Fragment$ActivityLikeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityLikeNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityLikeNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityLikeNotification<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityLikeNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityLikeNotification _instance;

  final TRes Function(Fragment$ActivityLikeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityLikeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityLikeNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityLikeNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityLikeNotification$user.stub(_then(_instance))
        : CopyWith$Fragment$ActivityLikeNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityLikeNotification<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityLikeNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityLikeNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityLikeNotification$user.stub(_res);
}

const fragmentDefinitionActivityLikeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityLikeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityLikeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityLikeNotification = DocumentNode(definitions: [
  fragmentDefinitionActivityLikeNotification,
]);

extension ClientExtension$Fragment$ActivityLikeNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityLikeNotification({
    required Fragment$ActivityLikeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityLikeNotification',
            document: documentNodeFragmentActivityLikeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityLikeNotification? readFragment$ActivityLikeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityLikeNotification',
          document: documentNodeFragmentActivityLikeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityLikeNotification.fromJson(result);
  }
}

class Fragment$ActivityLikeNotification$user {
  Fragment$ActivityLikeNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityLikeNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityLikeNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityLikeNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityLikeNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityLikeNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityLikeNotification$user
    on Fragment$ActivityLikeNotification$user {
  CopyWith$Fragment$ActivityLikeNotification$user<
          Fragment$ActivityLikeNotification$user>
      get copyWith => CopyWith$Fragment$ActivityLikeNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityLikeNotification$user<TRes> {
  factory CopyWith$Fragment$ActivityLikeNotification$user(
    Fragment$ActivityLikeNotification$user instance,
    TRes Function(Fragment$ActivityLikeNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityLikeNotification$user;

  factory CopyWith$Fragment$ActivityLikeNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityLikeNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityLikeNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityLikeNotification$user<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityLikeNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityLikeNotification$user _instance;

  final TRes Function(Fragment$ActivityLikeNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityLikeNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityLikeNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityLikeNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityLikeNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityLikeNotification$user<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityLikeNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityLikeNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ActivityLikeNotification$user$avatar.stub(_res);
}

class Fragment$ActivityLikeNotification$user$avatar {
  Fragment$ActivityLikeNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityLikeNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityLikeNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityLikeNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityLikeNotification$user$avatar
    on Fragment$ActivityLikeNotification$user$avatar {
  CopyWith$Fragment$ActivityLikeNotification$user$avatar<
          Fragment$ActivityLikeNotification$user$avatar>
      get copyWith => CopyWith$Fragment$ActivityLikeNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$ActivityLikeNotification$user$avatar(
    Fragment$ActivityLikeNotification$user$avatar instance,
    TRes Function(Fragment$ActivityLikeNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityLikeNotification$user$avatar;

  factory CopyWith$Fragment$ActivityLikeNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityLikeNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityLikeNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityLikeNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityLikeNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityLikeNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityLikeNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityLikeNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityLikeNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityLikeNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityMessageNotification {
  Fragment$ActivityMessageNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityMessageNotification',
  });

  factory Fragment$ActivityMessageNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMessageNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityMessageNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityMessageNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMessageNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMessageNotification
    on Fragment$ActivityMessageNotification {
  CopyWith$Fragment$ActivityMessageNotification<
          Fragment$ActivityMessageNotification>
      get copyWith => CopyWith$Fragment$ActivityMessageNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMessageNotification<TRes> {
  factory CopyWith$Fragment$ActivityMessageNotification(
    Fragment$ActivityMessageNotification instance,
    TRes Function(Fragment$ActivityMessageNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityMessageNotification;

  factory CopyWith$Fragment$ActivityMessageNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMessageNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityMessageNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityMessageNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityMessageNotification<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityMessageNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMessageNotification _instance;

  final TRes Function(Fragment$ActivityMessageNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMessageNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityMessageNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityMessageNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityMessageNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityMessageNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityMessageNotification<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMessageNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityMessageNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityMessageNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityMessageNotification$user.stub(_res);
}

const fragmentDefinitionActivityMessageNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityMessageNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityMessageNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityMessageNotification =
    DocumentNode(definitions: [
  fragmentDefinitionActivityMessageNotification,
]);

extension ClientExtension$Fragment$ActivityMessageNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityMessageNotification({
    required Fragment$ActivityMessageNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityMessageNotification',
            document: documentNodeFragmentActivityMessageNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityMessageNotification?
      readFragment$ActivityMessageNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityMessageNotification',
          document: documentNodeFragmentActivityMessageNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityMessageNotification.fromJson(result);
  }
}

class Fragment$ActivityMessageNotification$user {
  Fragment$ActivityMessageNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityMessageNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMessageNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityMessageNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityMessageNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMessageNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMessageNotification$user
    on Fragment$ActivityMessageNotification$user {
  CopyWith$Fragment$ActivityMessageNotification$user<
          Fragment$ActivityMessageNotification$user>
      get copyWith => CopyWith$Fragment$ActivityMessageNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMessageNotification$user<TRes> {
  factory CopyWith$Fragment$ActivityMessageNotification$user(
    Fragment$ActivityMessageNotification$user instance,
    TRes Function(Fragment$ActivityMessageNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityMessageNotification$user;

  factory CopyWith$Fragment$ActivityMessageNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMessageNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityMessageNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityMessageNotification$user<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityMessageNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMessageNotification$user _instance;

  final TRes Function(Fragment$ActivityMessageNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMessageNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityMessageNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityMessageNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityMessageNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityMessageNotification$user<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMessageNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityMessageNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ActivityMessageNotification$user$avatar.stub(_res);
}

class Fragment$ActivityMessageNotification$user$avatar {
  Fragment$ActivityMessageNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityMessageNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMessageNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMessageNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMessageNotification$user$avatar
    on Fragment$ActivityMessageNotification$user$avatar {
  CopyWith$Fragment$ActivityMessageNotification$user$avatar<
          Fragment$ActivityMessageNotification$user$avatar>
      get copyWith => CopyWith$Fragment$ActivityMessageNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$ActivityMessageNotification$user$avatar(
    Fragment$ActivityMessageNotification$user$avatar instance,
    TRes Function(Fragment$ActivityMessageNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityMessageNotification$user$avatar;

  factory CopyWith$Fragment$ActivityMessageNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMessageNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityMessageNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityMessageNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMessageNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityMessageNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMessageNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityMessageNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityMessageNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMessageNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityMentionNotification {
  Fragment$ActivityMentionNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityMentionNotification',
  });

  factory Fragment$ActivityMentionNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMentionNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityMentionNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityMentionNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMentionNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMentionNotification
    on Fragment$ActivityMentionNotification {
  CopyWith$Fragment$ActivityMentionNotification<
          Fragment$ActivityMentionNotification>
      get copyWith => CopyWith$Fragment$ActivityMentionNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMentionNotification<TRes> {
  factory CopyWith$Fragment$ActivityMentionNotification(
    Fragment$ActivityMentionNotification instance,
    TRes Function(Fragment$ActivityMentionNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityMentionNotification;

  factory CopyWith$Fragment$ActivityMentionNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMentionNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityMentionNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityMentionNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityMentionNotification<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityMentionNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMentionNotification _instance;

  final TRes Function(Fragment$ActivityMentionNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMentionNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityMentionNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityMentionNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityMentionNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityMentionNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityMentionNotification<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMentionNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityMentionNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityMentionNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityMentionNotification$user.stub(_res);
}

const fragmentDefinitionActivityMentionNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityMentionNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityMentionNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityMentionNotification =
    DocumentNode(definitions: [
  fragmentDefinitionActivityMentionNotification,
]);

extension ClientExtension$Fragment$ActivityMentionNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityMentionNotification({
    required Fragment$ActivityMentionNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityMentionNotification',
            document: documentNodeFragmentActivityMentionNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityMentionNotification?
      readFragment$ActivityMentionNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityMentionNotification',
          document: documentNodeFragmentActivityMentionNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityMentionNotification.fromJson(result);
  }
}

class Fragment$ActivityMentionNotification$user {
  Fragment$ActivityMentionNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityMentionNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMentionNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityMentionNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityMentionNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMentionNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMentionNotification$user
    on Fragment$ActivityMentionNotification$user {
  CopyWith$Fragment$ActivityMentionNotification$user<
          Fragment$ActivityMentionNotification$user>
      get copyWith => CopyWith$Fragment$ActivityMentionNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMentionNotification$user<TRes> {
  factory CopyWith$Fragment$ActivityMentionNotification$user(
    Fragment$ActivityMentionNotification$user instance,
    TRes Function(Fragment$ActivityMentionNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityMentionNotification$user;

  factory CopyWith$Fragment$ActivityMentionNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMentionNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityMentionNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityMentionNotification$user<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityMentionNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMentionNotification$user _instance;

  final TRes Function(Fragment$ActivityMentionNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMentionNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityMentionNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityMentionNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityMentionNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityMentionNotification$user<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMentionNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityMentionNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ActivityMentionNotification$user$avatar.stub(_res);
}

class Fragment$ActivityMentionNotification$user$avatar {
  Fragment$ActivityMentionNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityMentionNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityMentionNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityMentionNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityMentionNotification$user$avatar
    on Fragment$ActivityMentionNotification$user$avatar {
  CopyWith$Fragment$ActivityMentionNotification$user$avatar<
          Fragment$ActivityMentionNotification$user$avatar>
      get copyWith => CopyWith$Fragment$ActivityMentionNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$ActivityMentionNotification$user$avatar(
    Fragment$ActivityMentionNotification$user$avatar instance,
    TRes Function(Fragment$ActivityMentionNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityMentionNotification$user$avatar;

  factory CopyWith$Fragment$ActivityMentionNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityMentionNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityMentionNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityMentionNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityMentionNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityMentionNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityMentionNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityMentionNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityMentionNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityMentionNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityReplyLikeNotification {
  Fragment$ActivityReplyLikeNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityReplyLikeNotification',
  });

  factory Fragment$ActivityReplyLikeNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyLikeNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityReplyLikeNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityReplyLikeNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyLikeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyLikeNotification
    on Fragment$ActivityReplyLikeNotification {
  CopyWith$Fragment$ActivityReplyLikeNotification<
          Fragment$ActivityReplyLikeNotification>
      get copyWith => CopyWith$Fragment$ActivityReplyLikeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyLikeNotification<TRes> {
  factory CopyWith$Fragment$ActivityReplyLikeNotification(
    Fragment$ActivityReplyLikeNotification instance,
    TRes Function(Fragment$ActivityReplyLikeNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyLikeNotification;

  factory CopyWith$Fragment$ActivityReplyLikeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityReplyLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityReplyLikeNotification<TRes>
    implements CopyWith$Fragment$ActivityReplyLikeNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyLikeNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyLikeNotification _instance;

  final TRes Function(Fragment$ActivityReplyLikeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyLikeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityReplyLikeNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityReplyLikeNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityReplyLikeNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification<TRes>
    implements CopyWith$Fragment$ActivityReplyLikeNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityReplyLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityReplyLikeNotification$user.stub(_res);
}

const fragmentDefinitionActivityReplyLikeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityReplyLikeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityReplyLikeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityReplyLikeNotification =
    DocumentNode(definitions: [
  fragmentDefinitionActivityReplyLikeNotification,
]);

extension ClientExtension$Fragment$ActivityReplyLikeNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityReplyLikeNotification({
    required Fragment$ActivityReplyLikeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityReplyLikeNotification',
            document: documentNodeFragmentActivityReplyLikeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityReplyLikeNotification?
      readFragment$ActivityReplyLikeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityReplyLikeNotification',
          document: documentNodeFragmentActivityReplyLikeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityReplyLikeNotification.fromJson(result);
  }
}

class Fragment$ActivityReplyLikeNotification$user {
  Fragment$ActivityReplyLikeNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityReplyLikeNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyLikeNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityReplyLikeNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityReplyLikeNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyLikeNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyLikeNotification$user
    on Fragment$ActivityReplyLikeNotification$user {
  CopyWith$Fragment$ActivityReplyLikeNotification$user<
          Fragment$ActivityReplyLikeNotification$user>
      get copyWith => CopyWith$Fragment$ActivityReplyLikeNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> {
  factory CopyWith$Fragment$ActivityReplyLikeNotification$user(
    Fragment$ActivityReplyLikeNotification$user instance,
    TRes Function(Fragment$ActivityReplyLikeNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user;

  factory CopyWith$Fragment$ActivityReplyLikeNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityReplyLikeNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user<TRes>
    implements CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyLikeNotification$user _instance;

  final TRes Function(Fragment$ActivityReplyLikeNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyLikeNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityReplyLikeNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user<TRes>
    implements CopyWith$Fragment$ActivityReplyLikeNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityReplyLikeNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar.stub(
              _res);
}

class Fragment$ActivityReplyLikeNotification$user$avatar {
  Fragment$ActivityReplyLikeNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityReplyLikeNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyLikeNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyLikeNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyLikeNotification$user$avatar
    on Fragment$ActivityReplyLikeNotification$user$avatar {
  CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<
          Fragment$ActivityReplyLikeNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar(
    Fragment$ActivityReplyLikeNotification$user$avatar instance,
    TRes Function(Fragment$ActivityReplyLikeNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user$avatar;

  factory CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyLikeNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyLikeNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityReplyLikeNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyLikeNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ActivityReplyLikeNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyLikeNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityReplyNotification {
  Fragment$ActivityReplyNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityReplyNotification',
  });

  factory Fragment$ActivityReplyNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityReplyNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityReplyNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyNotification
    on Fragment$ActivityReplyNotification {
  CopyWith$Fragment$ActivityReplyNotification<
          Fragment$ActivityReplyNotification>
      get copyWith => CopyWith$Fragment$ActivityReplyNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyNotification<TRes> {
  factory CopyWith$Fragment$ActivityReplyNotification(
    Fragment$ActivityReplyNotification instance,
    TRes Function(Fragment$ActivityReplyNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyNotification;

  factory CopyWith$Fragment$ActivityReplyNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityReplyNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplyNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityReplyNotification<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyNotification _instance;

  final TRes Function(Fragment$ActivityReplyNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityReplyNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplyNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityReplyNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityReplyNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplyNotification<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityReplyNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplyNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityReplyNotification$user.stub(_res);
}

const fragmentDefinitionActivityReplyNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ActivityReplyNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityReplyNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityReplyNotification =
    DocumentNode(definitions: [
  fragmentDefinitionActivityReplyNotification,
]);

extension ClientExtension$Fragment$ActivityReplyNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityReplyNotification({
    required Fragment$ActivityReplyNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityReplyNotification',
            document: documentNodeFragmentActivityReplyNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityReplyNotification? readFragment$ActivityReplyNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityReplyNotification',
          document: documentNodeFragmentActivityReplyNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityReplyNotification.fromJson(result);
  }
}

class Fragment$ActivityReplyNotification$user {
  Fragment$ActivityReplyNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityReplyNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityReplyNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityReplyNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyNotification$user
    on Fragment$ActivityReplyNotification$user {
  CopyWith$Fragment$ActivityReplyNotification$user<
          Fragment$ActivityReplyNotification$user>
      get copyWith => CopyWith$Fragment$ActivityReplyNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyNotification$user<TRes> {
  factory CopyWith$Fragment$ActivityReplyNotification$user(
    Fragment$ActivityReplyNotification$user instance,
    TRes Function(Fragment$ActivityReplyNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyNotification$user;

  factory CopyWith$Fragment$ActivityReplyNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityReplyNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ActivityReplyNotification$user<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyNotification$user _instance;

  final TRes Function(Fragment$ActivityReplyNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ActivityReplyNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityReplyNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityReplyNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplyNotification$user<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityReplyNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ActivityReplyNotification$user$avatar.stub(_res);
}

class Fragment$ActivityReplyNotification$user$avatar {
  Fragment$ActivityReplyNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityReplyNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplyNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplyNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplyNotification$user$avatar
    on Fragment$ActivityReplyNotification$user$avatar {
  CopyWith$Fragment$ActivityReplyNotification$user$avatar<
          Fragment$ActivityReplyNotification$user$avatar>
      get copyWith => CopyWith$Fragment$ActivityReplyNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$ActivityReplyNotification$user$avatar(
    Fragment$ActivityReplyNotification$user$avatar instance,
    TRes Function(Fragment$ActivityReplyNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ActivityReplyNotification$user$avatar;

  factory CopyWith$Fragment$ActivityReplyNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplyNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityReplyNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ActivityReplyNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplyNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityReplyNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplyNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityReplyNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ActivityReplyNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplyNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ActivityReplySubscribedNotification {
  Fragment$ActivityReplySubscribedNotification({
    required this.id,
    required this.activityId,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ActivityReplySubscribedNotification',
  });

  factory Fragment$ActivityReplySubscribedNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$activityId = json['activityId'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplySubscribedNotification(
      id: (l$id as int),
      activityId: (l$activityId as int),
      user: l$user == null
          ? null
          : Fragment$ActivityReplySubscribedNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int activityId;

  final Fragment$ActivityReplySubscribedNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$activityId = activityId;
    _resultData['activityId'] = l$activityId;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$activityId = activityId;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$activityId,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplySubscribedNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$activityId = activityId;
    final lOther$activityId = other.activityId;
    if (l$activityId != lOther$activityId) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplySubscribedNotification
    on Fragment$ActivityReplySubscribedNotification {
  CopyWith$Fragment$ActivityReplySubscribedNotification<
          Fragment$ActivityReplySubscribedNotification>
      get copyWith => CopyWith$Fragment$ActivityReplySubscribedNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplySubscribedNotification<TRes> {
  factory CopyWith$Fragment$ActivityReplySubscribedNotification(
    Fragment$ActivityReplySubscribedNotification instance,
    TRes Function(Fragment$ActivityReplySubscribedNotification) then,
  ) = _CopyWithImpl$Fragment$ActivityReplySubscribedNotification;

  factory CopyWith$Fragment$ActivityReplySubscribedNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification;

  TRes call({
    int? id,
    int? activityId,
    Fragment$ActivityReplySubscribedNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplySubscribedNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ActivityReplySubscribedNotification<TRes>
    implements CopyWith$Fragment$ActivityReplySubscribedNotification<TRes> {
  _CopyWithImpl$Fragment$ActivityReplySubscribedNotification(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplySubscribedNotification _instance;

  final TRes Function(Fragment$ActivityReplySubscribedNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? activityId = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplySubscribedNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        activityId: activityId == _undefined || activityId == null
            ? _instance.activityId
            : (activityId as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ActivityReplySubscribedNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplySubscribedNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ActivityReplySubscribedNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ActivityReplySubscribedNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification<TRes>
    implements CopyWith$Fragment$ActivityReplySubscribedNotification<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification(this._res);

  TRes _res;

  call({
    int? id,
    int? activityId,
    Fragment$ActivityReplySubscribedNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplySubscribedNotification$user<TRes> get user =>
      CopyWith$Fragment$ActivityReplySubscribedNotification$user.stub(_res);
}

const fragmentDefinitionActivityReplySubscribedNotification =
    FragmentDefinitionNode(
  name: NameNode(value: 'ActivityReplySubscribedNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ActivityReplySubscribedNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'activityId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentActivityReplySubscribedNotification =
    DocumentNode(definitions: [
  fragmentDefinitionActivityReplySubscribedNotification,
]);

extension ClientExtension$Fragment$ActivityReplySubscribedNotification
    on graphql.GraphQLClient {
  void writeFragment$ActivityReplySubscribedNotification({
    required Fragment$ActivityReplySubscribedNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ActivityReplySubscribedNotification',
            document: documentNodeFragmentActivityReplySubscribedNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ActivityReplySubscribedNotification?
      readFragment$ActivityReplySubscribedNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ActivityReplySubscribedNotification',
          document: documentNodeFragmentActivityReplySubscribedNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ActivityReplySubscribedNotification.fromJson(result);
  }
}

class Fragment$ActivityReplySubscribedNotification$user {
  Fragment$ActivityReplySubscribedNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ActivityReplySubscribedNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplySubscribedNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ActivityReplySubscribedNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ActivityReplySubscribedNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplySubscribedNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplySubscribedNotification$user
    on Fragment$ActivityReplySubscribedNotification$user {
  CopyWith$Fragment$ActivityReplySubscribedNotification$user<
          Fragment$ActivityReplySubscribedNotification$user>
      get copyWith =>
          CopyWith$Fragment$ActivityReplySubscribedNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplySubscribedNotification$user<
    TRes> {
  factory CopyWith$Fragment$ActivityReplySubscribedNotification$user(
    Fragment$ActivityReplySubscribedNotification$user instance,
    TRes Function(Fragment$ActivityReplySubscribedNotification$user) then,
  ) = _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user;

  factory CopyWith$Fragment$ActivityReplySubscribedNotification$user.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ActivityReplySubscribedNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<TRes>
      get avatar;
}

class _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user<TRes>
    implements
        CopyWith$Fragment$ActivityReplySubscribedNotification$user<TRes> {
  _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplySubscribedNotification$user _instance;

  final TRes Function(Fragment$ActivityReplySubscribedNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplySubscribedNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar
                as Fragment$ActivityReplySubscribedNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<TRes>
      get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar
            .stub(_then(_instance))
        : CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user<TRes>
    implements
        CopyWith$Fragment$ActivityReplySubscribedNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ActivityReplySubscribedNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar
              .stub(_res);
}

class Fragment$ActivityReplySubscribedNotification$user$avatar {
  Fragment$ActivityReplySubscribedNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ActivityReplySubscribedNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ActivityReplySubscribedNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ActivityReplySubscribedNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ActivityReplySubscribedNotification$user$avatar
    on Fragment$ActivityReplySubscribedNotification$user$avatar {
  CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<
          Fragment$ActivityReplySubscribedNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar(
    Fragment$ActivityReplySubscribedNotification$user$avatar instance,
    TRes Function(Fragment$ActivityReplySubscribedNotification$user$avatar)
        then,
  ) = _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user$avatar;

  factory CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<
            TRes> {
  _CopyWithImpl$Fragment$ActivityReplySubscribedNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ActivityReplySubscribedNotification$user$avatar _instance;

  final TRes Function(Fragment$ActivityReplySubscribedNotification$user$avatar)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ActivityReplySubscribedNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ActivityReplySubscribedNotification$user$avatar<
            TRes> {
  _CopyWithStubImpl$Fragment$ActivityReplySubscribedNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$AiringNotification {
  Fragment$AiringNotification({
    required this.id,
    this.media,
    this.contexts,
    this.createdAt,
    required this.episode,
    this.$__typename = 'AiringNotification',
  });

  factory Fragment$AiringNotification.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$media = json['media'];
    final l$contexts = json['contexts'];
    final l$createdAt = json['createdAt'];
    final l$episode = json['episode'];
    final l$$__typename = json['__typename'];
    return Fragment$AiringNotification(
      id: (l$id as int),
      media: l$media == null
          ? null
          : Fragment$AiringNotification$media.fromJson(
              (l$media as Map<String, dynamic>)),
      contexts:
          (l$contexts as List<dynamic>?)?.map((e) => (e as String?)).toList(),
      createdAt: (l$createdAt as int?),
      episode: (l$episode as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$AiringNotification$media? media;

  final List<String?>? contexts;

  final int? createdAt;

  final int episode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$contexts = contexts;
    _resultData['contexts'] = l$contexts?.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$episode = episode;
    _resultData['episode'] = l$episode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$media = media;
    final l$contexts = contexts;
    final l$createdAt = createdAt;
    final l$episode = episode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$media,
      l$contexts == null ? null : Object.hashAll(l$contexts.map((v) => v)),
      l$createdAt,
      l$episode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$AiringNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$contexts = contexts;
    final lOther$contexts = other.contexts;
    if (l$contexts != null && lOther$contexts != null) {
      if (l$contexts.length != lOther$contexts.length) {
        return false;
      }
      for (int i = 0; i < l$contexts.length; i++) {
        final l$contexts$entry = l$contexts[i];
        final lOther$contexts$entry = lOther$contexts[i];
        if (l$contexts$entry != lOther$contexts$entry) {
          return false;
        }
      }
    } else if (l$contexts != lOther$contexts) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$episode = episode;
    final lOther$episode = other.episode;
    if (l$episode != lOther$episode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$AiringNotification
    on Fragment$AiringNotification {
  CopyWith$Fragment$AiringNotification<Fragment$AiringNotification>
      get copyWith => CopyWith$Fragment$AiringNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$AiringNotification<TRes> {
  factory CopyWith$Fragment$AiringNotification(
    Fragment$AiringNotification instance,
    TRes Function(Fragment$AiringNotification) then,
  ) = _CopyWithImpl$Fragment$AiringNotification;

  factory CopyWith$Fragment$AiringNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$AiringNotification;

  TRes call({
    int? id,
    Fragment$AiringNotification$media? media,
    List<String?>? contexts,
    int? createdAt,
    int? episode,
    String? $__typename,
  });
  CopyWith$Fragment$AiringNotification$media<TRes> get media;
}

class _CopyWithImpl$Fragment$AiringNotification<TRes>
    implements CopyWith$Fragment$AiringNotification<TRes> {
  _CopyWithImpl$Fragment$AiringNotification(
    this._instance,
    this._then,
  );

  final Fragment$AiringNotification _instance;

  final TRes Function(Fragment$AiringNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? media = _undefined,
    Object? contexts = _undefined,
    Object? createdAt = _undefined,
    Object? episode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$AiringNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$AiringNotification$media?),
        contexts: contexts == _undefined
            ? _instance.contexts
            : (contexts as List<String?>?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        episode: episode == _undefined || episode == null
            ? _instance.episode
            : (episode as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$AiringNotification$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$AiringNotification$media.stub(_then(_instance))
        : CopyWith$Fragment$AiringNotification$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$AiringNotification<TRes>
    implements CopyWith$Fragment$AiringNotification<TRes> {
  _CopyWithStubImpl$Fragment$AiringNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$AiringNotification$media? media,
    List<String?>? contexts,
    int? createdAt,
    int? episode,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$AiringNotification$media<TRes> get media =>
      CopyWith$Fragment$AiringNotification$media.stub(_res);
}

const fragmentDefinitionAiringNotification = FragmentDefinitionNode(
  name: NameNode(value: 'AiringNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'AiringNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'contexts'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'episode'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentAiringNotification = DocumentNode(definitions: [
  fragmentDefinitionAiringNotification,
]);

extension ClientExtension$Fragment$AiringNotification on graphql.GraphQLClient {
  void writeFragment$AiringNotification({
    required Fragment$AiringNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'AiringNotification',
            document: documentNodeFragmentAiringNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$AiringNotification? readFragment$AiringNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'AiringNotification',
          document: documentNodeFragmentAiringNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$AiringNotification.fromJson(result);
  }
}

class Fragment$AiringNotification$media {
  Fragment$AiringNotification$media({
    required this.id,
    this.coverImage,
    this.title,
    this.$__typename = 'Media',
  });

  factory Fragment$AiringNotification$media.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$coverImage = json['coverImage'];
    final l$title = json['title'];
    final l$$__typename = json['__typename'];
    return Fragment$AiringNotification$media(
      id: (l$id as int),
      coverImage: l$coverImage == null
          ? null
          : Fragment$AiringNotification$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      title: l$title == null
          ? null
          : Fragment$AiringNotification$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$AiringNotification$media$coverImage? coverImage;

  final Fragment$AiringNotification$media$title? title;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$coverImage = coverImage;
    final l$title = title;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$coverImage,
      l$title,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$AiringNotification$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$AiringNotification$media
    on Fragment$AiringNotification$media {
  CopyWith$Fragment$AiringNotification$media<Fragment$AiringNotification$media>
      get copyWith => CopyWith$Fragment$AiringNotification$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$AiringNotification$media<TRes> {
  factory CopyWith$Fragment$AiringNotification$media(
    Fragment$AiringNotification$media instance,
    TRes Function(Fragment$AiringNotification$media) then,
  ) = _CopyWithImpl$Fragment$AiringNotification$media;

  factory CopyWith$Fragment$AiringNotification$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$AiringNotification$media;

  TRes call({
    int? id,
    Fragment$AiringNotification$media$coverImage? coverImage,
    Fragment$AiringNotification$media$title? title,
    String? $__typename,
  });
  CopyWith$Fragment$AiringNotification$media$coverImage<TRes> get coverImage;
  CopyWith$Fragment$AiringNotification$media$title<TRes> get title;
}

class _CopyWithImpl$Fragment$AiringNotification$media<TRes>
    implements CopyWith$Fragment$AiringNotification$media<TRes> {
  _CopyWithImpl$Fragment$AiringNotification$media(
    this._instance,
    this._then,
  );

  final Fragment$AiringNotification$media _instance;

  final TRes Function(Fragment$AiringNotification$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? coverImage = _undefined,
    Object? title = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$AiringNotification$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$AiringNotification$media$coverImage?),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$AiringNotification$media$title?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$AiringNotification$media$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$AiringNotification$media$coverImage.stub(
            _then(_instance))
        : CopyWith$Fragment$AiringNotification$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$AiringNotification$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$AiringNotification$media$title.stub(
            _then(_instance))
        : CopyWith$Fragment$AiringNotification$media$title(
            local$title, (e) => call(title: e));
  }
}

class _CopyWithStubImpl$Fragment$AiringNotification$media<TRes>
    implements CopyWith$Fragment$AiringNotification$media<TRes> {
  _CopyWithStubImpl$Fragment$AiringNotification$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$AiringNotification$media$coverImage? coverImage,
    Fragment$AiringNotification$media$title? title,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$AiringNotification$media$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$AiringNotification$media$coverImage.stub(_res);

  CopyWith$Fragment$AiringNotification$media$title<TRes> get title =>
      CopyWith$Fragment$AiringNotification$media$title.stub(_res);
}

class Fragment$AiringNotification$media$coverImage {
  Fragment$AiringNotification$media$coverImage({
    this.medium,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$AiringNotification$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$AiringNotification$media$coverImage(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$AiringNotification$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$AiringNotification$media$coverImage
    on Fragment$AiringNotification$media$coverImage {
  CopyWith$Fragment$AiringNotification$media$coverImage<
          Fragment$AiringNotification$media$coverImage>
      get copyWith => CopyWith$Fragment$AiringNotification$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$AiringNotification$media$coverImage<TRes> {
  factory CopyWith$Fragment$AiringNotification$media$coverImage(
    Fragment$AiringNotification$media$coverImage instance,
    TRes Function(Fragment$AiringNotification$media$coverImage) then,
  ) = _CopyWithImpl$Fragment$AiringNotification$media$coverImage;

  factory CopyWith$Fragment$AiringNotification$media$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$AiringNotification$media$coverImage;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$AiringNotification$media$coverImage<TRes>
    implements CopyWith$Fragment$AiringNotification$media$coverImage<TRes> {
  _CopyWithImpl$Fragment$AiringNotification$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$AiringNotification$media$coverImage _instance;

  final TRes Function(Fragment$AiringNotification$media$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$AiringNotification$media$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$AiringNotification$media$coverImage<TRes>
    implements CopyWith$Fragment$AiringNotification$media$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$AiringNotification$media$coverImage(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$AiringNotification$media$title {
  Fragment$AiringNotification$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$AiringNotification$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$AiringNotification$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$AiringNotification$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$AiringNotification$media$title
    on Fragment$AiringNotification$media$title {
  CopyWith$Fragment$AiringNotification$media$title<
          Fragment$AiringNotification$media$title>
      get copyWith => CopyWith$Fragment$AiringNotification$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$AiringNotification$media$title<TRes> {
  factory CopyWith$Fragment$AiringNotification$media$title(
    Fragment$AiringNotification$media$title instance,
    TRes Function(Fragment$AiringNotification$media$title) then,
  ) = _CopyWithImpl$Fragment$AiringNotification$media$title;

  factory CopyWith$Fragment$AiringNotification$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$AiringNotification$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$AiringNotification$media$title<TRes>
    implements CopyWith$Fragment$AiringNotification$media$title<TRes> {
  _CopyWithImpl$Fragment$AiringNotification$media$title(
    this._instance,
    this._then,
  );

  final Fragment$AiringNotification$media$title _instance;

  final TRes Function(Fragment$AiringNotification$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$AiringNotification$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$AiringNotification$media$title<TRes>
    implements CopyWith$Fragment$AiringNotification$media$title<TRes> {
  _CopyWithStubImpl$Fragment$AiringNotification$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$FollowingNotification {
  Fragment$FollowingNotification({
    required this.id,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'FollowingNotification',
  });

  factory Fragment$FollowingNotification.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$FollowingNotification(
      id: (l$id as int),
      user: l$user == null
          ? null
          : Fragment$FollowingNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$FollowingNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$FollowingNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$FollowingNotification
    on Fragment$FollowingNotification {
  CopyWith$Fragment$FollowingNotification<Fragment$FollowingNotification>
      get copyWith => CopyWith$Fragment$FollowingNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$FollowingNotification<TRes> {
  factory CopyWith$Fragment$FollowingNotification(
    Fragment$FollowingNotification instance,
    TRes Function(Fragment$FollowingNotification) then,
  ) = _CopyWithImpl$Fragment$FollowingNotification;

  factory CopyWith$Fragment$FollowingNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$FollowingNotification;

  TRes call({
    int? id,
    Fragment$FollowingNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$FollowingNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$FollowingNotification<TRes>
    implements CopyWith$Fragment$FollowingNotification<TRes> {
  _CopyWithImpl$Fragment$FollowingNotification(
    this._instance,
    this._then,
  );

  final Fragment$FollowingNotification _instance;

  final TRes Function(Fragment$FollowingNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$FollowingNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$FollowingNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$FollowingNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$FollowingNotification$user.stub(_then(_instance))
        : CopyWith$Fragment$FollowingNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$FollowingNotification<TRes>
    implements CopyWith$Fragment$FollowingNotification<TRes> {
  _CopyWithStubImpl$Fragment$FollowingNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$FollowingNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$FollowingNotification$user<TRes> get user =>
      CopyWith$Fragment$FollowingNotification$user.stub(_res);
}

const fragmentDefinitionFollowingNotification = FragmentDefinitionNode(
  name: NameNode(value: 'FollowingNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'FollowingNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentFollowingNotification = DocumentNode(definitions: [
  fragmentDefinitionFollowingNotification,
]);

extension ClientExtension$Fragment$FollowingNotification
    on graphql.GraphQLClient {
  void writeFragment$FollowingNotification({
    required Fragment$FollowingNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'FollowingNotification',
            document: documentNodeFragmentFollowingNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$FollowingNotification? readFragment$FollowingNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'FollowingNotification',
          document: documentNodeFragmentFollowingNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$FollowingNotification.fromJson(result);
  }
}

class Fragment$FollowingNotification$user {
  Fragment$FollowingNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$FollowingNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$FollowingNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$FollowingNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$FollowingNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$FollowingNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$FollowingNotification$user
    on Fragment$FollowingNotification$user {
  CopyWith$Fragment$FollowingNotification$user<
          Fragment$FollowingNotification$user>
      get copyWith => CopyWith$Fragment$FollowingNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$FollowingNotification$user<TRes> {
  factory CopyWith$Fragment$FollowingNotification$user(
    Fragment$FollowingNotification$user instance,
    TRes Function(Fragment$FollowingNotification$user) then,
  ) = _CopyWithImpl$Fragment$FollowingNotification$user;

  factory CopyWith$Fragment$FollowingNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$FollowingNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$FollowingNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$FollowingNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$FollowingNotification$user<TRes>
    implements CopyWith$Fragment$FollowingNotification$user<TRes> {
  _CopyWithImpl$Fragment$FollowingNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$FollowingNotification$user _instance;

  final TRes Function(Fragment$FollowingNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$FollowingNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$FollowingNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$FollowingNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$FollowingNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$FollowingNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$FollowingNotification$user<TRes>
    implements CopyWith$Fragment$FollowingNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$FollowingNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$FollowingNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$FollowingNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$FollowingNotification$user$avatar.stub(_res);
}

class Fragment$FollowingNotification$user$avatar {
  Fragment$FollowingNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$FollowingNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$FollowingNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$FollowingNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$FollowingNotification$user$avatar
    on Fragment$FollowingNotification$user$avatar {
  CopyWith$Fragment$FollowingNotification$user$avatar<
          Fragment$FollowingNotification$user$avatar>
      get copyWith => CopyWith$Fragment$FollowingNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$FollowingNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$FollowingNotification$user$avatar(
    Fragment$FollowingNotification$user$avatar instance,
    TRes Function(Fragment$FollowingNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$FollowingNotification$user$avatar;

  factory CopyWith$Fragment$FollowingNotification$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$FollowingNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$FollowingNotification$user$avatar<TRes>
    implements CopyWith$Fragment$FollowingNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$FollowingNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$FollowingNotification$user$avatar _instance;

  final TRes Function(Fragment$FollowingNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$FollowingNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$FollowingNotification$user$avatar<TRes>
    implements CopyWith$Fragment$FollowingNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$FollowingNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentLikeNotification {
  Fragment$ThreadCommentLikeNotification({
    required this.id,
    this.thread,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ThreadCommentLikeNotification',
  });

  factory Fragment$ThreadCommentLikeNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$thread = json['thread'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentLikeNotification(
      id: (l$id as int),
      thread: l$thread == null
          ? null
          : Fragment$ThreadCommentLikeNotification$thread.fromJson(
              (l$thread as Map<String, dynamic>)),
      user: l$user == null
          ? null
          : Fragment$ThreadCommentLikeNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ThreadCommentLikeNotification$thread? thread;

  final Fragment$ThreadCommentLikeNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$thread = thread;
    _resultData['thread'] = l$thread?.toJson();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$thread = thread;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$thread,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentLikeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$thread = thread;
    final lOther$thread = other.thread;
    if (l$thread != lOther$thread) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentLikeNotification
    on Fragment$ThreadCommentLikeNotification {
  CopyWith$Fragment$ThreadCommentLikeNotification<
          Fragment$ThreadCommentLikeNotification>
      get copyWith => CopyWith$Fragment$ThreadCommentLikeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentLikeNotification<TRes> {
  factory CopyWith$Fragment$ThreadCommentLikeNotification(
    Fragment$ThreadCommentLikeNotification instance,
    TRes Function(Fragment$ThreadCommentLikeNotification) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentLikeNotification;

  factory CopyWith$Fragment$ThreadCommentLikeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification;

  TRes call({
    int? id,
    Fragment$ThreadCommentLikeNotification$thread? thread,
    Fragment$ThreadCommentLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> get thread;
  CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ThreadCommentLikeNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentLikeNotification(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentLikeNotification _instance;

  final TRes Function(Fragment$ThreadCommentLikeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? thread = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentLikeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        thread: thread == _undefined
            ? _instance.thread
            : (thread as Fragment$ThreadCommentLikeNotification$thread?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ThreadCommentLikeNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> get thread {
    final local$thread = _instance.thread;
    return local$thread == null
        ? CopyWith$Fragment$ThreadCommentLikeNotification$thread.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentLikeNotification$thread(
            local$thread, (e) => call(thread: e));
  }

  CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ThreadCommentLikeNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentLikeNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ThreadCommentLikeNotification$thread? thread,
    Fragment$ThreadCommentLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> get thread =>
      CopyWith$Fragment$ThreadCommentLikeNotification$thread.stub(_res);

  CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> get user =>
      CopyWith$Fragment$ThreadCommentLikeNotification$user.stub(_res);
}

const fragmentDefinitionThreadCommentLikeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ThreadCommentLikeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ThreadCommentLikeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'thread'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentThreadCommentLikeNotification =
    DocumentNode(definitions: [
  fragmentDefinitionThreadCommentLikeNotification,
]);

extension ClientExtension$Fragment$ThreadCommentLikeNotification
    on graphql.GraphQLClient {
  void writeFragment$ThreadCommentLikeNotification({
    required Fragment$ThreadCommentLikeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ThreadCommentLikeNotification',
            document: documentNodeFragmentThreadCommentLikeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ThreadCommentLikeNotification?
      readFragment$ThreadCommentLikeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ThreadCommentLikeNotification',
          document: documentNodeFragmentThreadCommentLikeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ThreadCommentLikeNotification.fromJson(result);
  }
}

class Fragment$ThreadCommentLikeNotification$thread {
  Fragment$ThreadCommentLikeNotification$thread({
    required this.id,
    this.$__typename = 'Thread',
  });

  factory Fragment$ThreadCommentLikeNotification$thread.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentLikeNotification$thread(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentLikeNotification$thread ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentLikeNotification$thread
    on Fragment$ThreadCommentLikeNotification$thread {
  CopyWith$Fragment$ThreadCommentLikeNotification$thread<
          Fragment$ThreadCommentLikeNotification$thread>
      get copyWith => CopyWith$Fragment$ThreadCommentLikeNotification$thread(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> {
  factory CopyWith$Fragment$ThreadCommentLikeNotification$thread(
    Fragment$ThreadCommentLikeNotification$thread instance,
    TRes Function(Fragment$ThreadCommentLikeNotification$thread) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentLikeNotification$thread;

  factory CopyWith$Fragment$ThreadCommentLikeNotification$thread.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$thread;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentLikeNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentLikeNotification$thread(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentLikeNotification$thread _instance;

  final TRes Function(Fragment$ThreadCommentLikeNotification$thread) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentLikeNotification$thread(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification$thread<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$thread(this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentLikeNotification$user {
  Fragment$ThreadCommentLikeNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ThreadCommentLikeNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentLikeNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ThreadCommentLikeNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ThreadCommentLikeNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentLikeNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentLikeNotification$user
    on Fragment$ThreadCommentLikeNotification$user {
  CopyWith$Fragment$ThreadCommentLikeNotification$user<
          Fragment$ThreadCommentLikeNotification$user>
      get copyWith => CopyWith$Fragment$ThreadCommentLikeNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> {
  factory CopyWith$Fragment$ThreadCommentLikeNotification$user(
    Fragment$ThreadCommentLikeNotification$user instance,
    TRes Function(Fragment$ThreadCommentLikeNotification$user) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user;

  factory CopyWith$Fragment$ThreadCommentLikeNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ThreadCommentLikeNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentLikeNotification$user _instance;

  final TRes Function(Fragment$ThreadCommentLikeNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentLikeNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ThreadCommentLikeNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentLikeNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ThreadCommentLikeNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar.stub(
              _res);
}

class Fragment$ThreadCommentLikeNotification$user$avatar {
  Fragment$ThreadCommentLikeNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ThreadCommentLikeNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentLikeNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentLikeNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentLikeNotification$user$avatar
    on Fragment$ThreadCommentLikeNotification$user$avatar {
  CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<
          Fragment$ThreadCommentLikeNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar(
    Fragment$ThreadCommentLikeNotification$user$avatar instance,
    TRes Function(Fragment$ThreadCommentLikeNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user$avatar;

  factory CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentLikeNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentLikeNotification$user$avatar _instance;

  final TRes Function(Fragment$ThreadCommentLikeNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentLikeNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ThreadCommentLikeNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentLikeNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentMentionNotification {
  Fragment$ThreadCommentMentionNotification({
    required this.id,
    this.thread,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ThreadCommentMentionNotification',
  });

  factory Fragment$ThreadCommentMentionNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$thread = json['thread'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentMentionNotification(
      id: (l$id as int),
      thread: l$thread == null
          ? null
          : Fragment$ThreadCommentMentionNotification$thread.fromJson(
              (l$thread as Map<String, dynamic>)),
      user: l$user == null
          ? null
          : Fragment$ThreadCommentMentionNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ThreadCommentMentionNotification$thread? thread;

  final Fragment$ThreadCommentMentionNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$thread = thread;
    _resultData['thread'] = l$thread?.toJson();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$thread = thread;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$thread,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentMentionNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$thread = thread;
    final lOther$thread = other.thread;
    if (l$thread != lOther$thread) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentMentionNotification
    on Fragment$ThreadCommentMentionNotification {
  CopyWith$Fragment$ThreadCommentMentionNotification<
          Fragment$ThreadCommentMentionNotification>
      get copyWith => CopyWith$Fragment$ThreadCommentMentionNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentMentionNotification<TRes> {
  factory CopyWith$Fragment$ThreadCommentMentionNotification(
    Fragment$ThreadCommentMentionNotification instance,
    TRes Function(Fragment$ThreadCommentMentionNotification) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentMentionNotification;

  factory CopyWith$Fragment$ThreadCommentMentionNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification;

  TRes call({
    int? id,
    Fragment$ThreadCommentMentionNotification$thread? thread,
    Fragment$ThreadCommentMentionNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> get thread;
  CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ThreadCommentMentionNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentMentionNotification(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentMentionNotification _instance;

  final TRes Function(Fragment$ThreadCommentMentionNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? thread = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentMentionNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        thread: thread == _undefined
            ? _instance.thread
            : (thread as Fragment$ThreadCommentMentionNotification$thread?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ThreadCommentMentionNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> get thread {
    final local$thread = _instance.thread;
    return local$thread == null
        ? CopyWith$Fragment$ThreadCommentMentionNotification$thread.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentMentionNotification$thread(
            local$thread, (e) => call(thread: e));
  }

  CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ThreadCommentMentionNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentMentionNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ThreadCommentMentionNotification$thread? thread,
    Fragment$ThreadCommentMentionNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> get thread =>
      CopyWith$Fragment$ThreadCommentMentionNotification$thread.stub(_res);

  CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> get user =>
      CopyWith$Fragment$ThreadCommentMentionNotification$user.stub(_res);
}

const fragmentDefinitionThreadCommentMentionNotification =
    FragmentDefinitionNode(
  name: NameNode(value: 'ThreadCommentMentionNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ThreadCommentMentionNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'thread'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentThreadCommentMentionNotification =
    DocumentNode(definitions: [
  fragmentDefinitionThreadCommentMentionNotification,
]);

extension ClientExtension$Fragment$ThreadCommentMentionNotification
    on graphql.GraphQLClient {
  void writeFragment$ThreadCommentMentionNotification({
    required Fragment$ThreadCommentMentionNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ThreadCommentMentionNotification',
            document: documentNodeFragmentThreadCommentMentionNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ThreadCommentMentionNotification?
      readFragment$ThreadCommentMentionNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ThreadCommentMentionNotification',
          document: documentNodeFragmentThreadCommentMentionNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ThreadCommentMentionNotification.fromJson(result);
  }
}

class Fragment$ThreadCommentMentionNotification$thread {
  Fragment$ThreadCommentMentionNotification$thread({
    required this.id,
    this.$__typename = 'Thread',
  });

  factory Fragment$ThreadCommentMentionNotification$thread.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentMentionNotification$thread(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentMentionNotification$thread ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentMentionNotification$thread
    on Fragment$ThreadCommentMentionNotification$thread {
  CopyWith$Fragment$ThreadCommentMentionNotification$thread<
          Fragment$ThreadCommentMentionNotification$thread>
      get copyWith => CopyWith$Fragment$ThreadCommentMentionNotification$thread(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> {
  factory CopyWith$Fragment$ThreadCommentMentionNotification$thread(
    Fragment$ThreadCommentMentionNotification$thread instance,
    TRes Function(Fragment$ThreadCommentMentionNotification$thread) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentMentionNotification$thread;

  factory CopyWith$Fragment$ThreadCommentMentionNotification$thread.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$thread;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentMentionNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentMentionNotification$thread(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentMentionNotification$thread _instance;

  final TRes Function(Fragment$ThreadCommentMentionNotification$thread) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentMentionNotification$thread(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification$thread<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$thread(this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentMentionNotification$user {
  Fragment$ThreadCommentMentionNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ThreadCommentMentionNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentMentionNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ThreadCommentMentionNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ThreadCommentMentionNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentMentionNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentMentionNotification$user
    on Fragment$ThreadCommentMentionNotification$user {
  CopyWith$Fragment$ThreadCommentMentionNotification$user<
          Fragment$ThreadCommentMentionNotification$user>
      get copyWith => CopyWith$Fragment$ThreadCommentMentionNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> {
  factory CopyWith$Fragment$ThreadCommentMentionNotification$user(
    Fragment$ThreadCommentMentionNotification$user instance,
    TRes Function(Fragment$ThreadCommentMentionNotification$user) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user;

  factory CopyWith$Fragment$ThreadCommentMentionNotification$user.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ThreadCommentMentionNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<TRes>
      get avatar;
}

class _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentMentionNotification$user _instance;

  final TRes Function(Fragment$ThreadCommentMentionNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentMentionNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar
                as Fragment$ThreadCommentMentionNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<TRes>
      get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentMentionNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ThreadCommentMentionNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar.stub(
              _res);
}

class Fragment$ThreadCommentMentionNotification$user$avatar {
  Fragment$ThreadCommentMentionNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ThreadCommentMentionNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentMentionNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentMentionNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentMentionNotification$user$avatar
    on Fragment$ThreadCommentMentionNotification$user$avatar {
  CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<
          Fragment$ThreadCommentMentionNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar(
    Fragment$ThreadCommentMentionNotification$user$avatar instance,
    TRes Function(Fragment$ThreadCommentMentionNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user$avatar;

  factory CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentMentionNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentMentionNotification$user$avatar _instance;

  final TRes Function(Fragment$ThreadCommentMentionNotification$user$avatar)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentMentionNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ThreadCommentMentionNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentMentionNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentReplyNotification {
  Fragment$ThreadCommentReplyNotification({
    required this.id,
    this.thread,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ThreadCommentReplyNotification',
  });

  factory Fragment$ThreadCommentReplyNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$thread = json['thread'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentReplyNotification(
      id: (l$id as int),
      thread: l$thread == null
          ? null
          : Fragment$ThreadCommentReplyNotification$thread.fromJson(
              (l$thread as Map<String, dynamic>)),
      user: l$user == null
          ? null
          : Fragment$ThreadCommentReplyNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ThreadCommentReplyNotification$thread? thread;

  final Fragment$ThreadCommentReplyNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$thread = thread;
    _resultData['thread'] = l$thread?.toJson();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$thread = thread;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$thread,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentReplyNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$thread = thread;
    final lOther$thread = other.thread;
    if (l$thread != lOther$thread) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentReplyNotification
    on Fragment$ThreadCommentReplyNotification {
  CopyWith$Fragment$ThreadCommentReplyNotification<
          Fragment$ThreadCommentReplyNotification>
      get copyWith => CopyWith$Fragment$ThreadCommentReplyNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentReplyNotification<TRes> {
  factory CopyWith$Fragment$ThreadCommentReplyNotification(
    Fragment$ThreadCommentReplyNotification instance,
    TRes Function(Fragment$ThreadCommentReplyNotification) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentReplyNotification;

  factory CopyWith$Fragment$ThreadCommentReplyNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification;

  TRes call({
    int? id,
    Fragment$ThreadCommentReplyNotification$thread? thread,
    Fragment$ThreadCommentReplyNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> get thread;
  CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ThreadCommentReplyNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentReplyNotification(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentReplyNotification _instance;

  final TRes Function(Fragment$ThreadCommentReplyNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? thread = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentReplyNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        thread: thread == _undefined
            ? _instance.thread
            : (thread as Fragment$ThreadCommentReplyNotification$thread?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ThreadCommentReplyNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> get thread {
    final local$thread = _instance.thread;
    return local$thread == null
        ? CopyWith$Fragment$ThreadCommentReplyNotification$thread.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentReplyNotification$thread(
            local$thread, (e) => call(thread: e));
  }

  CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ThreadCommentReplyNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentReplyNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ThreadCommentReplyNotification$thread? thread,
    Fragment$ThreadCommentReplyNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> get thread =>
      CopyWith$Fragment$ThreadCommentReplyNotification$thread.stub(_res);

  CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> get user =>
      CopyWith$Fragment$ThreadCommentReplyNotification$user.stub(_res);
}

const fragmentDefinitionThreadCommentReplyNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ThreadCommentReplyNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ThreadCommentReplyNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'thread'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentThreadCommentReplyNotification =
    DocumentNode(definitions: [
  fragmentDefinitionThreadCommentReplyNotification,
]);

extension ClientExtension$Fragment$ThreadCommentReplyNotification
    on graphql.GraphQLClient {
  void writeFragment$ThreadCommentReplyNotification({
    required Fragment$ThreadCommentReplyNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ThreadCommentReplyNotification',
            document: documentNodeFragmentThreadCommentReplyNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ThreadCommentReplyNotification?
      readFragment$ThreadCommentReplyNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ThreadCommentReplyNotification',
          document: documentNodeFragmentThreadCommentReplyNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ThreadCommentReplyNotification.fromJson(result);
  }
}

class Fragment$ThreadCommentReplyNotification$thread {
  Fragment$ThreadCommentReplyNotification$thread({
    required this.id,
    this.$__typename = 'Thread',
  });

  factory Fragment$ThreadCommentReplyNotification$thread.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentReplyNotification$thread(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentReplyNotification$thread ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentReplyNotification$thread
    on Fragment$ThreadCommentReplyNotification$thread {
  CopyWith$Fragment$ThreadCommentReplyNotification$thread<
          Fragment$ThreadCommentReplyNotification$thread>
      get copyWith => CopyWith$Fragment$ThreadCommentReplyNotification$thread(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> {
  factory CopyWith$Fragment$ThreadCommentReplyNotification$thread(
    Fragment$ThreadCommentReplyNotification$thread instance,
    TRes Function(Fragment$ThreadCommentReplyNotification$thread) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentReplyNotification$thread;

  factory CopyWith$Fragment$ThreadCommentReplyNotification$thread.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$thread;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentReplyNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentReplyNotification$thread(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentReplyNotification$thread _instance;

  final TRes Function(Fragment$ThreadCommentReplyNotification$thread) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentReplyNotification$thread(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification$thread<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$thread(this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentReplyNotification$user {
  Fragment$ThreadCommentReplyNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ThreadCommentReplyNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentReplyNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ThreadCommentReplyNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ThreadCommentReplyNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentReplyNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentReplyNotification$user
    on Fragment$ThreadCommentReplyNotification$user {
  CopyWith$Fragment$ThreadCommentReplyNotification$user<
          Fragment$ThreadCommentReplyNotification$user>
      get copyWith => CopyWith$Fragment$ThreadCommentReplyNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> {
  factory CopyWith$Fragment$ThreadCommentReplyNotification$user(
    Fragment$ThreadCommentReplyNotification$user instance,
    TRes Function(Fragment$ThreadCommentReplyNotification$user) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user;

  factory CopyWith$Fragment$ThreadCommentReplyNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ThreadCommentReplyNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentReplyNotification$user _instance;

  final TRes Function(Fragment$ThreadCommentReplyNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentReplyNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ThreadCommentReplyNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<TRes>
      get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user<TRes>
    implements CopyWith$Fragment$ThreadCommentReplyNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ThreadCommentReplyNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar.stub(
              _res);
}

class Fragment$ThreadCommentReplyNotification$user$avatar {
  Fragment$ThreadCommentReplyNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ThreadCommentReplyNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentReplyNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentReplyNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentReplyNotification$user$avatar
    on Fragment$ThreadCommentReplyNotification$user$avatar {
  CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<
          Fragment$ThreadCommentReplyNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar(
    Fragment$ThreadCommentReplyNotification$user$avatar instance,
    TRes Function(Fragment$ThreadCommentReplyNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user$avatar;

  factory CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user$avatar<TRes>
    implements
        CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentReplyNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentReplyNotification$user$avatar _instance;

  final TRes Function(Fragment$ThreadCommentReplyNotification$user$avatar)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentReplyNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ThreadCommentReplyNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentReplyNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadLikeNotification {
  Fragment$ThreadLikeNotification({
    required this.id,
    this.thread,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ThreadLikeNotification',
  });

  factory Fragment$ThreadLikeNotification.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$thread = json['thread'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadLikeNotification(
      id: (l$id as int),
      thread: l$thread == null
          ? null
          : Fragment$ThreadLikeNotification$thread.fromJson(
              (l$thread as Map<String, dynamic>)),
      user: l$user == null
          ? null
          : Fragment$ThreadLikeNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ThreadLikeNotification$thread? thread;

  final Fragment$ThreadLikeNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$thread = thread;
    _resultData['thread'] = l$thread?.toJson();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$thread = thread;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$thread,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadLikeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$thread = thread;
    final lOther$thread = other.thread;
    if (l$thread != lOther$thread) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadLikeNotification
    on Fragment$ThreadLikeNotification {
  CopyWith$Fragment$ThreadLikeNotification<Fragment$ThreadLikeNotification>
      get copyWith => CopyWith$Fragment$ThreadLikeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadLikeNotification<TRes> {
  factory CopyWith$Fragment$ThreadLikeNotification(
    Fragment$ThreadLikeNotification instance,
    TRes Function(Fragment$ThreadLikeNotification) then,
  ) = _CopyWithImpl$Fragment$ThreadLikeNotification;

  factory CopyWith$Fragment$ThreadLikeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadLikeNotification;

  TRes call({
    int? id,
    Fragment$ThreadLikeNotification$thread? thread,
    Fragment$ThreadLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadLikeNotification$thread<TRes> get thread;
  CopyWith$Fragment$ThreadLikeNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ThreadLikeNotification<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification<TRes> {
  _CopyWithImpl$Fragment$ThreadLikeNotification(
    this._instance,
    this._then,
  );

  final Fragment$ThreadLikeNotification _instance;

  final TRes Function(Fragment$ThreadLikeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? thread = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadLikeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        thread: thread == _undefined
            ? _instance.thread
            : (thread as Fragment$ThreadLikeNotification$thread?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ThreadLikeNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadLikeNotification$thread<TRes> get thread {
    final local$thread = _instance.thread;
    return local$thread == null
        ? CopyWith$Fragment$ThreadLikeNotification$thread.stub(_then(_instance))
        : CopyWith$Fragment$ThreadLikeNotification$thread(
            local$thread, (e) => call(thread: e));
  }

  CopyWith$Fragment$ThreadLikeNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ThreadLikeNotification$user.stub(_then(_instance))
        : CopyWith$Fragment$ThreadLikeNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadLikeNotification<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification<TRes> {
  _CopyWithStubImpl$Fragment$ThreadLikeNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ThreadLikeNotification$thread? thread,
    Fragment$ThreadLikeNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadLikeNotification$thread<TRes> get thread =>
      CopyWith$Fragment$ThreadLikeNotification$thread.stub(_res);

  CopyWith$Fragment$ThreadLikeNotification$user<TRes> get user =>
      CopyWith$Fragment$ThreadLikeNotification$user.stub(_res);
}

const fragmentDefinitionThreadLikeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'ThreadLikeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ThreadLikeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'thread'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentThreadLikeNotification = DocumentNode(definitions: [
  fragmentDefinitionThreadLikeNotification,
]);

extension ClientExtension$Fragment$ThreadLikeNotification
    on graphql.GraphQLClient {
  void writeFragment$ThreadLikeNotification({
    required Fragment$ThreadLikeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ThreadLikeNotification',
            document: documentNodeFragmentThreadLikeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ThreadLikeNotification? readFragment$ThreadLikeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ThreadLikeNotification',
          document: documentNodeFragmentThreadLikeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ThreadLikeNotification.fromJson(result);
  }
}

class Fragment$ThreadLikeNotification$thread {
  Fragment$ThreadLikeNotification$thread({
    required this.id,
    this.$__typename = 'Thread',
  });

  factory Fragment$ThreadLikeNotification$thread.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadLikeNotification$thread(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadLikeNotification$thread ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadLikeNotification$thread
    on Fragment$ThreadLikeNotification$thread {
  CopyWith$Fragment$ThreadLikeNotification$thread<
          Fragment$ThreadLikeNotification$thread>
      get copyWith => CopyWith$Fragment$ThreadLikeNotification$thread(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadLikeNotification$thread<TRes> {
  factory CopyWith$Fragment$ThreadLikeNotification$thread(
    Fragment$ThreadLikeNotification$thread instance,
    TRes Function(Fragment$ThreadLikeNotification$thread) then,
  ) = _CopyWithImpl$Fragment$ThreadLikeNotification$thread;

  factory CopyWith$Fragment$ThreadLikeNotification$thread.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadLikeNotification$thread;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadLikeNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$thread<TRes> {
  _CopyWithImpl$Fragment$ThreadLikeNotification$thread(
    this._instance,
    this._then,
  );

  final Fragment$ThreadLikeNotification$thread _instance;

  final TRes Function(Fragment$ThreadLikeNotification$thread) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadLikeNotification$thread(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadLikeNotification$thread<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$thread<TRes> {
  _CopyWithStubImpl$Fragment$ThreadLikeNotification$thread(this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadLikeNotification$user {
  Fragment$ThreadLikeNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ThreadLikeNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadLikeNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ThreadLikeNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ThreadLikeNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadLikeNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadLikeNotification$user
    on Fragment$ThreadLikeNotification$user {
  CopyWith$Fragment$ThreadLikeNotification$user<
          Fragment$ThreadLikeNotification$user>
      get copyWith => CopyWith$Fragment$ThreadLikeNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadLikeNotification$user<TRes> {
  factory CopyWith$Fragment$ThreadLikeNotification$user(
    Fragment$ThreadLikeNotification$user instance,
    TRes Function(Fragment$ThreadLikeNotification$user) then,
  ) = _CopyWithImpl$Fragment$ThreadLikeNotification$user;

  factory CopyWith$Fragment$ThreadLikeNotification$user.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadLikeNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ThreadLikeNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> get avatar;
}

class _CopyWithImpl$Fragment$ThreadLikeNotification$user<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$user<TRes> {
  _CopyWithImpl$Fragment$ThreadLikeNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ThreadLikeNotification$user _instance;

  final TRes Function(Fragment$ThreadLikeNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadLikeNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar as Fragment$ThreadLikeNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ThreadLikeNotification$user$avatar.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadLikeNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadLikeNotification$user<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ThreadLikeNotification$user(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ThreadLikeNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> get avatar =>
      CopyWith$Fragment$ThreadLikeNotification$user$avatar.stub(_res);
}

class Fragment$ThreadLikeNotification$user$avatar {
  Fragment$ThreadLikeNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ThreadLikeNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadLikeNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadLikeNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadLikeNotification$user$avatar
    on Fragment$ThreadLikeNotification$user$avatar {
  CopyWith$Fragment$ThreadLikeNotification$user$avatar<
          Fragment$ThreadLikeNotification$user$avatar>
      get copyWith => CopyWith$Fragment$ThreadLikeNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> {
  factory CopyWith$Fragment$ThreadLikeNotification$user$avatar(
    Fragment$ThreadLikeNotification$user$avatar instance,
    TRes Function(Fragment$ThreadLikeNotification$user$avatar) then,
  ) = _CopyWithImpl$Fragment$ThreadLikeNotification$user$avatar;

  factory CopyWith$Fragment$ThreadLikeNotification$user$avatar.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadLikeNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadLikeNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> {
  _CopyWithImpl$Fragment$ThreadLikeNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ThreadLikeNotification$user$avatar _instance;

  final TRes Function(Fragment$ThreadLikeNotification$user$avatar) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadLikeNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadLikeNotification$user$avatar<TRes>
    implements CopyWith$Fragment$ThreadLikeNotification$user$avatar<TRes> {
  _CopyWithStubImpl$Fragment$ThreadLikeNotification$user$avatar(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentSubscribedNotification {
  Fragment$ThreadCommentSubscribedNotification({
    required this.id,
    this.thread,
    this.user,
    this.context,
    this.createdAt,
    this.$__typename = 'ThreadCommentSubscribedNotification',
  });

  factory Fragment$ThreadCommentSubscribedNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$thread = json['thread'];
    final l$user = json['user'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentSubscribedNotification(
      id: (l$id as int),
      thread: l$thread == null
          ? null
          : Fragment$ThreadCommentSubscribedNotification$thread.fromJson(
              (l$thread as Map<String, dynamic>)),
      user: l$user == null
          ? null
          : Fragment$ThreadCommentSubscribedNotification$user.fromJson(
              (l$user as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ThreadCommentSubscribedNotification$thread? thread;

  final Fragment$ThreadCommentSubscribedNotification$user? user;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$thread = thread;
    _resultData['thread'] = l$thread?.toJson();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$thread = thread;
    final l$user = user;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$thread,
      l$user,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentSubscribedNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$thread = thread;
    final lOther$thread = other.thread;
    if (l$thread != lOther$thread) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentSubscribedNotification
    on Fragment$ThreadCommentSubscribedNotification {
  CopyWith$Fragment$ThreadCommentSubscribedNotification<
          Fragment$ThreadCommentSubscribedNotification>
      get copyWith => CopyWith$Fragment$ThreadCommentSubscribedNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentSubscribedNotification<TRes> {
  factory CopyWith$Fragment$ThreadCommentSubscribedNotification(
    Fragment$ThreadCommentSubscribedNotification instance,
    TRes Function(Fragment$ThreadCommentSubscribedNotification) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification;

  factory CopyWith$Fragment$ThreadCommentSubscribedNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification;

  TRes call({
    int? id,
    Fragment$ThreadCommentSubscribedNotification$thread? thread,
    Fragment$ThreadCommentSubscribedNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<TRes> get thread;
  CopyWith$Fragment$ThreadCommentSubscribedNotification$user<TRes> get user;
}

class _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentSubscribedNotification<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentSubscribedNotification _instance;

  final TRes Function(Fragment$ThreadCommentSubscribedNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? thread = _undefined,
    Object? user = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentSubscribedNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        thread: thread == _undefined
            ? _instance.thread
            : (thread as Fragment$ThreadCommentSubscribedNotification$thread?),
        user: user == _undefined
            ? _instance.user
            : (user as Fragment$ThreadCommentSubscribedNotification$user?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<TRes>
      get thread {
    final local$thread = _instance.thread;
    return local$thread == null
        ? CopyWith$Fragment$ThreadCommentSubscribedNotification$thread.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentSubscribedNotification$thread(
            local$thread, (e) => call(thread: e));
  }

  CopyWith$Fragment$ThreadCommentSubscribedNotification$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Fragment$ThreadCommentSubscribedNotification$user.stub(
            _then(_instance))
        : CopyWith$Fragment$ThreadCommentSubscribedNotification$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification<TRes>
    implements CopyWith$Fragment$ThreadCommentSubscribedNotification<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ThreadCommentSubscribedNotification$thread? thread,
    Fragment$ThreadCommentSubscribedNotification$user? user,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<TRes>
      get thread =>
          CopyWith$Fragment$ThreadCommentSubscribedNotification$thread.stub(
              _res);

  CopyWith$Fragment$ThreadCommentSubscribedNotification$user<TRes> get user =>
      CopyWith$Fragment$ThreadCommentSubscribedNotification$user.stub(_res);
}

const fragmentDefinitionThreadCommentSubscribedNotification =
    FragmentDefinitionNode(
  name: NameNode(value: 'ThreadCommentSubscribedNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'ThreadCommentSubscribedNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'thread'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'user'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'name'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'avatar'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentThreadCommentSubscribedNotification =
    DocumentNode(definitions: [
  fragmentDefinitionThreadCommentSubscribedNotification,
]);

extension ClientExtension$Fragment$ThreadCommentSubscribedNotification
    on graphql.GraphQLClient {
  void writeFragment$ThreadCommentSubscribedNotification({
    required Fragment$ThreadCommentSubscribedNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ThreadCommentSubscribedNotification',
            document: documentNodeFragmentThreadCommentSubscribedNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ThreadCommentSubscribedNotification?
      readFragment$ThreadCommentSubscribedNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ThreadCommentSubscribedNotification',
          document: documentNodeFragmentThreadCommentSubscribedNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$ThreadCommentSubscribedNotification.fromJson(result);
  }
}

class Fragment$ThreadCommentSubscribedNotification$thread {
  Fragment$ThreadCommentSubscribedNotification$thread({
    required this.id,
    this.$__typename = 'Thread',
  });

  factory Fragment$ThreadCommentSubscribedNotification$thread.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentSubscribedNotification$thread(
      id: (l$id as int),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentSubscribedNotification$thread ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentSubscribedNotification$thread
    on Fragment$ThreadCommentSubscribedNotification$thread {
  CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<
          Fragment$ThreadCommentSubscribedNotification$thread>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentSubscribedNotification$thread(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$thread(
    Fragment$ThreadCommentSubscribedNotification$thread instance,
    TRes Function(Fragment$ThreadCommentSubscribedNotification$thread) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$thread;

  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$thread.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$thread;

  TRes call({
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$thread<TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$thread(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentSubscribedNotification$thread _instance;

  final TRes Function(Fragment$ThreadCommentSubscribedNotification$thread)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentSubscribedNotification$thread(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$thread<
        TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$thread<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$thread(
      this._res);

  TRes _res;

  call({
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ThreadCommentSubscribedNotification$user {
  Fragment$ThreadCommentSubscribedNotification$user({
    required this.id,
    required this.name,
    this.avatar,
    this.$__typename = 'User',
  });

  factory Fragment$ThreadCommentSubscribedNotification$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$avatar = json['avatar'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentSubscribedNotification$user(
      id: (l$id as int),
      name: (l$name as String),
      avatar: l$avatar == null
          ? null
          : Fragment$ThreadCommentSubscribedNotification$user$avatar.fromJson(
              (l$avatar as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String name;

  final Fragment$ThreadCommentSubscribedNotification$user$avatar? avatar;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$avatar = avatar;
    _resultData['avatar'] = l$avatar?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$avatar = avatar;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$avatar,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentSubscribedNotification$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$avatar = avatar;
    final lOther$avatar = other.avatar;
    if (l$avatar != lOther$avatar) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentSubscribedNotification$user
    on Fragment$ThreadCommentSubscribedNotification$user {
  CopyWith$Fragment$ThreadCommentSubscribedNotification$user<
          Fragment$ThreadCommentSubscribedNotification$user>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentSubscribedNotification$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentSubscribedNotification$user<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$user(
    Fragment$ThreadCommentSubscribedNotification$user instance,
    TRes Function(Fragment$ThreadCommentSubscribedNotification$user) then,
  ) = _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user;

  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$user.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user;

  TRes call({
    int? id,
    String? name,
    Fragment$ThreadCommentSubscribedNotification$user$avatar? avatar,
    String? $__typename,
  });
  CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<TRes>
      get avatar;
}

class _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user<TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$user<TRes> {
  _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentSubscribedNotification$user _instance;

  final TRes Function(Fragment$ThreadCommentSubscribedNotification$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? avatar = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentSubscribedNotification$user(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        avatar: avatar == _undefined
            ? _instance.avatar
            : (avatar
                as Fragment$ThreadCommentSubscribedNotification$user$avatar?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<TRes>
      get avatar {
    final local$avatar = _instance.avatar;
    return local$avatar == null
        ? CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar
            .stub(_then(_instance))
        : CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar(
            local$avatar, (e) => call(avatar: e));
  }
}

class _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user<TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$user<TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    Fragment$ThreadCommentSubscribedNotification$user$avatar? avatar,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<TRes>
      get avatar =>
          CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar
              .stub(_res);
}

class Fragment$ThreadCommentSubscribedNotification$user$avatar {
  Fragment$ThreadCommentSubscribedNotification$user$avatar({
    this.medium,
    this.$__typename = 'UserAvatar',
  });

  factory Fragment$ThreadCommentSubscribedNotification$user$avatar.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$ThreadCommentSubscribedNotification$user$avatar(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ThreadCommentSubscribedNotification$user$avatar ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ThreadCommentSubscribedNotification$user$avatar
    on Fragment$ThreadCommentSubscribedNotification$user$avatar {
  CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<
          Fragment$ThreadCommentSubscribedNotification$user$avatar>
      get copyWith =>
          CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<
    TRes> {
  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar(
    Fragment$ThreadCommentSubscribedNotification$user$avatar instance,
    TRes Function(Fragment$ThreadCommentSubscribedNotification$user$avatar)
        then,
  ) = _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar;

  factory CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<
            TRes> {
  _CopyWithImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar(
    this._instance,
    this._then,
  );

  final Fragment$ThreadCommentSubscribedNotification$user$avatar _instance;

  final TRes Function(Fragment$ThreadCommentSubscribedNotification$user$avatar)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ThreadCommentSubscribedNotification$user$avatar(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar<
        TRes>
    implements
        CopyWith$Fragment$ThreadCommentSubscribedNotification$user$avatar<
            TRes> {
  _CopyWithStubImpl$Fragment$ThreadCommentSubscribedNotification$user$avatar(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDeletionNotification {
  Fragment$MediaDeletionNotification({
    required this.id,
    this.deletedMediaTitle,
    this.reason,
    this.context,
    this.createdAt,
    this.$__typename = 'MediaDeletionNotification',
  });

  factory Fragment$MediaDeletionNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$deletedMediaTitle = json['deletedMediaTitle'];
    final l$reason = json['reason'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDeletionNotification(
      id: (l$id as int),
      deletedMediaTitle: (l$deletedMediaTitle as String?),
      reason: (l$reason as String?),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final String? deletedMediaTitle;

  final String? reason;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$deletedMediaTitle = deletedMediaTitle;
    _resultData['deletedMediaTitle'] = l$deletedMediaTitle;
    final l$reason = reason;
    _resultData['reason'] = l$reason;
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$deletedMediaTitle = deletedMediaTitle;
    final l$reason = reason;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$deletedMediaTitle,
      l$reason,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDeletionNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$deletedMediaTitle = deletedMediaTitle;
    final lOther$deletedMediaTitle = other.deletedMediaTitle;
    if (l$deletedMediaTitle != lOther$deletedMediaTitle) {
      return false;
    }
    final l$reason = reason;
    final lOther$reason = other.reason;
    if (l$reason != lOther$reason) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDeletionNotification
    on Fragment$MediaDeletionNotification {
  CopyWith$Fragment$MediaDeletionNotification<
          Fragment$MediaDeletionNotification>
      get copyWith => CopyWith$Fragment$MediaDeletionNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDeletionNotification<TRes> {
  factory CopyWith$Fragment$MediaDeletionNotification(
    Fragment$MediaDeletionNotification instance,
    TRes Function(Fragment$MediaDeletionNotification) then,
  ) = _CopyWithImpl$Fragment$MediaDeletionNotification;

  factory CopyWith$Fragment$MediaDeletionNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDeletionNotification;

  TRes call({
    int? id,
    String? deletedMediaTitle,
    String? reason,
    String? context,
    int? createdAt,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDeletionNotification<TRes>
    implements CopyWith$Fragment$MediaDeletionNotification<TRes> {
  _CopyWithImpl$Fragment$MediaDeletionNotification(
    this._instance,
    this._then,
  );

  final Fragment$MediaDeletionNotification _instance;

  final TRes Function(Fragment$MediaDeletionNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? deletedMediaTitle = _undefined,
    Object? reason = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDeletionNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        deletedMediaTitle: deletedMediaTitle == _undefined
            ? _instance.deletedMediaTitle
            : (deletedMediaTitle as String?),
        reason: reason == _undefined ? _instance.reason : (reason as String?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDeletionNotification<TRes>
    implements CopyWith$Fragment$MediaDeletionNotification<TRes> {
  _CopyWithStubImpl$Fragment$MediaDeletionNotification(this._res);

  TRes _res;

  call({
    int? id,
    String? deletedMediaTitle,
    String? reason,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;
}

const fragmentDefinitionMediaDeletionNotification = FragmentDefinitionNode(
  name: NameNode(value: 'MediaDeletionNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaDeletionNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'deletedMediaTitle'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'reason'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaDeletionNotification =
    DocumentNode(definitions: [
  fragmentDefinitionMediaDeletionNotification,
]);

extension ClientExtension$Fragment$MediaDeletionNotification
    on graphql.GraphQLClient {
  void writeFragment$MediaDeletionNotification({
    required Fragment$MediaDeletionNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaDeletionNotification',
            document: documentNodeFragmentMediaDeletionNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaDeletionNotification? readFragment$MediaDeletionNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaDeletionNotification',
          document: documentNodeFragmentMediaDeletionNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$MediaDeletionNotification.fromJson(result);
  }
}

class Fragment$MediaMergeNotification {
  Fragment$MediaMergeNotification({
    required this.id,
    this.media,
    this.deletedMediaTitles,
    this.context,
    this.createdAt,
    this.reason,
    this.$__typename = 'MediaMergeNotification',
  });

  factory Fragment$MediaMergeNotification.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$media = json['media'];
    final l$deletedMediaTitles = json['deletedMediaTitles'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$reason = json['reason'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaMergeNotification(
      id: (l$id as int),
      media: l$media == null
          ? null
          : Fragment$MediaMergeNotification$media.fromJson(
              (l$media as Map<String, dynamic>)),
      deletedMediaTitles: (l$deletedMediaTitles as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      reason: (l$reason as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaMergeNotification$media? media;

  final List<String?>? deletedMediaTitles;

  final String? context;

  final int? createdAt;

  final String? reason;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$deletedMediaTitles = deletedMediaTitles;
    _resultData['deletedMediaTitles'] =
        l$deletedMediaTitles?.map((e) => e).toList();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$reason = reason;
    _resultData['reason'] = l$reason;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$media = media;
    final l$deletedMediaTitles = deletedMediaTitles;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$reason = reason;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$media,
      l$deletedMediaTitles == null
          ? null
          : Object.hashAll(l$deletedMediaTitles.map((v) => v)),
      l$context,
      l$createdAt,
      l$reason,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaMergeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$deletedMediaTitles = deletedMediaTitles;
    final lOther$deletedMediaTitles = other.deletedMediaTitles;
    if (l$deletedMediaTitles != null && lOther$deletedMediaTitles != null) {
      if (l$deletedMediaTitles.length != lOther$deletedMediaTitles.length) {
        return false;
      }
      for (int i = 0; i < l$deletedMediaTitles.length; i++) {
        final l$deletedMediaTitles$entry = l$deletedMediaTitles[i];
        final lOther$deletedMediaTitles$entry = lOther$deletedMediaTitles[i];
        if (l$deletedMediaTitles$entry != lOther$deletedMediaTitles$entry) {
          return false;
        }
      }
    } else if (l$deletedMediaTitles != lOther$deletedMediaTitles) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$reason = reason;
    final lOther$reason = other.reason;
    if (l$reason != lOther$reason) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaMergeNotification
    on Fragment$MediaMergeNotification {
  CopyWith$Fragment$MediaMergeNotification<Fragment$MediaMergeNotification>
      get copyWith => CopyWith$Fragment$MediaMergeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaMergeNotification<TRes> {
  factory CopyWith$Fragment$MediaMergeNotification(
    Fragment$MediaMergeNotification instance,
    TRes Function(Fragment$MediaMergeNotification) then,
  ) = _CopyWithImpl$Fragment$MediaMergeNotification;

  factory CopyWith$Fragment$MediaMergeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaMergeNotification;

  TRes call({
    int? id,
    Fragment$MediaMergeNotification$media? media,
    List<String?>? deletedMediaTitles,
    String? context,
    int? createdAt,
    String? reason,
    String? $__typename,
  });
  CopyWith$Fragment$MediaMergeNotification$media<TRes> get media;
}

class _CopyWithImpl$Fragment$MediaMergeNotification<TRes>
    implements CopyWith$Fragment$MediaMergeNotification<TRes> {
  _CopyWithImpl$Fragment$MediaMergeNotification(
    this._instance,
    this._then,
  );

  final Fragment$MediaMergeNotification _instance;

  final TRes Function(Fragment$MediaMergeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? media = _undefined,
    Object? deletedMediaTitles = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? reason = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaMergeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$MediaMergeNotification$media?),
        deletedMediaTitles: deletedMediaTitles == _undefined
            ? _instance.deletedMediaTitles
            : (deletedMediaTitles as List<String?>?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        reason: reason == _undefined ? _instance.reason : (reason as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaMergeNotification$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$MediaMergeNotification$media.stub(_then(_instance))
        : CopyWith$Fragment$MediaMergeNotification$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaMergeNotification<TRes>
    implements CopyWith$Fragment$MediaMergeNotification<TRes> {
  _CopyWithStubImpl$Fragment$MediaMergeNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaMergeNotification$media? media,
    List<String?>? deletedMediaTitles,
    String? context,
    int? createdAt,
    String? reason,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaMergeNotification$media<TRes> get media =>
      CopyWith$Fragment$MediaMergeNotification$media.stub(_res);
}

const fragmentDefinitionMediaMergeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'MediaMergeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaMergeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'deletedMediaTitles'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'reason'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaMergeNotification = DocumentNode(definitions: [
  fragmentDefinitionMediaMergeNotification,
]);

extension ClientExtension$Fragment$MediaMergeNotification
    on graphql.GraphQLClient {
  void writeFragment$MediaMergeNotification({
    required Fragment$MediaMergeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaMergeNotification',
            document: documentNodeFragmentMediaMergeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaMergeNotification? readFragment$MediaMergeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaMergeNotification',
          document: documentNodeFragmentMediaMergeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$MediaMergeNotification.fromJson(result);
  }
}

class Fragment$MediaMergeNotification$media {
  Fragment$MediaMergeNotification$media({
    required this.id,
    this.title,
    this.coverImage,
    this.$__typename = 'Media',
  });

  factory Fragment$MediaMergeNotification$media.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaMergeNotification$media(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$MediaMergeNotification$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$MediaMergeNotification$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaMergeNotification$media$title? title;

  final Fragment$MediaMergeNotification$media$coverImage? coverImage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$coverImage = coverImage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$coverImage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaMergeNotification$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaMergeNotification$media
    on Fragment$MediaMergeNotification$media {
  CopyWith$Fragment$MediaMergeNotification$media<
          Fragment$MediaMergeNotification$media>
      get copyWith => CopyWith$Fragment$MediaMergeNotification$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaMergeNotification$media<TRes> {
  factory CopyWith$Fragment$MediaMergeNotification$media(
    Fragment$MediaMergeNotification$media instance,
    TRes Function(Fragment$MediaMergeNotification$media) then,
  ) = _CopyWithImpl$Fragment$MediaMergeNotification$media;

  factory CopyWith$Fragment$MediaMergeNotification$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaMergeNotification$media;

  TRes call({
    int? id,
    Fragment$MediaMergeNotification$media$title? title,
    Fragment$MediaMergeNotification$media$coverImage? coverImage,
    String? $__typename,
  });
  CopyWith$Fragment$MediaMergeNotification$media$title<TRes> get title;
  CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes>
      get coverImage;
}

class _CopyWithImpl$Fragment$MediaMergeNotification$media<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media<TRes> {
  _CopyWithImpl$Fragment$MediaMergeNotification$media(
    this._instance,
    this._then,
  );

  final Fragment$MediaMergeNotification$media _instance;

  final TRes Function(Fragment$MediaMergeNotification$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaMergeNotification$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$MediaMergeNotification$media$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$MediaMergeNotification$media$coverImage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaMergeNotification$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$MediaMergeNotification$media$title.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaMergeNotification$media$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes>
      get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$MediaMergeNotification$media$coverImage.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaMergeNotification$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaMergeNotification$media<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media<TRes> {
  _CopyWithStubImpl$Fragment$MediaMergeNotification$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaMergeNotification$media$title? title,
    Fragment$MediaMergeNotification$media$coverImage? coverImage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaMergeNotification$media$title<TRes> get title =>
      CopyWith$Fragment$MediaMergeNotification$media$title.stub(_res);

  CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes>
      get coverImage =>
          CopyWith$Fragment$MediaMergeNotification$media$coverImage.stub(_res);
}

class Fragment$MediaMergeNotification$media$title {
  Fragment$MediaMergeNotification$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$MediaMergeNotification$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaMergeNotification$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaMergeNotification$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaMergeNotification$media$title
    on Fragment$MediaMergeNotification$media$title {
  CopyWith$Fragment$MediaMergeNotification$media$title<
          Fragment$MediaMergeNotification$media$title>
      get copyWith => CopyWith$Fragment$MediaMergeNotification$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaMergeNotification$media$title<TRes> {
  factory CopyWith$Fragment$MediaMergeNotification$media$title(
    Fragment$MediaMergeNotification$media$title instance,
    TRes Function(Fragment$MediaMergeNotification$media$title) then,
  ) = _CopyWithImpl$Fragment$MediaMergeNotification$media$title;

  factory CopyWith$Fragment$MediaMergeNotification$media$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaMergeNotification$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaMergeNotification$media$title<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media$title<TRes> {
  _CopyWithImpl$Fragment$MediaMergeNotification$media$title(
    this._instance,
    this._then,
  );

  final Fragment$MediaMergeNotification$media$title _instance;

  final TRes Function(Fragment$MediaMergeNotification$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaMergeNotification$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaMergeNotification$media$title<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media$title<TRes> {
  _CopyWithStubImpl$Fragment$MediaMergeNotification$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaMergeNotification$media$coverImage {
  Fragment$MediaMergeNotification$media$coverImage({
    this.medium,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$MediaMergeNotification$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaMergeNotification$media$coverImage(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaMergeNotification$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaMergeNotification$media$coverImage
    on Fragment$MediaMergeNotification$media$coverImage {
  CopyWith$Fragment$MediaMergeNotification$media$coverImage<
          Fragment$MediaMergeNotification$media$coverImage>
      get copyWith => CopyWith$Fragment$MediaMergeNotification$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes> {
  factory CopyWith$Fragment$MediaMergeNotification$media$coverImage(
    Fragment$MediaMergeNotification$media$coverImage instance,
    TRes Function(Fragment$MediaMergeNotification$media$coverImage) then,
  ) = _CopyWithImpl$Fragment$MediaMergeNotification$media$coverImage;

  factory CopyWith$Fragment$MediaMergeNotification$media$coverImage.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaMergeNotification$media$coverImage;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaMergeNotification$media$coverImage<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes> {
  _CopyWithImpl$Fragment$MediaMergeNotification$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$MediaMergeNotification$media$coverImage _instance;

  final TRes Function(Fragment$MediaMergeNotification$media$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaMergeNotification$media$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaMergeNotification$media$coverImage<TRes>
    implements CopyWith$Fragment$MediaMergeNotification$media$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$MediaMergeNotification$media$coverImage(this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDataChangeNotification {
  Fragment$MediaDataChangeNotification({
    required this.id,
    this.media,
    this.context,
    this.reason,
    this.createdAt,
    this.$__typename = 'MediaDataChangeNotification',
  });

  factory Fragment$MediaDataChangeNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$media = json['media'];
    final l$context = json['context'];
    final l$reason = json['reason'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDataChangeNotification(
      id: (l$id as int),
      media: l$media == null
          ? null
          : Fragment$MediaDataChangeNotification$media.fromJson(
              (l$media as Map<String, dynamic>)),
      context: (l$context as String?),
      reason: (l$reason as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaDataChangeNotification$media? media;

  final String? context;

  final String? reason;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$reason = reason;
    _resultData['reason'] = l$reason;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$media = media;
    final l$context = context;
    final l$reason = reason;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$media,
      l$context,
      l$reason,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDataChangeNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$reason = reason;
    final lOther$reason = other.reason;
    if (l$reason != lOther$reason) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDataChangeNotification
    on Fragment$MediaDataChangeNotification {
  CopyWith$Fragment$MediaDataChangeNotification<
          Fragment$MediaDataChangeNotification>
      get copyWith => CopyWith$Fragment$MediaDataChangeNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDataChangeNotification<TRes> {
  factory CopyWith$Fragment$MediaDataChangeNotification(
    Fragment$MediaDataChangeNotification instance,
    TRes Function(Fragment$MediaDataChangeNotification) then,
  ) = _CopyWithImpl$Fragment$MediaDataChangeNotification;

  factory CopyWith$Fragment$MediaDataChangeNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDataChangeNotification;

  TRes call({
    int? id,
    Fragment$MediaDataChangeNotification$media? media,
    String? context,
    String? reason,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$MediaDataChangeNotification$media<TRes> get media;
}

class _CopyWithImpl$Fragment$MediaDataChangeNotification<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification<TRes> {
  _CopyWithImpl$Fragment$MediaDataChangeNotification(
    this._instance,
    this._then,
  );

  final Fragment$MediaDataChangeNotification _instance;

  final TRes Function(Fragment$MediaDataChangeNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? media = _undefined,
    Object? context = _undefined,
    Object? reason = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDataChangeNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$MediaDataChangeNotification$media?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        reason: reason == _undefined ? _instance.reason : (reason as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaDataChangeNotification$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$MediaDataChangeNotification$media.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDataChangeNotification$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDataChangeNotification<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification<TRes> {
  _CopyWithStubImpl$Fragment$MediaDataChangeNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaDataChangeNotification$media? media,
    String? context,
    String? reason,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaDataChangeNotification$media<TRes> get media =>
      CopyWith$Fragment$MediaDataChangeNotification$media.stub(_res);
}

const fragmentDefinitionMediaDataChangeNotification = FragmentDefinitionNode(
  name: NameNode(value: 'MediaDataChangeNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaDataChangeNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'reason'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaDataChangeNotification =
    DocumentNode(definitions: [
  fragmentDefinitionMediaDataChangeNotification,
]);

extension ClientExtension$Fragment$MediaDataChangeNotification
    on graphql.GraphQLClient {
  void writeFragment$MediaDataChangeNotification({
    required Fragment$MediaDataChangeNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaDataChangeNotification',
            document: documentNodeFragmentMediaDataChangeNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaDataChangeNotification?
      readFragment$MediaDataChangeNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaDataChangeNotification',
          document: documentNodeFragmentMediaDataChangeNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$MediaDataChangeNotification.fromJson(result);
  }
}

class Fragment$MediaDataChangeNotification$media {
  Fragment$MediaDataChangeNotification$media({
    required this.id,
    this.title,
    this.coverImage,
    this.$__typename = 'Media',
  });

  factory Fragment$MediaDataChangeNotification$media.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDataChangeNotification$media(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$MediaDataChangeNotification$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$MediaDataChangeNotification$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$MediaDataChangeNotification$media$title? title;

  final Fragment$MediaDataChangeNotification$media$coverImage? coverImage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$coverImage = coverImage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$coverImage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDataChangeNotification$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDataChangeNotification$media
    on Fragment$MediaDataChangeNotification$media {
  CopyWith$Fragment$MediaDataChangeNotification$media<
          Fragment$MediaDataChangeNotification$media>
      get copyWith => CopyWith$Fragment$MediaDataChangeNotification$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDataChangeNotification$media<TRes> {
  factory CopyWith$Fragment$MediaDataChangeNotification$media(
    Fragment$MediaDataChangeNotification$media instance,
    TRes Function(Fragment$MediaDataChangeNotification$media) then,
  ) = _CopyWithImpl$Fragment$MediaDataChangeNotification$media;

  factory CopyWith$Fragment$MediaDataChangeNotification$media.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media;

  TRes call({
    int? id,
    Fragment$MediaDataChangeNotification$media$title? title,
    Fragment$MediaDataChangeNotification$media$coverImage? coverImage,
    String? $__typename,
  });
  CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> get title;
  CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<TRes>
      get coverImage;
}

class _CopyWithImpl$Fragment$MediaDataChangeNotification$media<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification$media<TRes> {
  _CopyWithImpl$Fragment$MediaDataChangeNotification$media(
    this._instance,
    this._then,
  );

  final Fragment$MediaDataChangeNotification$media _instance;

  final TRes Function(Fragment$MediaDataChangeNotification$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDataChangeNotification$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$MediaDataChangeNotification$media$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage
                as Fragment$MediaDataChangeNotification$media$coverImage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$MediaDataChangeNotification$media$title.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDataChangeNotification$media$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<TRes>
      get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$MediaDataChangeNotification$media$coverImage.stub(
            _then(_instance))
        : CopyWith$Fragment$MediaDataChangeNotification$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification$media<TRes> {
  _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$MediaDataChangeNotification$media$title? title,
    Fragment$MediaDataChangeNotification$media$coverImage? coverImage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> get title =>
      CopyWith$Fragment$MediaDataChangeNotification$media$title.stub(_res);

  CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<TRes>
      get coverImage =>
          CopyWith$Fragment$MediaDataChangeNotification$media$coverImage.stub(
              _res);
}

class Fragment$MediaDataChangeNotification$media$title {
  Fragment$MediaDataChangeNotification$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$MediaDataChangeNotification$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDataChangeNotification$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDataChangeNotification$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDataChangeNotification$media$title
    on Fragment$MediaDataChangeNotification$media$title {
  CopyWith$Fragment$MediaDataChangeNotification$media$title<
          Fragment$MediaDataChangeNotification$media$title>
      get copyWith => CopyWith$Fragment$MediaDataChangeNotification$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> {
  factory CopyWith$Fragment$MediaDataChangeNotification$media$title(
    Fragment$MediaDataChangeNotification$media$title instance,
    TRes Function(Fragment$MediaDataChangeNotification$media$title) then,
  ) = _CopyWithImpl$Fragment$MediaDataChangeNotification$media$title;

  factory CopyWith$Fragment$MediaDataChangeNotification$media$title.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDataChangeNotification$media$title<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> {
  _CopyWithImpl$Fragment$MediaDataChangeNotification$media$title(
    this._instance,
    this._then,
  );

  final Fragment$MediaDataChangeNotification$media$title _instance;

  final TRes Function(Fragment$MediaDataChangeNotification$media$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDataChangeNotification$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$title<TRes>
    implements CopyWith$Fragment$MediaDataChangeNotification$media$title<TRes> {
  _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaDataChangeNotification$media$coverImage {
  Fragment$MediaDataChangeNotification$media$coverImage({
    this.medium,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$MediaDataChangeNotification$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaDataChangeNotification$media$coverImage(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaDataChangeNotification$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaDataChangeNotification$media$coverImage
    on Fragment$MediaDataChangeNotification$media$coverImage {
  CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<
          Fragment$MediaDataChangeNotification$media$coverImage>
      get copyWith =>
          CopyWith$Fragment$MediaDataChangeNotification$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<
    TRes> {
  factory CopyWith$Fragment$MediaDataChangeNotification$media$coverImage(
    Fragment$MediaDataChangeNotification$media$coverImage instance,
    TRes Function(Fragment$MediaDataChangeNotification$media$coverImage) then,
  ) = _CopyWithImpl$Fragment$MediaDataChangeNotification$media$coverImage;

  factory CopyWith$Fragment$MediaDataChangeNotification$media$coverImage.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$coverImage;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaDataChangeNotification$media$coverImage<TRes>
    implements
        CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<TRes> {
  _CopyWithImpl$Fragment$MediaDataChangeNotification$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$MediaDataChangeNotification$media$coverImage _instance;

  final TRes Function(Fragment$MediaDataChangeNotification$media$coverImage)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaDataChangeNotification$media$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$coverImage<
        TRes>
    implements
        CopyWith$Fragment$MediaDataChangeNotification$media$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$MediaDataChangeNotification$media$coverImage(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$RelatedMediaAdditionNotification {
  Fragment$RelatedMediaAdditionNotification({
    required this.id,
    this.media,
    this.context,
    this.createdAt,
    this.$__typename = 'RelatedMediaAdditionNotification',
  });

  factory Fragment$RelatedMediaAdditionNotification.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$media = json['media'];
    final l$context = json['context'];
    final l$createdAt = json['createdAt'];
    final l$$__typename = json['__typename'];
    return Fragment$RelatedMediaAdditionNotification(
      id: (l$id as int),
      media: l$media == null
          ? null
          : Fragment$RelatedMediaAdditionNotification$media.fromJson(
              (l$media as Map<String, dynamic>)),
      context: (l$context as String?),
      createdAt: (l$createdAt as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$RelatedMediaAdditionNotification$media? media;

  final String? context;

  final int? createdAt;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$context = context;
    _resultData['context'] = l$context;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$media = media;
    final l$context = context;
    final l$createdAt = createdAt;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$media,
      l$context,
      l$createdAt,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$RelatedMediaAdditionNotification ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$context = context;
    final lOther$context = other.context;
    if (l$context != lOther$context) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$RelatedMediaAdditionNotification
    on Fragment$RelatedMediaAdditionNotification {
  CopyWith$Fragment$RelatedMediaAdditionNotification<
          Fragment$RelatedMediaAdditionNotification>
      get copyWith => CopyWith$Fragment$RelatedMediaAdditionNotification(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$RelatedMediaAdditionNotification<TRes> {
  factory CopyWith$Fragment$RelatedMediaAdditionNotification(
    Fragment$RelatedMediaAdditionNotification instance,
    TRes Function(Fragment$RelatedMediaAdditionNotification) then,
  ) = _CopyWithImpl$Fragment$RelatedMediaAdditionNotification;

  factory CopyWith$Fragment$RelatedMediaAdditionNotification.stub(TRes res) =
      _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification;

  TRes call({
    int? id,
    Fragment$RelatedMediaAdditionNotification$media? media,
    String? context,
    int? createdAt,
    String? $__typename,
  });
  CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> get media;
}

class _CopyWithImpl$Fragment$RelatedMediaAdditionNotification<TRes>
    implements CopyWith$Fragment$RelatedMediaAdditionNotification<TRes> {
  _CopyWithImpl$Fragment$RelatedMediaAdditionNotification(
    this._instance,
    this._then,
  );

  final Fragment$RelatedMediaAdditionNotification _instance;

  final TRes Function(Fragment$RelatedMediaAdditionNotification) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? media = _undefined,
    Object? context = _undefined,
    Object? createdAt = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$RelatedMediaAdditionNotification(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$RelatedMediaAdditionNotification$media?),
        context:
            context == _undefined ? _instance.context : (context as String?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$RelatedMediaAdditionNotification$media.stub(
            _then(_instance))
        : CopyWith$Fragment$RelatedMediaAdditionNotification$media(
            local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification<TRes>
    implements CopyWith$Fragment$RelatedMediaAdditionNotification<TRes> {
  _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$RelatedMediaAdditionNotification$media? media,
    String? context,
    int? createdAt,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> get media =>
      CopyWith$Fragment$RelatedMediaAdditionNotification$media.stub(_res);
}

const fragmentDefinitionRelatedMediaAdditionNotification =
    FragmentDefinitionNode(
  name: NameNode(value: 'RelatedMediaAdditionNotification'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'RelatedMediaAdditionNotification'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'id'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'title'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'userPreferred'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: 'coverImage'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: SelectionSetNode(selections: [
            FieldNode(
              name: NameNode(value: 'medium'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
            FieldNode(
              name: NameNode(value: '__typename'),
              alias: null,
              arguments: [],
              directives: [],
              selectionSet: null,
            ),
          ]),
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'context'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentRelatedMediaAdditionNotification =
    DocumentNode(definitions: [
  fragmentDefinitionRelatedMediaAdditionNotification,
]);

extension ClientExtension$Fragment$RelatedMediaAdditionNotification
    on graphql.GraphQLClient {
  void writeFragment$RelatedMediaAdditionNotification({
    required Fragment$RelatedMediaAdditionNotification data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'RelatedMediaAdditionNotification',
            document: documentNodeFragmentRelatedMediaAdditionNotification,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$RelatedMediaAdditionNotification?
      readFragment$RelatedMediaAdditionNotification({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'RelatedMediaAdditionNotification',
          document: documentNodeFragmentRelatedMediaAdditionNotification,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Fragment$RelatedMediaAdditionNotification.fromJson(result);
  }
}

class Fragment$RelatedMediaAdditionNotification$media {
  Fragment$RelatedMediaAdditionNotification$media({
    required this.id,
    this.title,
    this.coverImage,
    this.$__typename = 'Media',
  });

  factory Fragment$RelatedMediaAdditionNotification$media.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$coverImage = json['coverImage'];
    final l$$__typename = json['__typename'];
    return Fragment$RelatedMediaAdditionNotification$media(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$RelatedMediaAdditionNotification$media$title.fromJson(
              (l$title as Map<String, dynamic>)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$RelatedMediaAdditionNotification$media$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$RelatedMediaAdditionNotification$media$title? title;

  final Fragment$RelatedMediaAdditionNotification$media$coverImage? coverImage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$coverImage = coverImage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$coverImage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$RelatedMediaAdditionNotification$media ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$RelatedMediaAdditionNotification$media
    on Fragment$RelatedMediaAdditionNotification$media {
  CopyWith$Fragment$RelatedMediaAdditionNotification$media<
          Fragment$RelatedMediaAdditionNotification$media>
      get copyWith => CopyWith$Fragment$RelatedMediaAdditionNotification$media(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> {
  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media(
    Fragment$RelatedMediaAdditionNotification$media instance,
    TRes Function(Fragment$RelatedMediaAdditionNotification$media) then,
  ) = _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media;

  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media;

  TRes call({
    int? id,
    Fragment$RelatedMediaAdditionNotification$media$title? title,
    Fragment$RelatedMediaAdditionNotification$media$coverImage? coverImage,
    String? $__typename,
  });
  CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<TRes>
      get title;
  CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<TRes>
      get coverImage;
}

class _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media<TRes>
    implements CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> {
  _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media(
    this._instance,
    this._then,
  );

  final Fragment$RelatedMediaAdditionNotification$media _instance;

  final TRes Function(Fragment$RelatedMediaAdditionNotification$media) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? coverImage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$RelatedMediaAdditionNotification$media(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$RelatedMediaAdditionNotification$media$title?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage
                as Fragment$RelatedMediaAdditionNotification$media$coverImage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<TRes>
      get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$RelatedMediaAdditionNotification$media$title.stub(
            _then(_instance))
        : CopyWith$Fragment$RelatedMediaAdditionNotification$media$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<TRes>
      get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage
            .stub(_then(_instance))
        : CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }
}

class _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media<TRes>
    implements CopyWith$Fragment$RelatedMediaAdditionNotification$media<TRes> {
  _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$RelatedMediaAdditionNotification$media$title? title,
    Fragment$RelatedMediaAdditionNotification$media$coverImage? coverImage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<TRes>
      get title =>
          CopyWith$Fragment$RelatedMediaAdditionNotification$media$title.stub(
              _res);

  CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<TRes>
      get coverImage =>
          CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage
              .stub(_res);
}

class Fragment$RelatedMediaAdditionNotification$media$title {
  Fragment$RelatedMediaAdditionNotification$media$title({
    this.userPreferred,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$RelatedMediaAdditionNotification$media$title.fromJson(
      Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$$__typename = json['__typename'];
    return Fragment$RelatedMediaAdditionNotification$media$title(
      userPreferred: (l$userPreferred as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$RelatedMediaAdditionNotification$media$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$RelatedMediaAdditionNotification$media$title
    on Fragment$RelatedMediaAdditionNotification$media$title {
  CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<
          Fragment$RelatedMediaAdditionNotification$media$title>
      get copyWith =>
          CopyWith$Fragment$RelatedMediaAdditionNotification$media$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<
    TRes> {
  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media$title(
    Fragment$RelatedMediaAdditionNotification$media$title instance,
    TRes Function(Fragment$RelatedMediaAdditionNotification$media$title) then,
  ) = _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$title;

  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media$title.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$title;

  TRes call({
    String? userPreferred,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$title<TRes>
    implements
        CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<TRes> {
  _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$title(
    this._instance,
    this._then,
  );

  final Fragment$RelatedMediaAdditionNotification$media$title _instance;

  final TRes Function(Fragment$RelatedMediaAdditionNotification$media$title)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$RelatedMediaAdditionNotification$media$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$title<
        TRes>
    implements
        CopyWith$Fragment$RelatedMediaAdditionNotification$media$title<TRes> {
  _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$title(
      this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$RelatedMediaAdditionNotification$media$coverImage {
  Fragment$RelatedMediaAdditionNotification$media$coverImage({
    this.medium,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$RelatedMediaAdditionNotification$media$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$medium = json['medium'];
    final l$$__typename = json['__typename'];
    return Fragment$RelatedMediaAdditionNotification$media$coverImage(
      medium: (l$medium as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? medium;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$medium = medium;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$medium,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$RelatedMediaAdditionNotification$media$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$RelatedMediaAdditionNotification$media$coverImage
    on Fragment$RelatedMediaAdditionNotification$media$coverImage {
  CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<
          Fragment$RelatedMediaAdditionNotification$media$coverImage>
      get copyWith =>
          CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<
    TRes> {
  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage(
    Fragment$RelatedMediaAdditionNotification$media$coverImage instance,
    TRes Function(Fragment$RelatedMediaAdditionNotification$media$coverImage)
        then,
  ) = _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage;

  factory CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage.stub(
          TRes res) =
      _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage;

  TRes call({
    String? medium,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage<
        TRes>
    implements
        CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<
            TRes> {
  _CopyWithImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$RelatedMediaAdditionNotification$media$coverImage _instance;

  final TRes Function(
      Fragment$RelatedMediaAdditionNotification$media$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? medium = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$RelatedMediaAdditionNotification$media$coverImage(
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage<
        TRes>
    implements
        CopyWith$Fragment$RelatedMediaAdditionNotification$media$coverImage<
            TRes> {
  _CopyWithStubImpl$Fragment$RelatedMediaAdditionNotification$media$coverImage(
      this._res);

  TRes _res;

  call({
    String? medium,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaListEntry {
  Fragment$MediaListEntry({
    required this.id,
    required this.mediaId,
    this.status,
    this.score,
    this.progress,
    this.progressVolumes,
    this.repeat,
    this.priority,
    this.private,
    this.hiddenFromStatusLists,
    this.customLists,
    this.advancedScores,
    this.notes,
    this.updatedAt,
    this.createdAt,
    this.startedAt,
    this.completedAt,
    this.media,
    this.$__typename = 'MediaList',
  });

  factory Fragment$MediaListEntry.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$mediaId = json['mediaId'];
    final l$status = json['status'];
    final l$score = json['score'];
    final l$progress = json['progress'];
    final l$progressVolumes = json['progressVolumes'];
    final l$repeat = json['repeat'];
    final l$priority = json['priority'];
    final l$private = json['private'];
    final l$hiddenFromStatusLists = json['hiddenFromStatusLists'];
    final l$customLists = json['customLists'];
    final l$advancedScores = json['advancedScores'];
    final l$notes = json['notes'];
    final l$updatedAt = json['updatedAt'];
    final l$createdAt = json['createdAt'];
    final l$startedAt = json['startedAt'];
    final l$completedAt = json['completedAt'];
    final l$media = json['media'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListEntry(
      id: (l$id as int),
      mediaId: (l$mediaId as int),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaListStatus((l$status as String)),
      score: (l$score as num?)?.toDouble(),
      progress: (l$progress as int?),
      progressVolumes: (l$progressVolumes as int?),
      repeat: (l$repeat as int?),
      priority: (l$priority as int?),
      private: (l$private as bool?),
      hiddenFromStatusLists: (l$hiddenFromStatusLists as bool?),
      customLists: (jsonEncode(l$customLists) as String?),
      advancedScores: (jsonEncode(l$advancedScores) as String?),
      notes: (l$notes as String?),
      updatedAt: (l$updatedAt as int?),
      createdAt: (l$createdAt as int?),
      startedAt: l$startedAt == null
          ? null
          : Fragment$MediaListEntry$startedAt.fromJson(
              (l$startedAt as Map<String, dynamic>)),
      completedAt: l$completedAt == null
          ? null
          : Fragment$MediaListEntry$completedAt.fromJson(
              (l$completedAt as Map<String, dynamic>)),
      media: l$media == null
          ? null
          : Fragment$ListEntryMedia.fromJson((l$media as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final int mediaId;

  final Enum$MediaListStatus? status;

  final double? score;

  final int? progress;

  final int? progressVolumes;

  final int? repeat;

  final int? priority;

  final bool? private;

  final bool? hiddenFromStatusLists;

  final String? customLists;

  final String? advancedScores;

  final String? notes;

  final int? updatedAt;

  final int? createdAt;

  final Fragment$MediaListEntry$startedAt? startedAt;

  final Fragment$MediaListEntry$completedAt? completedAt;

  final Fragment$ListEntryMedia? media;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$mediaId = mediaId;
    _resultData['mediaId'] = l$mediaId;
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaListStatus(l$status);
    final l$score = score;
    _resultData['score'] = l$score;
    final l$progress = progress;
    _resultData['progress'] = l$progress;
    final l$progressVolumes = progressVolumes;
    _resultData['progressVolumes'] = l$progressVolumes;
    final l$repeat = repeat;
    _resultData['repeat'] = l$repeat;
    final l$priority = priority;
    _resultData['priority'] = l$priority;
    final l$private = private;
    _resultData['private'] = l$private;
    final l$hiddenFromStatusLists = hiddenFromStatusLists;
    _resultData['hiddenFromStatusLists'] = l$hiddenFromStatusLists;
    final l$customLists = customLists;
    _resultData['customLists'] = l$customLists;
    final l$advancedScores = advancedScores;
    _resultData['advancedScores'] = l$advancedScores;
    final l$notes = notes;
    _resultData['notes'] = l$notes;
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt;
    final l$startedAt = startedAt;
    _resultData['startedAt'] = l$startedAt?.toJson();
    final l$completedAt = completedAt;
    _resultData['completedAt'] = l$completedAt?.toJson();
    final l$media = media;
    _resultData['media'] = l$media?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$mediaId = mediaId;
    final l$status = status;
    final l$score = score;
    final l$progress = progress;
    final l$progressVolumes = progressVolumes;
    final l$repeat = repeat;
    final l$priority = priority;
    final l$private = private;
    final l$hiddenFromStatusLists = hiddenFromStatusLists;
    final l$customLists = customLists;
    final l$advancedScores = advancedScores;
    final l$notes = notes;
    final l$updatedAt = updatedAt;
    final l$createdAt = createdAt;
    final l$startedAt = startedAt;
    final l$completedAt = completedAt;
    final l$media = media;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$mediaId,
      l$status,
      l$score,
      l$progress,
      l$progressVolumes,
      l$repeat,
      l$priority,
      l$private,
      l$hiddenFromStatusLists,
      l$customLists,
      l$advancedScores,
      l$notes,
      l$updatedAt,
      l$createdAt,
      l$startedAt,
      l$completedAt,
      l$media,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListEntry || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$mediaId = mediaId;
    final lOther$mediaId = other.mediaId;
    if (l$mediaId != lOther$mediaId) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$score = score;
    final lOther$score = other.score;
    if (l$score != lOther$score) {
      return false;
    }
    final l$progress = progress;
    final lOther$progress = other.progress;
    if (l$progress != lOther$progress) {
      return false;
    }
    final l$progressVolumes = progressVolumes;
    final lOther$progressVolumes = other.progressVolumes;
    if (l$progressVolumes != lOther$progressVolumes) {
      return false;
    }
    final l$repeat = repeat;
    final lOther$repeat = other.repeat;
    if (l$repeat != lOther$repeat) {
      return false;
    }
    final l$priority = priority;
    final lOther$priority = other.priority;
    if (l$priority != lOther$priority) {
      return false;
    }
    final l$private = private;
    final lOther$private = other.private;
    if (l$private != lOther$private) {
      return false;
    }
    final l$hiddenFromStatusLists = hiddenFromStatusLists;
    final lOther$hiddenFromStatusLists = other.hiddenFromStatusLists;
    if (l$hiddenFromStatusLists != lOther$hiddenFromStatusLists) {
      return false;
    }
    final l$customLists = customLists;
    final lOther$customLists = other.customLists;
    if (l$customLists != lOther$customLists) {
      return false;
    }
    final l$advancedScores = advancedScores;
    final lOther$advancedScores = other.advancedScores;
    if (l$advancedScores != lOther$advancedScores) {
      return false;
    }
    final l$notes = notes;
    final lOther$notes = other.notes;
    if (l$notes != lOther$notes) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$startedAt = startedAt;
    final lOther$startedAt = other.startedAt;
    if (l$startedAt != lOther$startedAt) {
      return false;
    }
    final l$completedAt = completedAt;
    final lOther$completedAt = other.completedAt;
    if (l$completedAt != lOther$completedAt) {
      return false;
    }
    final l$media = media;
    final lOther$media = other.media;
    if (l$media != lOther$media) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListEntry on Fragment$MediaListEntry {
  CopyWith$Fragment$MediaListEntry<Fragment$MediaListEntry> get copyWith =>
      CopyWith$Fragment$MediaListEntry(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaListEntry<TRes> {
  factory CopyWith$Fragment$MediaListEntry(
    Fragment$MediaListEntry instance,
    TRes Function(Fragment$MediaListEntry) then,
  ) = _CopyWithImpl$Fragment$MediaListEntry;

  factory CopyWith$Fragment$MediaListEntry.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListEntry;

  TRes call({
    int? id,
    int? mediaId,
    Enum$MediaListStatus? status,
    double? score,
    int? progress,
    int? progressVolumes,
    int? repeat,
    int? priority,
    bool? private,
    bool? hiddenFromStatusLists,
    String? customLists,
    String? advancedScores,
    String? notes,
    int? updatedAt,
    int? createdAt,
    Fragment$MediaListEntry$startedAt? startedAt,
    Fragment$MediaListEntry$completedAt? completedAt,
    Fragment$ListEntryMedia? media,
    String? $__typename,
  });
  CopyWith$Fragment$MediaListEntry$startedAt<TRes> get startedAt;
  CopyWith$Fragment$MediaListEntry$completedAt<TRes> get completedAt;
  CopyWith$Fragment$ListEntryMedia<TRes> get media;
}

class _CopyWithImpl$Fragment$MediaListEntry<TRes>
    implements CopyWith$Fragment$MediaListEntry<TRes> {
  _CopyWithImpl$Fragment$MediaListEntry(
    this._instance,
    this._then,
  );

  final Fragment$MediaListEntry _instance;

  final TRes Function(Fragment$MediaListEntry) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? mediaId = _undefined,
    Object? status = _undefined,
    Object? score = _undefined,
    Object? progress = _undefined,
    Object? progressVolumes = _undefined,
    Object? repeat = _undefined,
    Object? priority = _undefined,
    Object? private = _undefined,
    Object? hiddenFromStatusLists = _undefined,
    Object? customLists = _undefined,
    Object? advancedScores = _undefined,
    Object? notes = _undefined,
    Object? updatedAt = _undefined,
    Object? createdAt = _undefined,
    Object? startedAt = _undefined,
    Object? completedAt = _undefined,
    Object? media = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListEntry(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        mediaId: mediaId == _undefined || mediaId == null
            ? _instance.mediaId
            : (mediaId as int),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaListStatus?),
        score: score == _undefined ? _instance.score : (score as double?),
        progress:
            progress == _undefined ? _instance.progress : (progress as int?),
        progressVolumes: progressVolumes == _undefined
            ? _instance.progressVolumes
            : (progressVolumes as int?),
        repeat: repeat == _undefined ? _instance.repeat : (repeat as int?),
        priority:
            priority == _undefined ? _instance.priority : (priority as int?),
        private: private == _undefined ? _instance.private : (private as bool?),
        hiddenFromStatusLists: hiddenFromStatusLists == _undefined
            ? _instance.hiddenFromStatusLists
            : (hiddenFromStatusLists as bool?),
        customLists: customLists == _undefined
            ? _instance.customLists
            : (customLists as String?),
        advancedScores: advancedScores == _undefined
            ? _instance.advancedScores
            : (advancedScores as String?),
        notes: notes == _undefined ? _instance.notes : (notes as String?),
        updatedAt:
            updatedAt == _undefined ? _instance.updatedAt : (updatedAt as int?),
        createdAt:
            createdAt == _undefined ? _instance.createdAt : (createdAt as int?),
        startedAt: startedAt == _undefined
            ? _instance.startedAt
            : (startedAt as Fragment$MediaListEntry$startedAt?),
        completedAt: completedAt == _undefined
            ? _instance.completedAt
            : (completedAt as Fragment$MediaListEntry$completedAt?),
        media: media == _undefined
            ? _instance.media
            : (media as Fragment$ListEntryMedia?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaListEntry$startedAt<TRes> get startedAt {
    final local$startedAt = _instance.startedAt;
    return local$startedAt == null
        ? CopyWith$Fragment$MediaListEntry$startedAt.stub(_then(_instance))
        : CopyWith$Fragment$MediaListEntry$startedAt(
            local$startedAt, (e) => call(startedAt: e));
  }

  CopyWith$Fragment$MediaListEntry$completedAt<TRes> get completedAt {
    final local$completedAt = _instance.completedAt;
    return local$completedAt == null
        ? CopyWith$Fragment$MediaListEntry$completedAt.stub(_then(_instance))
        : CopyWith$Fragment$MediaListEntry$completedAt(
            local$completedAt, (e) => call(completedAt: e));
  }

  CopyWith$Fragment$ListEntryMedia<TRes> get media {
    final local$media = _instance.media;
    return local$media == null
        ? CopyWith$Fragment$ListEntryMedia.stub(_then(_instance))
        : CopyWith$Fragment$ListEntryMedia(local$media, (e) => call(media: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaListEntry<TRes>
    implements CopyWith$Fragment$MediaListEntry<TRes> {
  _CopyWithStubImpl$Fragment$MediaListEntry(this._res);

  TRes _res;

  call({
    int? id,
    int? mediaId,
    Enum$MediaListStatus? status,
    double? score,
    int? progress,
    int? progressVolumes,
    int? repeat,
    int? priority,
    bool? private,
    bool? hiddenFromStatusLists,
    String? customLists,
    String? advancedScores,
    String? notes,
    int? updatedAt,
    int? createdAt,
    Fragment$MediaListEntry$startedAt? startedAt,
    Fragment$MediaListEntry$completedAt? completedAt,
    Fragment$ListEntryMedia? media,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaListEntry$startedAt<TRes> get startedAt =>
      CopyWith$Fragment$MediaListEntry$startedAt.stub(_res);

  CopyWith$Fragment$MediaListEntry$completedAt<TRes> get completedAt =>
      CopyWith$Fragment$MediaListEntry$completedAt.stub(_res);

  CopyWith$Fragment$ListEntryMedia<TRes> get media =>
      CopyWith$Fragment$ListEntryMedia.stub(_res);
}

const fragmentDefinitionMediaListEntry = FragmentDefinitionNode(
  name: NameNode(value: 'MediaListEntry'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaList'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'mediaId'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'status'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'score'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'progress'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'progressVolumes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'repeat'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'priority'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'private'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'hiddenFromStatusLists'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'customLists'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'advancedScores'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'notes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'updatedAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'createdAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'startedAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'month'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'day'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'completedAt'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'month'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'day'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'media'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FragmentSpreadNode(
          name: NameNode(value: 'ListEntryMedia'),
          directives: [],
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaListEntry = DocumentNode(definitions: [
  fragmentDefinitionMediaListEntry,
  fragmentDefinitionListEntryMedia,
]);

extension ClientExtension$Fragment$MediaListEntry on graphql.GraphQLClient {
  void writeFragment$MediaListEntry({
    required Fragment$MediaListEntry data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaListEntry',
            document: documentNodeFragmentMediaListEntry,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaListEntry? readFragment$MediaListEntry({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaListEntry',
          document: documentNodeFragmentMediaListEntry,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MediaListEntry.fromJson(result);
  }
}

class Fragment$MediaListEntry$startedAt {
  Fragment$MediaListEntry$startedAt({
    this.year,
    this.month,
    this.day,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$MediaListEntry$startedAt.fromJson(
      Map<String, dynamic> json) {
    final l$year = json['year'];
    final l$month = json['month'];
    final l$day = json['day'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListEntry$startedAt(
      year: (l$year as int?),
      month: (l$month as int?),
      day: (l$day as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? year;

  final int? month;

  final int? day;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$year = year;
    _resultData['year'] = l$year;
    final l$month = month;
    _resultData['month'] = l$month;
    final l$day = day;
    _resultData['day'] = l$day;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$year = year;
    final l$month = month;
    final l$day = day;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$year,
      l$month,
      l$day,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListEntry$startedAt ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$month = month;
    final lOther$month = other.month;
    if (l$month != lOther$month) {
      return false;
    }
    final l$day = day;
    final lOther$day = other.day;
    if (l$day != lOther$day) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListEntry$startedAt
    on Fragment$MediaListEntry$startedAt {
  CopyWith$Fragment$MediaListEntry$startedAt<Fragment$MediaListEntry$startedAt>
      get copyWith => CopyWith$Fragment$MediaListEntry$startedAt(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaListEntry$startedAt<TRes> {
  factory CopyWith$Fragment$MediaListEntry$startedAt(
    Fragment$MediaListEntry$startedAt instance,
    TRes Function(Fragment$MediaListEntry$startedAt) then,
  ) = _CopyWithImpl$Fragment$MediaListEntry$startedAt;

  factory CopyWith$Fragment$MediaListEntry$startedAt.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListEntry$startedAt;

  TRes call({
    int? year,
    int? month,
    int? day,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaListEntry$startedAt<TRes>
    implements CopyWith$Fragment$MediaListEntry$startedAt<TRes> {
  _CopyWithImpl$Fragment$MediaListEntry$startedAt(
    this._instance,
    this._then,
  );

  final Fragment$MediaListEntry$startedAt _instance;

  final TRes Function(Fragment$MediaListEntry$startedAt) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? year = _undefined,
    Object? month = _undefined,
    Object? day = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListEntry$startedAt(
        year: year == _undefined ? _instance.year : (year as int?),
        month: month == _undefined ? _instance.month : (month as int?),
        day: day == _undefined ? _instance.day : (day as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaListEntry$startedAt<TRes>
    implements CopyWith$Fragment$MediaListEntry$startedAt<TRes> {
  _CopyWithStubImpl$Fragment$MediaListEntry$startedAt(this._res);

  TRes _res;

  call({
    int? year,
    int? month,
    int? day,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaListEntry$completedAt {
  Fragment$MediaListEntry$completedAt({
    this.year,
    this.month,
    this.day,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$MediaListEntry$completedAt.fromJson(
      Map<String, dynamic> json) {
    final l$year = json['year'];
    final l$month = json['month'];
    final l$day = json['day'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListEntry$completedAt(
      year: (l$year as int?),
      month: (l$month as int?),
      day: (l$day as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? year;

  final int? month;

  final int? day;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$year = year;
    _resultData['year'] = l$year;
    final l$month = month;
    _resultData['month'] = l$month;
    final l$day = day;
    _resultData['day'] = l$day;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$year = year;
    final l$month = month;
    final l$day = day;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$year,
      l$month,
      l$day,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListEntry$completedAt ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$month = month;
    final lOther$month = other.month;
    if (l$month != lOther$month) {
      return false;
    }
    final l$day = day;
    final lOther$day = other.day;
    if (l$day != lOther$day) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListEntry$completedAt
    on Fragment$MediaListEntry$completedAt {
  CopyWith$Fragment$MediaListEntry$completedAt<
          Fragment$MediaListEntry$completedAt>
      get copyWith => CopyWith$Fragment$MediaListEntry$completedAt(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaListEntry$completedAt<TRes> {
  factory CopyWith$Fragment$MediaListEntry$completedAt(
    Fragment$MediaListEntry$completedAt instance,
    TRes Function(Fragment$MediaListEntry$completedAt) then,
  ) = _CopyWithImpl$Fragment$MediaListEntry$completedAt;

  factory CopyWith$Fragment$MediaListEntry$completedAt.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListEntry$completedAt;

  TRes call({
    int? year,
    int? month,
    int? day,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaListEntry$completedAt<TRes>
    implements CopyWith$Fragment$MediaListEntry$completedAt<TRes> {
  _CopyWithImpl$Fragment$MediaListEntry$completedAt(
    this._instance,
    this._then,
  );

  final Fragment$MediaListEntry$completedAt _instance;

  final TRes Function(Fragment$MediaListEntry$completedAt) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? year = _undefined,
    Object? month = _undefined,
    Object? day = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListEntry$completedAt(
        year: year == _undefined ? _instance.year : (year as int?),
        month: month == _undefined ? _instance.month : (month as int?),
        day: day == _undefined ? _instance.day : (day as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaListEntry$completedAt<TRes>
    implements CopyWith$Fragment$MediaListEntry$completedAt<TRes> {
  _CopyWithStubImpl$Fragment$MediaListEntry$completedAt(this._res);

  TRes _res;

  call({
    int? year,
    int? month,
    int? day,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListEntryMedia {
  Fragment$ListEntryMedia({
    required this.id,
    this.title,
    this.type,
    this.episodes,
    this.chapters,
    this.volumes,
    this.status,
    this.coverImage,
    this.format,
    this.startDate,
    this.endDate,
    this.genres,
    this.countryOfOrigin,
    this.averageScore,
    this.popularity,
    this.$__typename = 'Media',
  });

  factory Fragment$ListEntryMedia.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$title = json['title'];
    final l$type = json['type'];
    final l$episodes = json['episodes'];
    final l$chapters = json['chapters'];
    final l$volumes = json['volumes'];
    final l$status = json['status'];
    final l$coverImage = json['coverImage'];
    final l$format = json['format'];
    final l$startDate = json['startDate'];
    final l$endDate = json['endDate'];
    final l$genres = json['genres'];
    final l$countryOfOrigin = json['countryOfOrigin'];
    final l$averageScore = json['averageScore'];
    final l$popularity = json['popularity'];
    final l$$__typename = json['__typename'];
    return Fragment$ListEntryMedia(
      id: (l$id as int),
      title: l$title == null
          ? null
          : Fragment$ListEntryMedia$title.fromJson(
              (l$title as Map<String, dynamic>)),
      type: l$type == null ? null : fromJson$Enum$MediaType((l$type as String)),
      episodes: (l$episodes as int?),
      chapters: (l$chapters as int?),
      volumes: (l$volumes as int?),
      status: l$status == null
          ? null
          : fromJson$Enum$MediaStatus((l$status as String)),
      coverImage: l$coverImage == null
          ? null
          : Fragment$ListEntryMedia$coverImage.fromJson(
              (l$coverImage as Map<String, dynamic>)),
      format: l$format == null
          ? null
          : fromJson$Enum$MediaFormat((l$format as String)),
      startDate: l$startDate == null
          ? null
          : Fragment$ListEntryMedia$startDate.fromJson(
              (l$startDate as Map<String, dynamic>)),
      endDate: l$endDate == null
          ? null
          : Fragment$ListEntryMedia$endDate.fromJson(
              (l$endDate as Map<String, dynamic>)),
      genres: (l$genres as List<dynamic>?)?.map((e) => (e as String?)).toList(),
      countryOfOrigin: (l$countryOfOrigin as String?),
      averageScore: (l$averageScore as int?),
      popularity: (l$popularity as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int id;

  final Fragment$ListEntryMedia$title? title;

  final Enum$MediaType? type;

  final int? episodes;

  final int? chapters;

  final int? volumes;

  final Enum$MediaStatus? status;

  final Fragment$ListEntryMedia$coverImage? coverImage;

  final Enum$MediaFormat? format;

  final Fragment$ListEntryMedia$startDate? startDate;

  final Fragment$ListEntryMedia$endDate? endDate;

  final List<String?>? genres;

  final String? countryOfOrigin;

  final int? averageScore;

  final int? popularity;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$title = title;
    _resultData['title'] = l$title?.toJson();
    final l$type = type;
    _resultData['type'] = l$type == null ? null : toJson$Enum$MediaType(l$type);
    final l$episodes = episodes;
    _resultData['episodes'] = l$episodes;
    final l$chapters = chapters;
    _resultData['chapters'] = l$chapters;
    final l$volumes = volumes;
    _resultData['volumes'] = l$volumes;
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$MediaStatus(l$status);
    final l$coverImage = coverImage;
    _resultData['coverImage'] = l$coverImage?.toJson();
    final l$format = format;
    _resultData['format'] =
        l$format == null ? null : toJson$Enum$MediaFormat(l$format);
    final l$startDate = startDate;
    _resultData['startDate'] = l$startDate?.toJson();
    final l$endDate = endDate;
    _resultData['endDate'] = l$endDate?.toJson();
    final l$genres = genres;
    _resultData['genres'] = l$genres?.map((e) => e).toList();
    final l$countryOfOrigin = countryOfOrigin;
    _resultData['countryOfOrigin'] = l$countryOfOrigin;
    final l$averageScore = averageScore;
    _resultData['averageScore'] = l$averageScore;
    final l$popularity = popularity;
    _resultData['popularity'] = l$popularity;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$title = title;
    final l$type = type;
    final l$episodes = episodes;
    final l$chapters = chapters;
    final l$volumes = volumes;
    final l$status = status;
    final l$coverImage = coverImage;
    final l$format = format;
    final l$startDate = startDate;
    final l$endDate = endDate;
    final l$genres = genres;
    final l$countryOfOrigin = countryOfOrigin;
    final l$averageScore = averageScore;
    final l$popularity = popularity;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$title,
      l$type,
      l$episodes,
      l$chapters,
      l$volumes,
      l$status,
      l$coverImage,
      l$format,
      l$startDate,
      l$endDate,
      l$genres == null ? null : Object.hashAll(l$genres.map((v) => v)),
      l$countryOfOrigin,
      l$averageScore,
      l$popularity,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListEntryMedia || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$title = title;
    final lOther$title = other.title;
    if (l$title != lOther$title) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (l$type != lOther$type) {
      return false;
    }
    final l$episodes = episodes;
    final lOther$episodes = other.episodes;
    if (l$episodes != lOther$episodes) {
      return false;
    }
    final l$chapters = chapters;
    final lOther$chapters = other.chapters;
    if (l$chapters != lOther$chapters) {
      return false;
    }
    final l$volumes = volumes;
    final lOther$volumes = other.volumes;
    if (l$volumes != lOther$volumes) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$coverImage = coverImage;
    final lOther$coverImage = other.coverImage;
    if (l$coverImage != lOther$coverImage) {
      return false;
    }
    final l$format = format;
    final lOther$format = other.format;
    if (l$format != lOther$format) {
      return false;
    }
    final l$startDate = startDate;
    final lOther$startDate = other.startDate;
    if (l$startDate != lOther$startDate) {
      return false;
    }
    final l$endDate = endDate;
    final lOther$endDate = other.endDate;
    if (l$endDate != lOther$endDate) {
      return false;
    }
    final l$genres = genres;
    final lOther$genres = other.genres;
    if (l$genres != null && lOther$genres != null) {
      if (l$genres.length != lOther$genres.length) {
        return false;
      }
      for (int i = 0; i < l$genres.length; i++) {
        final l$genres$entry = l$genres[i];
        final lOther$genres$entry = lOther$genres[i];
        if (l$genres$entry != lOther$genres$entry) {
          return false;
        }
      }
    } else if (l$genres != lOther$genres) {
      return false;
    }
    final l$countryOfOrigin = countryOfOrigin;
    final lOther$countryOfOrigin = other.countryOfOrigin;
    if (l$countryOfOrigin != lOther$countryOfOrigin) {
      return false;
    }
    final l$averageScore = averageScore;
    final lOther$averageScore = other.averageScore;
    if (l$averageScore != lOther$averageScore) {
      return false;
    }
    final l$popularity = popularity;
    final lOther$popularity = other.popularity;
    if (l$popularity != lOther$popularity) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListEntryMedia on Fragment$ListEntryMedia {
  CopyWith$Fragment$ListEntryMedia<Fragment$ListEntryMedia> get copyWith =>
      CopyWith$Fragment$ListEntryMedia(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$ListEntryMedia<TRes> {
  factory CopyWith$Fragment$ListEntryMedia(
    Fragment$ListEntryMedia instance,
    TRes Function(Fragment$ListEntryMedia) then,
  ) = _CopyWithImpl$Fragment$ListEntryMedia;

  factory CopyWith$Fragment$ListEntryMedia.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListEntryMedia;

  TRes call({
    int? id,
    Fragment$ListEntryMedia$title? title,
    Enum$MediaType? type,
    int? episodes,
    int? chapters,
    int? volumes,
    Enum$MediaStatus? status,
    Fragment$ListEntryMedia$coverImage? coverImage,
    Enum$MediaFormat? format,
    Fragment$ListEntryMedia$startDate? startDate,
    Fragment$ListEntryMedia$endDate? endDate,
    List<String?>? genres,
    String? countryOfOrigin,
    int? averageScore,
    int? popularity,
    String? $__typename,
  });
  CopyWith$Fragment$ListEntryMedia$title<TRes> get title;
  CopyWith$Fragment$ListEntryMedia$coverImage<TRes> get coverImage;
  CopyWith$Fragment$ListEntryMedia$startDate<TRes> get startDate;
  CopyWith$Fragment$ListEntryMedia$endDate<TRes> get endDate;
}

class _CopyWithImpl$Fragment$ListEntryMedia<TRes>
    implements CopyWith$Fragment$ListEntryMedia<TRes> {
  _CopyWithImpl$Fragment$ListEntryMedia(
    this._instance,
    this._then,
  );

  final Fragment$ListEntryMedia _instance;

  final TRes Function(Fragment$ListEntryMedia) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? title = _undefined,
    Object? type = _undefined,
    Object? episodes = _undefined,
    Object? chapters = _undefined,
    Object? volumes = _undefined,
    Object? status = _undefined,
    Object? coverImage = _undefined,
    Object? format = _undefined,
    Object? startDate = _undefined,
    Object? endDate = _undefined,
    Object? genres = _undefined,
    Object? countryOfOrigin = _undefined,
    Object? averageScore = _undefined,
    Object? popularity = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListEntryMedia(
        id: id == _undefined || id == null ? _instance.id : (id as int),
        title: title == _undefined
            ? _instance.title
            : (title as Fragment$ListEntryMedia$title?),
        type: type == _undefined ? _instance.type : (type as Enum$MediaType?),
        episodes:
            episodes == _undefined ? _instance.episodes : (episodes as int?),
        chapters:
            chapters == _undefined ? _instance.chapters : (chapters as int?),
        volumes: volumes == _undefined ? _instance.volumes : (volumes as int?),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$MediaStatus?),
        coverImage: coverImage == _undefined
            ? _instance.coverImage
            : (coverImage as Fragment$ListEntryMedia$coverImage?),
        format: format == _undefined
            ? _instance.format
            : (format as Enum$MediaFormat?),
        startDate: startDate == _undefined
            ? _instance.startDate
            : (startDate as Fragment$ListEntryMedia$startDate?),
        endDate: endDate == _undefined
            ? _instance.endDate
            : (endDate as Fragment$ListEntryMedia$endDate?),
        genres: genres == _undefined
            ? _instance.genres
            : (genres as List<String?>?),
        countryOfOrigin: countryOfOrigin == _undefined
            ? _instance.countryOfOrigin
            : (countryOfOrigin as String?),
        averageScore: averageScore == _undefined
            ? _instance.averageScore
            : (averageScore as int?),
        popularity: popularity == _undefined
            ? _instance.popularity
            : (popularity as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$ListEntryMedia$title<TRes> get title {
    final local$title = _instance.title;
    return local$title == null
        ? CopyWith$Fragment$ListEntryMedia$title.stub(_then(_instance))
        : CopyWith$Fragment$ListEntryMedia$title(
            local$title, (e) => call(title: e));
  }

  CopyWith$Fragment$ListEntryMedia$coverImage<TRes> get coverImage {
    final local$coverImage = _instance.coverImage;
    return local$coverImage == null
        ? CopyWith$Fragment$ListEntryMedia$coverImage.stub(_then(_instance))
        : CopyWith$Fragment$ListEntryMedia$coverImage(
            local$coverImage, (e) => call(coverImage: e));
  }

  CopyWith$Fragment$ListEntryMedia$startDate<TRes> get startDate {
    final local$startDate = _instance.startDate;
    return local$startDate == null
        ? CopyWith$Fragment$ListEntryMedia$startDate.stub(_then(_instance))
        : CopyWith$Fragment$ListEntryMedia$startDate(
            local$startDate, (e) => call(startDate: e));
  }

  CopyWith$Fragment$ListEntryMedia$endDate<TRes> get endDate {
    final local$endDate = _instance.endDate;
    return local$endDate == null
        ? CopyWith$Fragment$ListEntryMedia$endDate.stub(_then(_instance))
        : CopyWith$Fragment$ListEntryMedia$endDate(
            local$endDate, (e) => call(endDate: e));
  }
}

class _CopyWithStubImpl$Fragment$ListEntryMedia<TRes>
    implements CopyWith$Fragment$ListEntryMedia<TRes> {
  _CopyWithStubImpl$Fragment$ListEntryMedia(this._res);

  TRes _res;

  call({
    int? id,
    Fragment$ListEntryMedia$title? title,
    Enum$MediaType? type,
    int? episodes,
    int? chapters,
    int? volumes,
    Enum$MediaStatus? status,
    Fragment$ListEntryMedia$coverImage? coverImage,
    Enum$MediaFormat? format,
    Fragment$ListEntryMedia$startDate? startDate,
    Fragment$ListEntryMedia$endDate? endDate,
    List<String?>? genres,
    String? countryOfOrigin,
    int? averageScore,
    int? popularity,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$ListEntryMedia$title<TRes> get title =>
      CopyWith$Fragment$ListEntryMedia$title.stub(_res);

  CopyWith$Fragment$ListEntryMedia$coverImage<TRes> get coverImage =>
      CopyWith$Fragment$ListEntryMedia$coverImage.stub(_res);

  CopyWith$Fragment$ListEntryMedia$startDate<TRes> get startDate =>
      CopyWith$Fragment$ListEntryMedia$startDate.stub(_res);

  CopyWith$Fragment$ListEntryMedia$endDate<TRes> get endDate =>
      CopyWith$Fragment$ListEntryMedia$endDate.stub(_res);
}

const fragmentDefinitionListEntryMedia = FragmentDefinitionNode(
  name: NameNode(value: 'ListEntryMedia'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'Media'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'id'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'title'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'userPreferred'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'english'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'native'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'romaji'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'type'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'episodes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'chapters'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'volumes'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'status'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'coverImage'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'large'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'medium'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'extraLarge'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'format'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'startDate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'day'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'month'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'endDate'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'day'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'month'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'year'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'genres'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'countryOfOrigin'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'averageScore'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'popularity'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentListEntryMedia = DocumentNode(definitions: [
  fragmentDefinitionListEntryMedia,
]);

extension ClientExtension$Fragment$ListEntryMedia on graphql.GraphQLClient {
  void writeFragment$ListEntryMedia({
    required Fragment$ListEntryMedia data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'ListEntryMedia',
            document: documentNodeFragmentListEntryMedia,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$ListEntryMedia? readFragment$ListEntryMedia({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'ListEntryMedia',
          document: documentNodeFragmentListEntryMedia,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$ListEntryMedia.fromJson(result);
  }
}

class Fragment$ListEntryMedia$title {
  Fragment$ListEntryMedia$title({
    this.userPreferred,
    this.english,
    this.native,
    this.romaji,
    this.$__typename = 'MediaTitle',
  });

  factory Fragment$ListEntryMedia$title.fromJson(Map<String, dynamic> json) {
    final l$userPreferred = json['userPreferred'];
    final l$english = json['english'];
    final l$native = json['native'];
    final l$romaji = json['romaji'];
    final l$$__typename = json['__typename'];
    return Fragment$ListEntryMedia$title(
      userPreferred: (l$userPreferred as String?),
      english: (l$english as String?),
      native: (l$native as String?),
      romaji: (l$romaji as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? userPreferred;

  final String? english;

  final String? native;

  final String? romaji;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPreferred = userPreferred;
    _resultData['userPreferred'] = l$userPreferred;
    final l$english = english;
    _resultData['english'] = l$english;
    final l$native = native;
    _resultData['native'] = l$native;
    final l$romaji = romaji;
    _resultData['romaji'] = l$romaji;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPreferred = userPreferred;
    final l$english = english;
    final l$native = native;
    final l$romaji = romaji;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPreferred,
      l$english,
      l$native,
      l$romaji,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListEntryMedia$title ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPreferred = userPreferred;
    final lOther$userPreferred = other.userPreferred;
    if (l$userPreferred != lOther$userPreferred) {
      return false;
    }
    final l$english = english;
    final lOther$english = other.english;
    if (l$english != lOther$english) {
      return false;
    }
    final l$native = native;
    final lOther$native = other.native;
    if (l$native != lOther$native) {
      return false;
    }
    final l$romaji = romaji;
    final lOther$romaji = other.romaji;
    if (l$romaji != lOther$romaji) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListEntryMedia$title
    on Fragment$ListEntryMedia$title {
  CopyWith$Fragment$ListEntryMedia$title<Fragment$ListEntryMedia$title>
      get copyWith => CopyWith$Fragment$ListEntryMedia$title(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListEntryMedia$title<TRes> {
  factory CopyWith$Fragment$ListEntryMedia$title(
    Fragment$ListEntryMedia$title instance,
    TRes Function(Fragment$ListEntryMedia$title) then,
  ) = _CopyWithImpl$Fragment$ListEntryMedia$title;

  factory CopyWith$Fragment$ListEntryMedia$title.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListEntryMedia$title;

  TRes call({
    String? userPreferred,
    String? english,
    String? native,
    String? romaji,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListEntryMedia$title<TRes>
    implements CopyWith$Fragment$ListEntryMedia$title<TRes> {
  _CopyWithImpl$Fragment$ListEntryMedia$title(
    this._instance,
    this._then,
  );

  final Fragment$ListEntryMedia$title _instance;

  final TRes Function(Fragment$ListEntryMedia$title) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPreferred = _undefined,
    Object? english = _undefined,
    Object? native = _undefined,
    Object? romaji = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListEntryMedia$title(
        userPreferred: userPreferred == _undefined
            ? _instance.userPreferred
            : (userPreferred as String?),
        english:
            english == _undefined ? _instance.english : (english as String?),
        native: native == _undefined ? _instance.native : (native as String?),
        romaji: romaji == _undefined ? _instance.romaji : (romaji as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListEntryMedia$title<TRes>
    implements CopyWith$Fragment$ListEntryMedia$title<TRes> {
  _CopyWithStubImpl$Fragment$ListEntryMedia$title(this._res);

  TRes _res;

  call({
    String? userPreferred,
    String? english,
    String? native,
    String? romaji,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListEntryMedia$coverImage {
  Fragment$ListEntryMedia$coverImage({
    this.large,
    this.medium,
    this.extraLarge,
    this.$__typename = 'MediaCoverImage',
  });

  factory Fragment$ListEntryMedia$coverImage.fromJson(
      Map<String, dynamic> json) {
    final l$large = json['large'];
    final l$medium = json['medium'];
    final l$extraLarge = json['extraLarge'];
    final l$$__typename = json['__typename'];
    return Fragment$ListEntryMedia$coverImage(
      large: (l$large as String?),
      medium: (l$medium as String?),
      extraLarge: (l$extraLarge as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? large;

  final String? medium;

  final String? extraLarge;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$large = large;
    _resultData['large'] = l$large;
    final l$medium = medium;
    _resultData['medium'] = l$medium;
    final l$extraLarge = extraLarge;
    _resultData['extraLarge'] = l$extraLarge;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$large = large;
    final l$medium = medium;
    final l$extraLarge = extraLarge;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$large,
      l$medium,
      l$extraLarge,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListEntryMedia$coverImage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$large = large;
    final lOther$large = other.large;
    if (l$large != lOther$large) {
      return false;
    }
    final l$medium = medium;
    final lOther$medium = other.medium;
    if (l$medium != lOther$medium) {
      return false;
    }
    final l$extraLarge = extraLarge;
    final lOther$extraLarge = other.extraLarge;
    if (l$extraLarge != lOther$extraLarge) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListEntryMedia$coverImage
    on Fragment$ListEntryMedia$coverImage {
  CopyWith$Fragment$ListEntryMedia$coverImage<
          Fragment$ListEntryMedia$coverImage>
      get copyWith => CopyWith$Fragment$ListEntryMedia$coverImage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListEntryMedia$coverImage<TRes> {
  factory CopyWith$Fragment$ListEntryMedia$coverImage(
    Fragment$ListEntryMedia$coverImage instance,
    TRes Function(Fragment$ListEntryMedia$coverImage) then,
  ) = _CopyWithImpl$Fragment$ListEntryMedia$coverImage;

  factory CopyWith$Fragment$ListEntryMedia$coverImage.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListEntryMedia$coverImage;

  TRes call({
    String? large,
    String? medium,
    String? extraLarge,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListEntryMedia$coverImage<TRes>
    implements CopyWith$Fragment$ListEntryMedia$coverImage<TRes> {
  _CopyWithImpl$Fragment$ListEntryMedia$coverImage(
    this._instance,
    this._then,
  );

  final Fragment$ListEntryMedia$coverImage _instance;

  final TRes Function(Fragment$ListEntryMedia$coverImage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? large = _undefined,
    Object? medium = _undefined,
    Object? extraLarge = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListEntryMedia$coverImage(
        large: large == _undefined ? _instance.large : (large as String?),
        medium: medium == _undefined ? _instance.medium : (medium as String?),
        extraLarge: extraLarge == _undefined
            ? _instance.extraLarge
            : (extraLarge as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListEntryMedia$coverImage<TRes>
    implements CopyWith$Fragment$ListEntryMedia$coverImage<TRes> {
  _CopyWithStubImpl$Fragment$ListEntryMedia$coverImage(this._res);

  TRes _res;

  call({
    String? large,
    String? medium,
    String? extraLarge,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListEntryMedia$startDate {
  Fragment$ListEntryMedia$startDate({
    this.day,
    this.month,
    this.year,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$ListEntryMedia$startDate.fromJson(
      Map<String, dynamic> json) {
    final l$day = json['day'];
    final l$month = json['month'];
    final l$year = json['year'];
    final l$$__typename = json['__typename'];
    return Fragment$ListEntryMedia$startDate(
      day: (l$day as int?),
      month: (l$month as int?),
      year: (l$year as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? day;

  final int? month;

  final int? year;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$day = day;
    _resultData['day'] = l$day;
    final l$month = month;
    _resultData['month'] = l$month;
    final l$year = year;
    _resultData['year'] = l$year;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$day = day;
    final l$month = month;
    final l$year = year;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$day,
      l$month,
      l$year,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListEntryMedia$startDate ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$day = day;
    final lOther$day = other.day;
    if (l$day != lOther$day) {
      return false;
    }
    final l$month = month;
    final lOther$month = other.month;
    if (l$month != lOther$month) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListEntryMedia$startDate
    on Fragment$ListEntryMedia$startDate {
  CopyWith$Fragment$ListEntryMedia$startDate<Fragment$ListEntryMedia$startDate>
      get copyWith => CopyWith$Fragment$ListEntryMedia$startDate(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListEntryMedia$startDate<TRes> {
  factory CopyWith$Fragment$ListEntryMedia$startDate(
    Fragment$ListEntryMedia$startDate instance,
    TRes Function(Fragment$ListEntryMedia$startDate) then,
  ) = _CopyWithImpl$Fragment$ListEntryMedia$startDate;

  factory CopyWith$Fragment$ListEntryMedia$startDate.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListEntryMedia$startDate;

  TRes call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListEntryMedia$startDate<TRes>
    implements CopyWith$Fragment$ListEntryMedia$startDate<TRes> {
  _CopyWithImpl$Fragment$ListEntryMedia$startDate(
    this._instance,
    this._then,
  );

  final Fragment$ListEntryMedia$startDate _instance;

  final TRes Function(Fragment$ListEntryMedia$startDate) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? day = _undefined,
    Object? month = _undefined,
    Object? year = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListEntryMedia$startDate(
        day: day == _undefined ? _instance.day : (day as int?),
        month: month == _undefined ? _instance.month : (month as int?),
        year: year == _undefined ? _instance.year : (year as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListEntryMedia$startDate<TRes>
    implements CopyWith$Fragment$ListEntryMedia$startDate<TRes> {
  _CopyWithStubImpl$Fragment$ListEntryMedia$startDate(this._res);

  TRes _res;

  call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$ListEntryMedia$endDate {
  Fragment$ListEntryMedia$endDate({
    this.day,
    this.month,
    this.year,
    this.$__typename = 'FuzzyDate',
  });

  factory Fragment$ListEntryMedia$endDate.fromJson(Map<String, dynamic> json) {
    final l$day = json['day'];
    final l$month = json['month'];
    final l$year = json['year'];
    final l$$__typename = json['__typename'];
    return Fragment$ListEntryMedia$endDate(
      day: (l$day as int?),
      month: (l$month as int?),
      year: (l$year as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? day;

  final int? month;

  final int? year;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$day = day;
    _resultData['day'] = l$day;
    final l$month = month;
    _resultData['month'] = l$month;
    final l$year = year;
    _resultData['year'] = l$year;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$day = day;
    final l$month = month;
    final l$year = year;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$day,
      l$month,
      l$year,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$ListEntryMedia$endDate ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$day = day;
    final lOther$day = other.day;
    if (l$day != lOther$day) {
      return false;
    }
    final l$month = month;
    final lOther$month = other.month;
    if (l$month != lOther$month) {
      return false;
    }
    final l$year = year;
    final lOther$year = other.year;
    if (l$year != lOther$year) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$ListEntryMedia$endDate
    on Fragment$ListEntryMedia$endDate {
  CopyWith$Fragment$ListEntryMedia$endDate<Fragment$ListEntryMedia$endDate>
      get copyWith => CopyWith$Fragment$ListEntryMedia$endDate(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$ListEntryMedia$endDate<TRes> {
  factory CopyWith$Fragment$ListEntryMedia$endDate(
    Fragment$ListEntryMedia$endDate instance,
    TRes Function(Fragment$ListEntryMedia$endDate) then,
  ) = _CopyWithImpl$Fragment$ListEntryMedia$endDate;

  factory CopyWith$Fragment$ListEntryMedia$endDate.stub(TRes res) =
      _CopyWithStubImpl$Fragment$ListEntryMedia$endDate;

  TRes call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$ListEntryMedia$endDate<TRes>
    implements CopyWith$Fragment$ListEntryMedia$endDate<TRes> {
  _CopyWithImpl$Fragment$ListEntryMedia$endDate(
    this._instance,
    this._then,
  );

  final Fragment$ListEntryMedia$endDate _instance;

  final TRes Function(Fragment$ListEntryMedia$endDate) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? day = _undefined,
    Object? month = _undefined,
    Object? year = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$ListEntryMedia$endDate(
        day: day == _undefined ? _instance.day : (day as int?),
        month: month == _undefined ? _instance.month : (month as int?),
        year: year == _undefined ? _instance.year : (year as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$ListEntryMedia$endDate<TRes>
    implements CopyWith$Fragment$ListEntryMedia$endDate<TRes> {
  _CopyWithStubImpl$Fragment$ListEntryMedia$endDate(this._res);

  TRes _res;

  call({
    int? day,
    int? month,
    int? year,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaListOptions {
  Fragment$MediaListOptions({
    this.scoreFormat,
    this.rowOrder,
    this.animeList,
    this.mangaList,
    this.$__typename = 'MediaListOptions',
  });

  factory Fragment$MediaListOptions.fromJson(Map<String, dynamic> json) {
    final l$scoreFormat = json['scoreFormat'];
    final l$rowOrder = json['rowOrder'];
    final l$animeList = json['animeList'];
    final l$mangaList = json['mangaList'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListOptions(
      scoreFormat: l$scoreFormat == null
          ? null
          : fromJson$Enum$ScoreFormat((l$scoreFormat as String)),
      rowOrder: (l$rowOrder as String?),
      animeList: l$animeList == null
          ? null
          : Fragment$MediaListOptions$animeList.fromJson(
              (l$animeList as Map<String, dynamic>)),
      mangaList: l$mangaList == null
          ? null
          : Fragment$MediaListOptions$mangaList.fromJson(
              (l$mangaList as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Enum$ScoreFormat? scoreFormat;

  final String? rowOrder;

  final Fragment$MediaListOptions$animeList? animeList;

  final Fragment$MediaListOptions$mangaList? mangaList;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$scoreFormat = scoreFormat;
    _resultData['scoreFormat'] =
        l$scoreFormat == null ? null : toJson$Enum$ScoreFormat(l$scoreFormat);
    final l$rowOrder = rowOrder;
    _resultData['rowOrder'] = l$rowOrder;
    final l$animeList = animeList;
    _resultData['animeList'] = l$animeList?.toJson();
    final l$mangaList = mangaList;
    _resultData['mangaList'] = l$mangaList?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$scoreFormat = scoreFormat;
    final l$rowOrder = rowOrder;
    final l$animeList = animeList;
    final l$mangaList = mangaList;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$scoreFormat,
      l$rowOrder,
      l$animeList,
      l$mangaList,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListOptions ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$scoreFormat = scoreFormat;
    final lOther$scoreFormat = other.scoreFormat;
    if (l$scoreFormat != lOther$scoreFormat) {
      return false;
    }
    final l$rowOrder = rowOrder;
    final lOther$rowOrder = other.rowOrder;
    if (l$rowOrder != lOther$rowOrder) {
      return false;
    }
    final l$animeList = animeList;
    final lOther$animeList = other.animeList;
    if (l$animeList != lOther$animeList) {
      return false;
    }
    final l$mangaList = mangaList;
    final lOther$mangaList = other.mangaList;
    if (l$mangaList != lOther$mangaList) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListOptions
    on Fragment$MediaListOptions {
  CopyWith$Fragment$MediaListOptions<Fragment$MediaListOptions> get copyWith =>
      CopyWith$Fragment$MediaListOptions(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Fragment$MediaListOptions<TRes> {
  factory CopyWith$Fragment$MediaListOptions(
    Fragment$MediaListOptions instance,
    TRes Function(Fragment$MediaListOptions) then,
  ) = _CopyWithImpl$Fragment$MediaListOptions;

  factory CopyWith$Fragment$MediaListOptions.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListOptions;

  TRes call({
    Enum$ScoreFormat? scoreFormat,
    String? rowOrder,
    Fragment$MediaListOptions$animeList? animeList,
    Fragment$MediaListOptions$mangaList? mangaList,
    String? $__typename,
  });
  CopyWith$Fragment$MediaListOptions$animeList<TRes> get animeList;
  CopyWith$Fragment$MediaListOptions$mangaList<TRes> get mangaList;
}

class _CopyWithImpl$Fragment$MediaListOptions<TRes>
    implements CopyWith$Fragment$MediaListOptions<TRes> {
  _CopyWithImpl$Fragment$MediaListOptions(
    this._instance,
    this._then,
  );

  final Fragment$MediaListOptions _instance;

  final TRes Function(Fragment$MediaListOptions) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? scoreFormat = _undefined,
    Object? rowOrder = _undefined,
    Object? animeList = _undefined,
    Object? mangaList = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListOptions(
        scoreFormat: scoreFormat == _undefined
            ? _instance.scoreFormat
            : (scoreFormat as Enum$ScoreFormat?),
        rowOrder:
            rowOrder == _undefined ? _instance.rowOrder : (rowOrder as String?),
        animeList: animeList == _undefined
            ? _instance.animeList
            : (animeList as Fragment$MediaListOptions$animeList?),
        mangaList: mangaList == _undefined
            ? _instance.mangaList
            : (mangaList as Fragment$MediaListOptions$mangaList?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Fragment$MediaListOptions$animeList<TRes> get animeList {
    final local$animeList = _instance.animeList;
    return local$animeList == null
        ? CopyWith$Fragment$MediaListOptions$animeList.stub(_then(_instance))
        : CopyWith$Fragment$MediaListOptions$animeList(
            local$animeList, (e) => call(animeList: e));
  }

  CopyWith$Fragment$MediaListOptions$mangaList<TRes> get mangaList {
    final local$mangaList = _instance.mangaList;
    return local$mangaList == null
        ? CopyWith$Fragment$MediaListOptions$mangaList.stub(_then(_instance))
        : CopyWith$Fragment$MediaListOptions$mangaList(
            local$mangaList, (e) => call(mangaList: e));
  }
}

class _CopyWithStubImpl$Fragment$MediaListOptions<TRes>
    implements CopyWith$Fragment$MediaListOptions<TRes> {
  _CopyWithStubImpl$Fragment$MediaListOptions(this._res);

  TRes _res;

  call({
    Enum$ScoreFormat? scoreFormat,
    String? rowOrder,
    Fragment$MediaListOptions$animeList? animeList,
    Fragment$MediaListOptions$mangaList? mangaList,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Fragment$MediaListOptions$animeList<TRes> get animeList =>
      CopyWith$Fragment$MediaListOptions$animeList.stub(_res);

  CopyWith$Fragment$MediaListOptions$mangaList<TRes> get mangaList =>
      CopyWith$Fragment$MediaListOptions$mangaList.stub(_res);
}

const fragmentDefinitionMediaListOptions = FragmentDefinitionNode(
  name: NameNode(value: 'MediaListOptions'),
  typeCondition: TypeConditionNode(
      on: NamedTypeNode(
    name: NameNode(value: 'MediaListOptions'),
    isNonNull: false,
  )),
  directives: [],
  selectionSet: SelectionSetNode(selections: [
    FieldNode(
      name: NameNode(value: 'scoreFormat'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'rowOrder'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
    FieldNode(
      name: NameNode(value: 'animeList'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'sectionOrder'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'customLists'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'splitCompletedSectionByFormat'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'advancedScoringEnabled'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'advancedScoring'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: 'mangaList'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: SelectionSetNode(selections: [
        FieldNode(
          name: NameNode(value: 'sectionOrder'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'customLists'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'splitCompletedSectionByFormat'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'advancedScoringEnabled'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: 'advancedScoring'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
        FieldNode(
          name: NameNode(value: '__typename'),
          alias: null,
          arguments: [],
          directives: [],
          selectionSet: null,
        ),
      ]),
    ),
    FieldNode(
      name: NameNode(value: '__typename'),
      alias: null,
      arguments: [],
      directives: [],
      selectionSet: null,
    ),
  ]),
);
const documentNodeFragmentMediaListOptions = DocumentNode(definitions: [
  fragmentDefinitionMediaListOptions,
]);

extension ClientExtension$Fragment$MediaListOptions on graphql.GraphQLClient {
  void writeFragment$MediaListOptions({
    required Fragment$MediaListOptions data,
    required Map<String, dynamic> idFields,
    bool broadcast = true,
  }) =>
      this.writeFragment(
        graphql.FragmentRequest(
          idFields: idFields,
          fragment: const graphql.Fragment(
            fragmentName: 'MediaListOptions',
            document: documentNodeFragmentMediaListOptions,
          ),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Fragment$MediaListOptions? readFragment$MediaListOptions({
    required Map<String, dynamic> idFields,
    bool optimistic = true,
  }) {
    final result = this.readFragment(
      graphql.FragmentRequest(
        idFields: idFields,
        fragment: const graphql.Fragment(
          fragmentName: 'MediaListOptions',
          document: documentNodeFragmentMediaListOptions,
        ),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Fragment$MediaListOptions.fromJson(result);
  }
}

class Fragment$MediaListOptions$animeList {
  Fragment$MediaListOptions$animeList({
    this.sectionOrder,
    this.customLists,
    this.splitCompletedSectionByFormat,
    this.advancedScoringEnabled,
    this.advancedScoring,
    this.$__typename = 'MediaListTypeOptions',
  });

  factory Fragment$MediaListOptions$animeList.fromJson(
      Map<String, dynamic> json) {
    final l$sectionOrder = json['sectionOrder'];
    final l$customLists = json['customLists'];
    final l$splitCompletedSectionByFormat =
        json['splitCompletedSectionByFormat'];
    final l$advancedScoringEnabled = json['advancedScoringEnabled'];
    final l$advancedScoring = json['advancedScoring'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListOptions$animeList(
      sectionOrder: (l$sectionOrder as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      customLists: (l$customLists as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      splitCompletedSectionByFormat: (l$splitCompletedSectionByFormat as bool?),
      advancedScoringEnabled: (l$advancedScoringEnabled as bool?),
      advancedScoring: (l$advancedScoring as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<String?>? sectionOrder;

  final List<String?>? customLists;

  final bool? splitCompletedSectionByFormat;

  final bool? advancedScoringEnabled;

  final List<String?>? advancedScoring;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$sectionOrder = sectionOrder;
    _resultData['sectionOrder'] = l$sectionOrder?.map((e) => e).toList();
    final l$customLists = customLists;
    _resultData['customLists'] = l$customLists?.map((e) => e).toList();
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    _resultData['splitCompletedSectionByFormat'] =
        l$splitCompletedSectionByFormat;
    final l$advancedScoringEnabled = advancedScoringEnabled;
    _resultData['advancedScoringEnabled'] = l$advancedScoringEnabled;
    final l$advancedScoring = advancedScoring;
    _resultData['advancedScoring'] = l$advancedScoring?.map((e) => e).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$sectionOrder = sectionOrder;
    final l$customLists = customLists;
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    final l$advancedScoringEnabled = advancedScoringEnabled;
    final l$advancedScoring = advancedScoring;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$sectionOrder == null
          ? null
          : Object.hashAll(l$sectionOrder.map((v) => v)),
      l$customLists == null
          ? null
          : Object.hashAll(l$customLists.map((v) => v)),
      l$splitCompletedSectionByFormat,
      l$advancedScoringEnabled,
      l$advancedScoring == null
          ? null
          : Object.hashAll(l$advancedScoring.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListOptions$animeList ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$sectionOrder = sectionOrder;
    final lOther$sectionOrder = other.sectionOrder;
    if (l$sectionOrder != null && lOther$sectionOrder != null) {
      if (l$sectionOrder.length != lOther$sectionOrder.length) {
        return false;
      }
      for (int i = 0; i < l$sectionOrder.length; i++) {
        final l$sectionOrder$entry = l$sectionOrder[i];
        final lOther$sectionOrder$entry = lOther$sectionOrder[i];
        if (l$sectionOrder$entry != lOther$sectionOrder$entry) {
          return false;
        }
      }
    } else if (l$sectionOrder != lOther$sectionOrder) {
      return false;
    }
    final l$customLists = customLists;
    final lOther$customLists = other.customLists;
    if (l$customLists != null && lOther$customLists != null) {
      if (l$customLists.length != lOther$customLists.length) {
        return false;
      }
      for (int i = 0; i < l$customLists.length; i++) {
        final l$customLists$entry = l$customLists[i];
        final lOther$customLists$entry = lOther$customLists[i];
        if (l$customLists$entry != lOther$customLists$entry) {
          return false;
        }
      }
    } else if (l$customLists != lOther$customLists) {
      return false;
    }
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    final lOther$splitCompletedSectionByFormat =
        other.splitCompletedSectionByFormat;
    if (l$splitCompletedSectionByFormat !=
        lOther$splitCompletedSectionByFormat) {
      return false;
    }
    final l$advancedScoringEnabled = advancedScoringEnabled;
    final lOther$advancedScoringEnabled = other.advancedScoringEnabled;
    if (l$advancedScoringEnabled != lOther$advancedScoringEnabled) {
      return false;
    }
    final l$advancedScoring = advancedScoring;
    final lOther$advancedScoring = other.advancedScoring;
    if (l$advancedScoring != null && lOther$advancedScoring != null) {
      if (l$advancedScoring.length != lOther$advancedScoring.length) {
        return false;
      }
      for (int i = 0; i < l$advancedScoring.length; i++) {
        final l$advancedScoring$entry = l$advancedScoring[i];
        final lOther$advancedScoring$entry = lOther$advancedScoring[i];
        if (l$advancedScoring$entry != lOther$advancedScoring$entry) {
          return false;
        }
      }
    } else if (l$advancedScoring != lOther$advancedScoring) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListOptions$animeList
    on Fragment$MediaListOptions$animeList {
  CopyWith$Fragment$MediaListOptions$animeList<
          Fragment$MediaListOptions$animeList>
      get copyWith => CopyWith$Fragment$MediaListOptions$animeList(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaListOptions$animeList<TRes> {
  factory CopyWith$Fragment$MediaListOptions$animeList(
    Fragment$MediaListOptions$animeList instance,
    TRes Function(Fragment$MediaListOptions$animeList) then,
  ) = _CopyWithImpl$Fragment$MediaListOptions$animeList;

  factory CopyWith$Fragment$MediaListOptions$animeList.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListOptions$animeList;

  TRes call({
    List<String?>? sectionOrder,
    List<String?>? customLists,
    bool? splitCompletedSectionByFormat,
    bool? advancedScoringEnabled,
    List<String?>? advancedScoring,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaListOptions$animeList<TRes>
    implements CopyWith$Fragment$MediaListOptions$animeList<TRes> {
  _CopyWithImpl$Fragment$MediaListOptions$animeList(
    this._instance,
    this._then,
  );

  final Fragment$MediaListOptions$animeList _instance;

  final TRes Function(Fragment$MediaListOptions$animeList) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? sectionOrder = _undefined,
    Object? customLists = _undefined,
    Object? splitCompletedSectionByFormat = _undefined,
    Object? advancedScoringEnabled = _undefined,
    Object? advancedScoring = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListOptions$animeList(
        sectionOrder: sectionOrder == _undefined
            ? _instance.sectionOrder
            : (sectionOrder as List<String?>?),
        customLists: customLists == _undefined
            ? _instance.customLists
            : (customLists as List<String?>?),
        splitCompletedSectionByFormat:
            splitCompletedSectionByFormat == _undefined
                ? _instance.splitCompletedSectionByFormat
                : (splitCompletedSectionByFormat as bool?),
        advancedScoringEnabled: advancedScoringEnabled == _undefined
            ? _instance.advancedScoringEnabled
            : (advancedScoringEnabled as bool?),
        advancedScoring: advancedScoring == _undefined
            ? _instance.advancedScoring
            : (advancedScoring as List<String?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaListOptions$animeList<TRes>
    implements CopyWith$Fragment$MediaListOptions$animeList<TRes> {
  _CopyWithStubImpl$Fragment$MediaListOptions$animeList(this._res);

  TRes _res;

  call({
    List<String?>? sectionOrder,
    List<String?>? customLists,
    bool? splitCompletedSectionByFormat,
    bool? advancedScoringEnabled,
    List<String?>? advancedScoring,
    String? $__typename,
  }) =>
      _res;
}

class Fragment$MediaListOptions$mangaList {
  Fragment$MediaListOptions$mangaList({
    this.sectionOrder,
    this.customLists,
    this.splitCompletedSectionByFormat,
    this.advancedScoringEnabled,
    this.advancedScoring,
    this.$__typename = 'MediaListTypeOptions',
  });

  factory Fragment$MediaListOptions$mangaList.fromJson(
      Map<String, dynamic> json) {
    final l$sectionOrder = json['sectionOrder'];
    final l$customLists = json['customLists'];
    final l$splitCompletedSectionByFormat =
        json['splitCompletedSectionByFormat'];
    final l$advancedScoringEnabled = json['advancedScoringEnabled'];
    final l$advancedScoring = json['advancedScoring'];
    final l$$__typename = json['__typename'];
    return Fragment$MediaListOptions$mangaList(
      sectionOrder: (l$sectionOrder as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      customLists: (l$customLists as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      splitCompletedSectionByFormat: (l$splitCompletedSectionByFormat as bool?),
      advancedScoringEnabled: (l$advancedScoringEnabled as bool?),
      advancedScoring: (l$advancedScoring as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<String?>? sectionOrder;

  final List<String?>? customLists;

  final bool? splitCompletedSectionByFormat;

  final bool? advancedScoringEnabled;

  final List<String?>? advancedScoring;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$sectionOrder = sectionOrder;
    _resultData['sectionOrder'] = l$sectionOrder?.map((e) => e).toList();
    final l$customLists = customLists;
    _resultData['customLists'] = l$customLists?.map((e) => e).toList();
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    _resultData['splitCompletedSectionByFormat'] =
        l$splitCompletedSectionByFormat;
    final l$advancedScoringEnabled = advancedScoringEnabled;
    _resultData['advancedScoringEnabled'] = l$advancedScoringEnabled;
    final l$advancedScoring = advancedScoring;
    _resultData['advancedScoring'] = l$advancedScoring?.map((e) => e).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$sectionOrder = sectionOrder;
    final l$customLists = customLists;
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    final l$advancedScoringEnabled = advancedScoringEnabled;
    final l$advancedScoring = advancedScoring;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$sectionOrder == null
          ? null
          : Object.hashAll(l$sectionOrder.map((v) => v)),
      l$customLists == null
          ? null
          : Object.hashAll(l$customLists.map((v) => v)),
      l$splitCompletedSectionByFormat,
      l$advancedScoringEnabled,
      l$advancedScoring == null
          ? null
          : Object.hashAll(l$advancedScoring.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Fragment$MediaListOptions$mangaList ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$sectionOrder = sectionOrder;
    final lOther$sectionOrder = other.sectionOrder;
    if (l$sectionOrder != null && lOther$sectionOrder != null) {
      if (l$sectionOrder.length != lOther$sectionOrder.length) {
        return false;
      }
      for (int i = 0; i < l$sectionOrder.length; i++) {
        final l$sectionOrder$entry = l$sectionOrder[i];
        final lOther$sectionOrder$entry = lOther$sectionOrder[i];
        if (l$sectionOrder$entry != lOther$sectionOrder$entry) {
          return false;
        }
      }
    } else if (l$sectionOrder != lOther$sectionOrder) {
      return false;
    }
    final l$customLists = customLists;
    final lOther$customLists = other.customLists;
    if (l$customLists != null && lOther$customLists != null) {
      if (l$customLists.length != lOther$customLists.length) {
        return false;
      }
      for (int i = 0; i < l$customLists.length; i++) {
        final l$customLists$entry = l$customLists[i];
        final lOther$customLists$entry = lOther$customLists[i];
        if (l$customLists$entry != lOther$customLists$entry) {
          return false;
        }
      }
    } else if (l$customLists != lOther$customLists) {
      return false;
    }
    final l$splitCompletedSectionByFormat = splitCompletedSectionByFormat;
    final lOther$splitCompletedSectionByFormat =
        other.splitCompletedSectionByFormat;
    if (l$splitCompletedSectionByFormat !=
        lOther$splitCompletedSectionByFormat) {
      return false;
    }
    final l$advancedScoringEnabled = advancedScoringEnabled;
    final lOther$advancedScoringEnabled = other.advancedScoringEnabled;
    if (l$advancedScoringEnabled != lOther$advancedScoringEnabled) {
      return false;
    }
    final l$advancedScoring = advancedScoring;
    final lOther$advancedScoring = other.advancedScoring;
    if (l$advancedScoring != null && lOther$advancedScoring != null) {
      if (l$advancedScoring.length != lOther$advancedScoring.length) {
        return false;
      }
      for (int i = 0; i < l$advancedScoring.length; i++) {
        final l$advancedScoring$entry = l$advancedScoring[i];
        final lOther$advancedScoring$entry = lOther$advancedScoring[i];
        if (l$advancedScoring$entry != lOther$advancedScoring$entry) {
          return false;
        }
      }
    } else if (l$advancedScoring != lOther$advancedScoring) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Fragment$MediaListOptions$mangaList
    on Fragment$MediaListOptions$mangaList {
  CopyWith$Fragment$MediaListOptions$mangaList<
          Fragment$MediaListOptions$mangaList>
      get copyWith => CopyWith$Fragment$MediaListOptions$mangaList(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Fragment$MediaListOptions$mangaList<TRes> {
  factory CopyWith$Fragment$MediaListOptions$mangaList(
    Fragment$MediaListOptions$mangaList instance,
    TRes Function(Fragment$MediaListOptions$mangaList) then,
  ) = _CopyWithImpl$Fragment$MediaListOptions$mangaList;

  factory CopyWith$Fragment$MediaListOptions$mangaList.stub(TRes res) =
      _CopyWithStubImpl$Fragment$MediaListOptions$mangaList;

  TRes call({
    List<String?>? sectionOrder,
    List<String?>? customLists,
    bool? splitCompletedSectionByFormat,
    bool? advancedScoringEnabled,
    List<String?>? advancedScoring,
    String? $__typename,
  });
}

class _CopyWithImpl$Fragment$MediaListOptions$mangaList<TRes>
    implements CopyWith$Fragment$MediaListOptions$mangaList<TRes> {
  _CopyWithImpl$Fragment$MediaListOptions$mangaList(
    this._instance,
    this._then,
  );

  final Fragment$MediaListOptions$mangaList _instance;

  final TRes Function(Fragment$MediaListOptions$mangaList) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? sectionOrder = _undefined,
    Object? customLists = _undefined,
    Object? splitCompletedSectionByFormat = _undefined,
    Object? advancedScoringEnabled = _undefined,
    Object? advancedScoring = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Fragment$MediaListOptions$mangaList(
        sectionOrder: sectionOrder == _undefined
            ? _instance.sectionOrder
            : (sectionOrder as List<String?>?),
        customLists: customLists == _undefined
            ? _instance.customLists
            : (customLists as List<String?>?),
        splitCompletedSectionByFormat:
            splitCompletedSectionByFormat == _undefined
                ? _instance.splitCompletedSectionByFormat
                : (splitCompletedSectionByFormat as bool?),
        advancedScoringEnabled: advancedScoringEnabled == _undefined
            ? _instance.advancedScoringEnabled
            : (advancedScoringEnabled as bool?),
        advancedScoring: advancedScoring == _undefined
            ? _instance.advancedScoring
            : (advancedScoring as List<String?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Fragment$MediaListOptions$mangaList<TRes>
    implements CopyWith$Fragment$MediaListOptions$mangaList<TRes> {
  _CopyWithStubImpl$Fragment$MediaListOptions$mangaList(this._res);

  TRes _res;

  call({
    List<String?>? sectionOrder,
    List<String?>? customLists,
    bool? splitCompletedSectionByFormat,
    bool? advancedScoringEnabled,
    List<String?>? advancedScoring,
    String? $__typename,
  }) =>
      _res;
}
